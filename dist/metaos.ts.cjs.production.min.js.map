{"version":3,"file":"metaos.ts.cjs.production.min.js","sources":["../src/api/APIRequester.ts","../src/constants/fee.ts","../src/api/BaseAPI.ts","../src/api/AuthAPI.ts","../src/api/AuthzAPI.ts","../src/api/BankAPI.ts","../src/api/DeflationAPI.ts","../src/api/GovAPI.ts","../src/api/MintAPI.ts","../src/api/PoolIncentive.ts","../src/api/SlashingAPI.ts","../src/api/StakingAPI.ts","../src/api/SwapAPI.ts","../src/api/TendermintAPI.ts","../src/api/TokenAPI.ts","../src/api/TxAPI.ts","../src/api/WasmAPI.ts","../src/constants/network.ts","../src/types/wallet.ts","../src/types/index.ts","../src/constants/precision.ts","../src/constants/tick.ts","../src/utils/formatCurrencyAmount.ts","../src/utils/sort.ts","../src/utils/formatMoment.ts","../src/core/LiquidityMath.ts","../src/core/TickMath.ts","../src/msgs/BaseMsg.ts","../src/proto/google/protobuf/any.ts","../src/proto/google/protobuf/timestamp.ts","../src/proto/cosmos/authz/v1beta1/authz.ts","../src/proto/cosmos/authz/v1beta1/tx.ts","../src/msgs/cosmos/AuthzMsg.ts","../src/proto/cosmos/base/v1beta1/coin.ts","../src/proto/cosmos/bank/v1beta1/bank.ts","../src/proto/cosmos/bank/v1beta1/tx.ts","../src/msgs/cosmos/BankMsg.ts","../src/proto/cosmos/crisis/v1beta1/tx.ts","../src/msgs/cosmos/CrisisMsg.ts","../src/proto/cosmos/distribution/v1beta1/tx.ts","../src/msgs/cosmos/DistributionMsg.ts","../src/proto/cosmos/evidence/v1beta1/tx.ts","../src/msgs/cosmos/EvidenceMsg.ts","../src/proto/cosmos/feegrant/v1beta1/tx.ts","../src/msgs/cosmos/FeeGrantMsg.ts","../src/proto/google/protobuf/duration.ts","../src/proto/cosmos/gov/v1beta1/gov.ts","../src/proto/cosmos/gov/v1beta1/tx.ts","../src/msgs/cosmos/GovMsg.ts","../src/proto/cosmos/vesting/v1beta1/tx.ts","../src/msgs/cosmos/VestingMsg.ts","../src/proto/deflation/repurchase.ts","../src/proto/deflation/tx.ts","../src/msgs/DeflationMsg.ts","../src/proto/ethermint/evm/v1/evm.ts","../src/proto/ethermint/evm/v1/tx.ts","../src/msgs/EvmMsg.ts","../src/proto/nft/tx.ts","../src/msgs/NftMsg.ts","../src/proto/pool-incentives/rand_swap_reward.ts","../src/proto/pool-incentives/liquidity_reward.ts","../src/proto/pool-incentives/tx.ts","../src/msgs/PoolMsg.ts","../src/proto/tendermint/types/types.ts","../src/proto/cosmos/staking/v1beta1/staking.ts","../src/proto/tendermint/crypto/proof.ts","../src/proto/tendermint/version/types.ts","../src/proto/tendermint/crypto/keys.ts","../src/proto/tendermint/types/validator.ts","../src/proto/cosmos/staking/v1beta1/tx.ts","../src/msgs/StakingMsg.ts","../src/proto/swap/tx.ts","../src/msgs/SwapMsg.ts","../src/proto/token/tx.ts","../src/msgs/TokenMsg.ts","../src/proto/cosmwasm/wasm/v1/types.ts","../src/proto/cosmwasm/wasm/v1/tx.ts","../src/msgs/WasmMsg.ts","../src/proto/cosmos/crypto/multisig/v1beta1/multisig.ts","../src/proto/cosmos/crypto/secp256k1/keys.ts","../src/proto/cosmos/tx/signing/v1beta1/signing.ts","../src/proto/cosmos/tx/v1beta1/tx.ts","../src/clients/TxClient.ts","../src/clients/APIClient.ts","../src/constants/date.ts","../src/core/TransactionLooper.ts","../src/constants/number.ts","../src/utils/parseToMap.ts","../src/utils/isNumberic.ts","../src/utils/decimalNumber.ts","../src/utils/deepCopy.ts","../src/utils/mathUtil.ts","../src/utils/encrypt.ts","../src/utils/toPercentFee.ts","../src/utils/getPoolAddress.ts","../src/utils/crypto.ts","../src/utils/toPercent.ts","../src/utils/formatPrice.ts"],"sourcesContent":["import Axios, { AxiosInstance } from \"axios\";\nimport _ from 'lodash';\nimport { OrderBy } from \"../proto/cosmos/tx/v1beta1/service\";\nimport Long from \"long\";\n\n// export type APIParams = Record<string, string | number | null | undefined | boolean | Array<string> | Array<number> | Long>;\nexport type APIParams = Record<string, any>;\n\nexport interface PaginationOptions {\n  \"pagination.limit\"?: string;\n  \"pagination.offset\"?: string;\n  \"pagination.key\"?: string;\n  \"pagination.count_total\"?: \"true\" | \"false\";\n  \"pagination.reverse\"?: \"true\" | \"false\";\n  \"order_by\"?: keyof typeof OrderBy;\n}\n\nexport interface Pagination {\n  next_key: string | null;\n  total: number;\n}\n\nexport class APIRequester {\n  private axios: AxiosInstance;\n\n  constructor(baseURL: string) {\n    this.axios = Axios.create({\n      baseURL,\n      headers: {\n        Accept: \"application/json\",\n      },\n      timeout: 60000,\n    });\n  }\n\n  public async get<T>(\n    endpoint: string,\n    params: URLSearchParams | APIParams = {}\n  ): Promise<T> {\n    return this.axios.get(endpoint, { params }).then((d) => toCamelCase(d.data));\n  }\n\n  public async post<T>(endpoint: string, data?: APIParams): Promise<T> {\n    return this.axios.post(endpoint, data).then((d) => toCamelCase(d.data));\n  }\n}\n\nfunction toCamelCase (obj: any) {\n  let rtn = obj\n  if(!rtn) {\n    return rtn\n  } else if (typeof (obj) === 'object') {\n    if (obj instanceof Array) {\n      rtn = obj.map(toCamelCase)\n    } else {\n      rtn = {}\n      for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          const newKey = key.replace(/(_\\w)/g, k => k[1].toUpperCase())\n          rtn[newKey] = toCamelCase(obj[key])\n        }\n      }\n    }\n  }\n  return rtn\n}\n","export enum Fee_Amount {\n  LOWEST = 100,\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000,\n}\n\nexport const FEE_AMOUNT_DETAIL: Record<\n  Fee_Amount,\n  { label: string; value: Fee_Amount; description: string }\n> = {\n  [Fee_Amount.LOWEST]: {\n    label: \"0.01\",\n    value: Fee_Amount.LOWEST,\n    description: \"Best for very stable pairs.\",\n  },\n  [Fee_Amount.LOW]: {\n    label: \"0.05\",\n    value: Fee_Amount.LOW,\n    description: \"Best for stable pairs.\",\n  },\n  [Fee_Amount.MEDIUM]: {\n    label: \"0.3\",\n    value: Fee_Amount.MEDIUM,\n    description: \"Best for most pairs.\",\n  },\n  [Fee_Amount.HIGH]: {\n    label: \"1\",\n    value: Fee_Amount.HIGH,\n    description: \"Best for exotic pairs.\",\n  },\n};\n","import { APIRequester } from \"./APIRequester\";\n\nexport abstract class BaseAPI {\n  constructor(protected request: APIRequester) {}\n}\n","import { BaseAPI } from \"./BaseAPI\";\n\nexport interface IResAccountInfo {\n  account: {\n    \"@type\": string;\n    base_account: {\n      address: string;\n      pub_key: {\n        \"@type\": string;\n        key: string;\n      };\n      account_number: string;\n      sequence: string;\n    };\n    code_hash: string;\n  };\n}\n\nexport class AuthAPI extends BaseAPI {\n  public async accounts(\n    accountAddress: string,\n  ): Promise<IResAccountInfo> {\n    return this.request.get<IResAccountInfo>(\n      `/cosmos/auth/v1beta1/accounts/${accountAddress}`\n    );\n  }\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {QueryGrantsResponse} from \"../proto/cosmos/authz/v1beta1/query\";\n\nexport class AuthzAPI extends BaseAPI {\n  public async grants(\n    granter: string,\n    grantee: string,\n    msgTypeUrl?: string,\n    params?: PaginationOptions\n  ): Promise<QueryGrantsResponse> {\n    return this.request.get<QueryGrantsResponse>(\n      `/cosmos/authz/v1beta1/grants`,\n      {\n        granter,\n        grantee,\n        msg_type_url: msgTypeUrl,\n        ...params\n      }\n    );\n  }\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport { Token } from \"../types\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {Balance} from \"../proto/cosmos/bank/v1beta1/genesis\";\nimport {\n  QueryAllBalancesResponse,\n  QueryBalanceResponse,\n  QueryDenomMetadataResponse, QueryDenomsMetadataResponse,\n  QuerySupplyOfResponse,\n  QueryTotalSupplyResponse,\n} from \"../proto/cosmos/bank/v1beta1/query\";\nimport {QueryAllMetadataResponse} from \"../proto/token/query\";\n\nexport class BankAPI extends BaseAPI {\n  public async allBalances(\n    accountAddress: string,\n    params?: PaginationOptions\n  ): Promise<QueryAllBalancesResponse> {\n    return this.request.get<QueryAllBalancesResponse>(\n      `/cosmos/bank/v1beta1/balances/${accountAddress}`,\n      {\n        ...params\n      }\n    );\n  }\n\n  public async balance(\n    denom: string,\n    accountAddress: string,\n  ): Promise<QueryBalanceResponse> {\n    return this.request.get<QueryBalanceResponse>(\n      `/cosmos/bank/v1beta1/balances/${accountAddress}/by_denom`,\n      {\n        denom: denom,\n      }\n    );\n  }\n\n  public async totalSupply(params?: PaginationOptions): Promise<QueryTotalSupplyResponse> {\n    return this.request.get<QueryTotalSupplyResponse>(\n      `/cosmos/bank/v1beta1/supply`,\n      { ...params }\n    );\n  }\n\n  public async supplyOf(\n    denom: string\n  ): Promise<QuerySupplyOfResponse> {\n    return this.request.get<QuerySupplyOfResponse>(\n      `/cosmos/bank/v1beta1/supply/${denom}`\n    );\n  }\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {QueryAllRepurchaseResponse, QueryGetRepurchaseResponse, QueryParamsResponse} from \"../proto/deflation/query\";\n\nexport class DeflationAPI extends BaseAPI {\n  public async allRepurchase(\n    params?: PaginationOptions\n  ): Promise<QueryAllRepurchaseResponse> {\n    return this.request.get<QueryAllRepurchaseResponse>(\n      `/metaos-labs/metaos/deflation/repurchases`,\n      { ...params }\n    );\n  }\n\n  public async getRepurchase(\n    denom: string,\n  ): Promise<QueryGetRepurchaseResponse> {\n    return this.request.get<QueryGetRepurchaseResponse>(\n      `/metaos-labs/metaos/deflation/repurchases/${denom}`,\n    );\n  }\n\n  public async params(): Promise<QueryParamsResponse> {\n    return this.request.get<QueryParamsResponse>(\n      `/metaos-labs/metaos/deflation/params`,\n    );\n  }\n\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {\n  QueryDepositResponse,\n  QueryDepositsResponse,\n  QueryParamsResponse,\n  QueryProposalResponse,\n  QueryProposalsResponse,\n  QueryTallyResultResponse,\n  QueryVoteResponse,\n  QueryVotesResponse\n} from \"../proto/cosmos/gov/v1beta1/query\";\n\nexport class GovAPI extends BaseAPI {\n  public async proposals(\n    params?: PaginationOptions\n  ): Promise<QueryProposalsResponse> {\n    return this.request.get<QueryProposalsResponse>(\n      `/cosmos/gov/v1beta1/proposals`,\n      {\n        ...params\n      }\n    );\n  }\n\n  public async proposal(\n    proposalId: number,\n  ): Promise<QueryProposalResponse> {\n    return this.request.get<QueryProposalResponse>(\n      `/cosmos/gov/v1beta1/proposals/${proposalId}`\n    );\n  }\n\n  public async deposits(\n    proposalId: number,\n    params?: PaginationOptions\n  ): Promise<QueryDepositsResponse> {\n    return this.request.get<QueryDepositsResponse>(\n      `/cosmos/gov/v1beta1/proposals/${proposalId}/deposits`,\n      { ...params }\n    );\n  }\n\n  public async deposit(\n    proposalId: number,\n    depositor: string\n  ): Promise<QueryDepositResponse> {\n    return this.request.get<QueryDepositResponse>(\n      `/cosmos/gov/v1beta1/proposals/${proposalId}/deposits/${depositor}`,\n    );\n  }\n\n  public async votes(\n    proposalId: number,\n    params?: PaginationOptions\n  ): Promise<QueryVotesResponse> {\n    return this.request.get<QueryVotesResponse>(\n      `/cosmos/gov/v1beta1/proposals/${proposalId}/votes`,\n      { ...params }\n    );\n  }\n\n  public async vote(\n    proposalId: number,\n    voter: string\n  ): Promise<QueryVoteResponse> {\n    return this.request.get<QueryVoteResponse>(\n      `/cosmos/gov/v1beta1/proposals/${proposalId}/votes/${voter}`,\n    );\n  }\n\n  public async tallyResult(\n    proposalId: number,\n  ): Promise<QueryTallyResultResponse> {\n    return this.request.get<QueryTallyResultResponse>(\n      `/cosmos/gov/v1beta1/proposals/${proposalId}/tally`,\n    );\n  }\n\n  public async params(paramsType: 'voting' | 'tally' | 'deposit'): Promise<QueryParamsResponse> {\n    return this.request.get<QueryParamsResponse>(\n      `/cosmos/gov/v1beta1/params/${paramsType}`,\n    );\n  }\n\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {\n  QueryParamsResponse,\n  QueryAnnualProvisionsResponse,\n  QueryInflationResponse\n} from \"../proto/cosmos/mint/v1beta1/query\";\n\nexport class MintAPI extends BaseAPI {\n  public async inflation(): Promise<QueryInflationResponse> {\n    return this.request.get<QueryInflationResponse>(\n      `/cosmos/mint/v1beta1/inflation`,\n    );\n  }\n\n  public async annualProvisions(): Promise<QueryAnnualProvisionsResponse> {\n    return this.request.get<QueryAnnualProvisionsResponse>(\n      `cosmos/mint/v1beta1/annual_provisions`,\n    );\n  }\n\n  public async params(): Promise<QueryParamsResponse> {\n    return this.request.get<QueryParamsResponse>(\n      `/cosmos/mint/v1beta1/params`,\n    );\n  }\n\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {\n  QueryAllLiquidityPoolRewardResponse,\n  QueryAllLiquidityRewardConfigResponse,\n  QueryAllLiquidityRewardDenomResponse,\n  QueryAllRandSwapAccountRewardResponse,\n  QueryAllRandSwapPoolRewardResponse,\n  QueryAllRandSwapRewardConfigResponse,\n  QueryAllRandSwapRewardDenomResponse,\n  QueryAllRandSwapRewardRevealResponse,\n  QueryGetLiquidityPoolRewardResponse,\n  QueryGetLiquidityRewardConfigResponse,\n  QueryGetLiquidityRewardDenomResponse,\n  QueryGetRandSwapAccountRewardResponse,\n  QueryGetRandSwapPoolRewardResponse,\n  QueryGetRandSwapRewardConfigResponse,\n  QueryGetRandSwapRewardDenomResponse,\n  QueryParamsResponse\n} from \"../proto/pool-incentives/query\";\n\nexport class PoolIncentiveAPI extends BaseAPI {\n  public async allLiquidityPoolReward(\n    params?: PaginationOptions\n  ): Promise<QueryAllLiquidityPoolRewardResponse> {\n    return this.request.get<QueryAllLiquidityPoolRewardResponse>(\n      `/metaos-labs/metaos/pool-incentives/liquidity_pool_rewards`,\n      { ...params }\n    );\n  }\n\n  public async getLiquidityPoolReward(\n    address: string,\n  ): Promise<QueryGetLiquidityPoolRewardResponse> {\n    return this.request.get<QueryGetLiquidityPoolRewardResponse>(\n      `/metaos-labs/metaos/pool-incentives/liquidity_pool_rewards/${address}`,\n    );\n  }\n\n  public async allLiquidityRewardConfig(\n    params?: PaginationOptions\n  ): Promise<QueryAllLiquidityRewardConfigResponse> {\n    return this.request.get<QueryAllLiquidityRewardConfigResponse>(\n      `/metaos-labs/metaos/pool-incentives/liquidity_reward_configs`,\n      { ...params }\n    );\n  }\n\n  public async getLiquidityRewardConfig(\n    id: string\n  ): Promise<QueryGetLiquidityRewardConfigResponse> {\n    return this.request.get<QueryGetLiquidityRewardConfigResponse>(\n      `/metaos-labs/metaos/pool-incentives/liquidity_reward_configs/${id}`,\n    );\n  }\n\n  public async allLiquidityRewardDenomR(\n    params?: PaginationOptions\n  ): Promise<QueryAllLiquidityRewardDenomResponse> {\n    return this.request.get<QueryAllLiquidityRewardDenomResponse>(\n      `/metaos-labs/metaos/pool-incentives/liquidity_reward_denoms`,\n      { ...params }\n    );\n  }\n\n  public async getLiquidityRewardDenom(\n    denom: string\n  ): Promise<QueryGetLiquidityRewardDenomResponse> {\n    return this.request.get<QueryGetLiquidityRewardDenomResponse>(\n      `/metaos-labs/metaos/pool-incentives/liquidity_reward_denoms/by_denom`,\n      {\n        denom\n      }\n    );\n  }\n\n  public async params(): Promise<QueryParamsResponse> {\n    return this.request.get<QueryParamsResponse>(\n      `/metaos-labs/metaos/pool-incentives/params`,\n    );\n  }\n\n  public async allRandSwapAccountReward(\n    params?: PaginationOptions\n  ): Promise<QueryAllRandSwapAccountRewardResponse> {\n    return this.request.get<QueryAllRandSwapAccountRewardResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_account_rewards`,\n      { ...params }\n    );\n  }\n\n  public async getRandSwapAccountReward(\n    account: string,\n    denom: string\n  ): Promise<QueryGetRandSwapAccountRewardResponse> {\n    return this.request.get<QueryGetRandSwapAccountRewardResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_account_rewards/${account}/by_denom`,\n      {\n        denom\n      }\n    );\n  }\n\n  public async allRandSwapPoolReward(\n    params?: PaginationOptions\n  ): Promise<QueryAllRandSwapPoolRewardResponse> {\n    return this.request.get<QueryAllRandSwapPoolRewardResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_pool_rewards`,\n      { ...params }\n    );\n  }\n\n  public async getRandSwapPoolReward(\n    address: string,\n  ): Promise<QueryGetRandSwapPoolRewardResponse> {\n    return this.request.get<QueryGetRandSwapPoolRewardResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_pool_rewards/${address}`,\n    );\n  }\n\n  public async allRandSwapRewardConfig(\n    params?: PaginationOptions\n  ): Promise<QueryAllRandSwapRewardConfigResponse> {\n    return this.request.get<QueryAllRandSwapRewardConfigResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_reward_configs`,\n      { ...params }\n    );\n  }\n\n  public async getRandSwapRewardConfig(\n    id: string\n  ): Promise<QueryGetRandSwapRewardConfigResponse> {\n    return this.request.get<QueryGetRandSwapRewardConfigResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_reward_configs/${id}`,\n    );\n  }\n\n  public async allRandSwapRewardDenom(\n    params?: PaginationOptions\n  ): Promise<QueryAllRandSwapRewardDenomResponse> {\n    return this.request.get<QueryAllRandSwapRewardDenomResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_reward_denoms`,\n      { ...params }\n    );\n  }\n\n  public async getRandSwapRewardDenom(\n    denom: string\n  ): Promise<QueryGetRandSwapRewardDenomResponse> {\n    return this.request.get<QueryGetRandSwapRewardDenomResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_reward_denoms/by_denom`,\n      {\n        denom\n      }\n    );\n  }\n\n  public async allRandSwapRewardReveal(\n    params?: PaginationOptions\n  ): Promise<QueryAllRandSwapRewardRevealResponse> {\n    return this.request.get<QueryAllRandSwapRewardRevealResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_reward_reveals`,\n      { ...params }\n    );\n  }\n\n  public async getRandSwapRewardReveal(\n    configId: number,\n    round: number\n  ): Promise<QueryGetRandSwapRewardDenomResponse> {\n    return this.request.get<QueryGetRandSwapRewardDenomResponse>(\n      `/metaos-labs/metaos/pool-incentives/rand_swap_reward_reveals/${configId}/${round}`\n    );\n  }\n\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {\n  QueryParamsResponse,\n  QuerySigningInfoResponse,\n  QuerySigningInfosResponse\n} from \"../proto/cosmos/slashing/v1beta1/query\";\n\nexport class SlashingAPI extends BaseAPI {\n  public async signingInfos(\n    params?: PaginationOptions\n  ): Promise<QuerySigningInfosResponse> {\n    return this.request.get<QuerySigningInfosResponse>(\n      `/cosmos/slashing/v1beta1/signing_infos`,\n      { ...params }\n    );\n  }\n\n  public async signingInfo(\n    valConsAddress: string,\n  ): Promise<QuerySigningInfoResponse> {\n    return this.request.get<QuerySigningInfoResponse>(\n      `/cosmos/slashing/v1beta1/signing_infos/${valConsAddress}`,\n    );\n  }\n\n  public async params(): Promise<QueryParamsResponse> {\n    return this.request.get<QueryParamsResponse>(\n      `/cosmos/slashing/v1beta1/params`,\n    );\n  }\n\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {\n  QueryDelegatorDelegationsResponse,\n  QueryDelegatorUnbondingDelegationsResponse,\n  QueryRedelegationsResponse, QueryValidatorResponse, QueryValidatorsResponse,\n  QueryParamsResponse, QueryPoolResponse, QueryDelegationResponse, QueryUnbondingDelegationResponse\n} from \"../proto/cosmos/staking/v1beta1/query\";\n\nexport class StakingAPI extends BaseAPI {\n  public async delegations(\n    delegator: string,\n    params?: PaginationOptions\n  ): Promise<QueryDelegatorDelegationsResponse> {\n    return this.request.get<QueryDelegatorDelegationsResponse>(\n      `/cosmos/staking/v1beta1/delegations/${delegator}`,\n      { ...params }\n    );\n  }\n\n  public async redelegations(\n    delegator?: string,\n    params?: PaginationOptions\n  ): Promise<QueryRedelegationsResponse> {\n    return this.request.get<QueryRedelegationsResponse>(\n      `/cosmos/staking/v1beta1/delegators/${delegator}/redelegations`,\n      { ...params }\n    );\n  }\n\n  public async unbondingDelegations(\n    delegator?: string,\n    params?: PaginationOptions\n  ): Promise<QueryDelegatorUnbondingDelegationsResponse> {\n    return this.request.get<QueryDelegatorUnbondingDelegationsResponse>(\n      `/cosmos/staking/v1beta1/delegators/${delegator}/unbonding_redelegations`,\n      { ...params }\n    );\n  }\n\n  public async delegatorDelegations(\n    delegator: string,\n    validator: string,\n    params?: PaginationOptions\n  ): Promise<QueryDelegatorDelegationsResponse> {\n    return this.request.get<QueryDelegatorDelegationsResponse>(\n      `/cosmos/staking/v1beta1/delegations/${validator}`,\n      { ...params }\n    );\n  }\n\n  public async delegationsByDelegator(\n    delegator: string,\n    params?: PaginationOptions\n  ): Promise<QueryValidatorsResponse> {\n    return this.request.get<QueryValidatorsResponse>(\n      `/cosmos/staking/v1beta1/delegators/${delegator}/validators`,\n      { ...params }\n    );\n  }\n\n  public async delegationsByDelegatorValidator(\n    delegator: string,\n    validator: string,\n    params?: PaginationOptions\n  ): Promise<QueryValidatorsResponse> {\n    return this.request.get<QueryValidatorsResponse>(\n      `/cosmos/staking/v1beta1/delegators/${delegator}/validators/${validator}`,\n      { ...params }\n    );\n  }\n\n  public async validators(\n    params?: PaginationOptions\n  ): Promise<QueryValidatorsResponse> {\n    return this.request.get<QueryValidatorsResponse>(\n      `/cosmos/staking/v1beta1/validators`,\n      { ...params }\n    );\n  }\n\n  public async validatorsByValidator(\n    validator: string\n  ): Promise<QueryValidatorResponse> {\n    return this.request.get<QueryValidatorResponse>(\n      `/cosmos/staking/v1beta1/validators/${validator}`,\n    );\n  }\n\n  public async validatorsDelegationsByValidator(\n    validator: string\n  ): Promise<QueryDelegatorDelegationsResponse> {\n    return this.request.get<QueryDelegatorDelegationsResponse>(\n      `/cosmos/staking/v1beta1/validators/${validator}/delegations`,\n    );\n  }\n\n  public async validatorsDelegationsByValidatorDelegator(\n    validator: string,\n    delegator: string,\n  ): Promise<QueryDelegationResponse> {\n    return this.request.get<QueryDelegationResponse>(\n      `/cosmos/staking/v1beta1/validators/${validator}/delegations/${delegator}`,\n    );\n  }\n\n  public async validatorsUnbondingDelegationsByValidatorDelegator(\n    validator: string,\n    delegator: string,\n  ): Promise<QueryUnbondingDelegationResponse> {\n    return this.request.get<QueryUnbondingDelegationResponse>(\n      `/cosmos/staking/v1beta1/validators/${validator}/delegations/${delegator}/unbonding_delegation`,\n    );\n  }\n\n  public async validatorsUnbondingDelegations(\n    validator: string,\n  ): Promise<QueryDelegatorUnbondingDelegationsResponse> {\n    return this.request.get<QueryDelegatorUnbondingDelegationsResponse>(\n      `/cosmos/staking/v1beta1/validators/${validator}/unbonding_delegations`,\n    );\n  }\n\n  public async pool(): Promise<QueryPoolResponse> {\n    return this.request.get<QueryPoolResponse>(\n      `/cosmos/staking/v1beta1/pool`,\n    );\n  }\n\n  public async params(): Promise<QueryParamsResponse> {\n    return this.request.get<QueryParamsResponse>(\n      `/cosmos/staking/v1beta1/params`,\n    );\n  }\n\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport { ILiquidityPosition, IPool, IPoolPrice } from \"../types\";\nimport qs from 'qs';\nimport {\n  QueryAllCorePoolResponse,\n  QueryAllLiquidityPositionOwnerResponse,\n  QueryAllPoolFeeResponse,\n  QueryAllPoolObservationResponse,\n  QueryAllPoolPositionResponse,\n  QueryAllPoolResponse,\n  QueryAllPoolSlot0Response,\n  QueryAllPoolTickResponse,\n  QueryGetCorePoolResponse,\n  QueryGetLiquidityPositionResponse,\n  QueryGetLiquidityPositionTokenUriResponse,\n  QueryGetPoolFeeResponse,\n  QueryGetPoolObservationRequest,\n  QueryGetPoolObservationResponse,\n  QueryGetPoolPositionResponse,\n  QueryGetPoolResponse,\n  QueryGetPoolSlot0Response,\n  QueryLiquidityPositionByIdsResponse,\n  QueryParamsResponse,\n  QueryPoolSlot0AggregationResponse,\n  QueryQuoteSwapExactInRequest,\n  QueryQuoteSwapExactInResponse,\n  QueryQuoteSwapExactOutRequest,\n  QueryQuoteSwapExactOutResponse\n} from \"../proto/swap/query\";\nimport {PaginationOptions} from \"./APIRequester\";\n\nexport class SwapAPI extends BaseAPI {\n\n  public async allCorePool(\n    params?: PaginationOptions\n  ): Promise<QueryAllCorePoolResponse> {\n    return this.request.get<QueryAllCorePoolResponse>(\n      `/metaos-labs/metaos/swap/core_pools`,\n      { ...params }\n    );\n  }\n\n  public async getCorePool(address: string): Promise<QueryGetCorePoolResponse> {\n    return this.request.get<QueryGetCorePoolResponse>(\n      `/metaos-labs/metaos/swap/core_pools/${address}`\n    );\n  }\n\n  public async liquidityPositionByIds(\n    tokenIds: Array<string>\n  ): Promise<QueryLiquidityPositionByIdsResponse> {\n    const params = qs.stringify({ tokenIds }, { indices: false });\n    return this.request.get<QueryLiquidityPositionByIdsResponse>(\n      `/metaos-labs/metaos/swap/liquidity_position_by_ids?${params}`\n    );\n  }\n\n  public async liquidityPositionById(\n    tokenId: string\n  ): Promise<QueryGetLiquidityPositionResponse> {\n    return this.request.get<QueryGetLiquidityPositionResponse>(\n      `/metaos-labs/metaos/swap/liquidity_positions/${tokenId}`\n    );\n  }\n\n  public async getLiquidityPositionTokenUri(tokenId: string): Promise<QueryGetLiquidityPositionTokenUriResponse> {\n    return this.request.get<QueryGetLiquidityPositionTokenUriResponse>(\n      `/metaos-labs/metaos/swap/liquidity_positions/${tokenId}/token_uri`\n    );\n  }\n\n  public async allLiquidityPositionOwner(\n    accountAddress: string,\n    skip_zero_liquidity: boolean\n  ): Promise<QueryAllLiquidityPositionOwnerResponse> {\n    return this.request.get<QueryAllLiquidityPositionOwnerResponse>(\n      `/metaos-labs/metaos/swap/liquidity_positions_owner/${accountAddress}`,\n      {\n        skip_zero_liquidity\n      }\n    );\n  }\n\n  public async params(): Promise<QueryParamsResponse> {\n    return this.request.get<QueryParamsResponse>(\n      `/metaos-labs/metaos/swap/params`,\n    );\n  }\n\n  public async allPoolFee(\n    params?: PaginationOptions\n  ): Promise<QueryAllPoolFeeResponse> {\n    return this.request.get<QueryAllPoolFeeResponse>(\n      `/metaos-labs/metaos/swap/pool/fees`,\n      {...params}\n    );\n  }\n\n  public async getPoolFee(\n    fee: number\n  ): Promise<QueryGetPoolFeeResponse> {\n    return this.request.get<QueryGetPoolFeeResponse>(\n      `/metaos-labs/metaos/swap/pool/fees/${fee}`,\n    );\n  }\n\n  public async allPoolObservation(\n    params?: PaginationOptions\n  ): Promise<QueryAllPoolObservationResponse> {\n    return this.request.get<QueryAllPoolObservationResponse>(\n      `/metaos-labs/metaos/swap/pool_observations`,\n      {...params}\n    );\n  }\n\n  public async allPoolPosition(\n    address: string,\n    owner: string,\n    params?: PaginationOptions\n  ): Promise<QueryAllPoolPositionResponse> {\n    return this.request.get<QueryAllPoolPositionResponse>(\n      `/metaos-labs/metaos/swap/pool_positions`,\n      {address, owner, ...params}\n    );\n  }\n\n  /**\n   * find pool list by address array\n   * @param addresses\n   */\n  public async poolSlot0Aggregation(\n    addresses: Array<string>\n  ): Promise<QueryPoolSlot0AggregationResponse> {\n    const params = qs.stringify({ addresses }, { indices: false });\n    return this.request.get<QueryPoolSlot0AggregationResponse>(\n      `/metaos-labs/metaos/swap/pool_slot0_aggregations?${params}`,\n    );\n  }\n\n  public async allPoolSlot0(\n    params?: PaginationOptions\n  ): Promise<QueryAllPoolSlot0Response> {\n    return this.request.get<QueryAllPoolSlot0Response>(\n      `/metaos-labs/metaos/swap/pool_slot0s`,\n      {...params}\n    );\n  }\n\n  public async allPoolTick(\n    address: string,\n    params?: PaginationOptions\n  ): Promise<QueryAllPoolTickResponse> {\n    return this.request.get<QueryAllPoolTickResponse>(\n      `/metaos-labs/metaos/swap/pool_ticks`,\n      {address, ...params}\n    );\n  }\n\n  public async allPool(\n    params?: PaginationOptions\n  ): Promise<QueryAllPoolResponse> {\n    return this.request.get<QueryAllPoolResponse>(\n      `/metaos-labs/metaos/swap/pools`,\n      {...params}\n    );\n  }\n\n  public async getPool(\n    address: string\n  ): Promise<QueryGetPoolResponse> {\n    return this.request.get<QueryGetPoolResponse>(\n      `/metaos-labs/metaos/swap/pools/${address}`\n    );\n  }\n\n  public async getPoolObservation(\n    address: string,\n    index: number\n  ): Promise<QueryGetPoolObservationResponse> {\n    return this.request.get<QueryGetPoolObservationResponse>(\n      `/metaos-labs/metaos/swap/pools/${address}/observations/${index}`\n    );\n  }\n\n  public async getPoolPosition(\n    address: string,\n    owner: string,\n    tickLower: number,\n    tickUpper: number\n  ): Promise<QueryGetPoolPositionResponse> {\n    return this.request.get<QueryGetPoolPositionResponse>(\n      `/metaos-labs/metaos/swap/pools/${address}/positions/${owner}/${tickLower}/${tickUpper}`\n    );\n  }\n\n  public async getPoolSlot0(\n    address: string\n  ): Promise<QueryGetPoolSlot0Response> {\n    return this.request.get<QueryGetPoolSlot0Response>(\n      `/metaos-labs/metaos/swap/pools/${address}/slot0`\n    );\n  }\n\n  public async quoteSwapExactIn(params: QueryQuoteSwapExactInRequest): Promise<QueryQuoteSwapExactInResponse> {\n    return this.request.get<QueryQuoteSwapExactInResponse>(\n      `/metaos-labs/metaos/swap/quote_swap_exact_in`,\n      { ...params }\n    );\n  }\n\n  public async quoteSwapExactOut(params: QueryQuoteSwapExactOutRequest): Promise<QueryQuoteSwapExactOutResponse> {\n    return this.request.get<QueryQuoteSwapExactOutResponse>(\n      `/metaos-labs/metaos/swap/quote_swap_exact_out`,\n      { ...params }\n    );\n  }\n\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {DefaultNodeInfo} from \"../proto/tendermint/p2p/types\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {\n  GetBlockByHeightResponse,\n  GetLatestBlockResponse,\n  GetLatestValidatorSetResponse,\n  GetValidatorSetByHeightResponse\n} from \"../proto/cosmos/base/tendermint/v1beta1/query\";\n\nexport class TendermintAPI extends BaseAPI {\n\n  public async blockInfo(\n    height?: number\n  ): Promise<GetLatestBlockResponse | GetBlockByHeightResponse> {\n    const url =\n      height !== undefined\n        ? `/cosmos/base/tendermint/v1beta1/blocks/${height}`\n        : `/cosmos/base/tendermint/v1beta1/blocks/latest`;\n    return this.request.get<GetLatestBlockResponse | GetBlockByHeightResponse>(\n      url\n    );\n  }\n\n  public async nodeInfo(): Promise<DefaultNodeInfo> {\n    return this.request.get<DefaultNodeInfo>(\n      `/cosmos/base/tendermint/v1beta1/node_info`,\n    );\n  }\n\n  public async syncing(): Promise<boolean> {\n    return this.request.get<boolean>(\n      `/cosmos/base/tendermint/v1beta1/syncing`,\n    );\n  }\n\n  public async validatorSet(\n    height?: number,\n    params?: PaginationOptions\n  ): Promise<GetValidatorSetByHeightResponse | GetLatestValidatorSetResponse> {\n    const url =\n      height !== undefined\n        ? `/cosmos/base/tendermint/v1beta1/validatorsets/${height}`\n        : `/cosmos/base/tendermint/v1beta1/validatorsets/latest`;\n    return this.request.get<GetValidatorSetByHeightResponse | GetLatestValidatorSetResponse>(\n      url,\n      {...params}\n    );\n  }\n\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport {DenomUnit, Metadata} from \"../proto/cosmos/bank/v1beta1/bank\";\nimport {MetadataExt} from \"../proto/token/token\";\nimport {\n  QueryAllMetadataResponse,\n  QueryAllOwnershipConfirmationResponse,\n  QueryGetMetadataResponse, QueryGetOwnershipConfirmationResponse\n} from \"../proto/token/query\";\nimport {PaginationOptions} from \"./APIRequester\";\n\nexport class TokenAPI extends BaseAPI {\n\n  public async allMetadata(\n    params?: PaginationOptions\n  ): Promise<QueryAllMetadataResponse> {\n    return this.request.get<QueryAllMetadataResponse>(\n      `/metaos-labs/metaos/token/metadatas`,\n      { ...params }\n    );\n  }\n\n  public async getMetadata(\n    denom: string\n  ): Promise<QueryGetMetadataResponse> {\n    return this.request.get<QueryGetMetadataResponse>(\n      `/metaos-labs/metaos/token/metadatas/by_denom`,\n      {\n        denom\n      }\n    );\n  }\n\n  public async allOwnershipConfirmation(\n    params?: PaginationOptions\n  ): Promise<QueryAllOwnershipConfirmationResponse> {\n    return this.request.get<QueryAllOwnershipConfirmationResponse>(\n      `/metaos-labs/metaos/token/ownership_confirmations`,\n      { ...params }\n    );\n  }\n\n  public async getOwnershipConfirmation(\n    denom: string\n  ): Promise<QueryGetOwnershipConfirmationResponse> {\n    return this.request.get<QueryGetOwnershipConfirmationResponse>(\n      `/metaos-labs/metaos/token/ownership_confirmations/by_denom`,\n      {\n        denom\n      }\n    );\n  }\n\n}\n","import { BaseAPI } from \"./BaseAPI\";\nimport { TxResponse } from \"../proto/cosmos/base/abci/v1beta1/abci\";\nimport {\n  BroadcastTxRequest,\n  BroadcastTxResponse,\n  GetBlockWithTxsResponse,\n  GetTxsEventRequest,\n  GetTxsEventResponse, SimulateRequest, SimulateResponse,\n} from \"../proto/cosmos/tx/v1beta1/service\";\nimport {PaginationOptions} from \"./APIRequester\";\n\nexport class TxAPI extends BaseAPI {\n\n  public async simulate(params: SimulateRequest): Promise<SimulateResponse> {\n    return this.request.post<SimulateResponse>(\n    `/cosmos/tx/v1beta1/simulate`,\n      params\n    );\n  }\n\n  public async broadcast(tx: BroadcastTxRequest): Promise<BroadcastTxResponse> {\n    return this.request.post<BroadcastTxResponse>(\n      `/cosmos/tx/v1beta1/txs`,\n      tx\n    );\n  }\n\n  public async txBlock(\n    height: number,\n    params?: PaginationOptions\n  ): Promise<GetBlockWithTxsResponse> {\n    return this.request.get<GetBlockWithTxsResponse>(\n      `/cosmos/tx/v1beta1/txs/block/${height}`,\n      { ...params }\n    );\n  }\n\n  public async txInfo(txHash: string): Promise<TxResponse> {\n    return this.request.get<TxResponse>(`/cosmos/tx/v1beta1/txs/${txHash}`);\n  }\n\n  public async search(\n    options: Partial<GetTxsEventRequest>\n  ): Promise<GetTxsEventResponse> {\n    return this.request.get<GetTxsEventResponse>(\n      `cosmos/tx/v1beta1/txs`,\n      { ...options }\n    );\n  }\n\n}\n","import {BaseAPI} from \"./BaseAPI\";\nimport {PaginationOptions} from \"./APIRequester\";\nimport {\n  QueryCodeResponse,\n  QueryCodesResponse,\n  QueryContractInfoResponse,\n  QueryContractsByCodeResponse\n} from \"../proto/cosmwasm/wasm/v1/query\";\n\nexport class WasmAPI extends BaseAPI {\n  public async codes(\n    params?: PaginationOptions\n  ): Promise<QueryCodesResponse> {\n    return this.request.get<QueryCodesResponse>(\n      `/cosmwasm/wasm/v1/code`,\n      { ...params }\n    );\n  }\n\n  public async code(\n    codeID: number\n  ): Promise<QueryCodeResponse> {\n    return this.request.get<QueryCodeResponse>(\n      `/cosmwasm/wasm/v1/code/${codeID}`,\n    );\n  }\n\n  public async contractsByCode(\n    codeID: number,\n    params?: PaginationOptions\n  ): Promise<QueryContractsByCodeResponse> {\n    return this.request.get<QueryContractsByCodeResponse>(\n      `/cosmwasm/wasm/v1/code/${codeID}/contracts`,\n      { ...params }\n    );\n  }\n\n  public async contractInfo(\n    contractAddress: string,\n  ): Promise<QueryContractInfoResponse> {\n    return this.request.get<QueryContractInfoResponse>(\n      `/cosmwasm/wasm/v1/contract/${contractAddress}`,\n    );\n  }\n\n}\n","export enum Chain_Id {\n  Mainnet = 'metaos_99237-1',\n  Testnet = 'metaos_99237-2',\n  Devnet = 'metaos_99237-3'\n}\n\nexport const CHAIN_NAMES = {\n  [Chain_Id.Mainnet]: 'Mainnet',\n  [Chain_Id.Testnet]: 'Testnet',\n  [Chain_Id.Devnet]: 'Devnet',\n}\n\nexport const NETWORK_DETAILS = {\n  [Chain_Id.Mainnet]: {\n    chainId: 'metaos_99237-1',\n    chainName: 'Metaos Mainnet',\n    nativeCurrency: {\n      base: 'umtos',\n      name: 'MetaOS',\n      symbol: 'MTOS',\n      display_exponent: 18,\n      logo_uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2025.png',\n    },\n    nodeUrl: 'https://node.metaos.im',\n    rpcUrl: 'https://tendermint.metaos.im',\n    blockExplorerUrl: 'https://scan.metaos.im',\n  },\n  [Chain_Id.Testnet]: {\n    chainId: 'metaos_99237-2',\n    chainName: 'Metaos Mainnet',\n    nativeCurrency: {\n      base: 'umtos',\n      name: 'MetaOS',\n      symbol: 'MTOS',\n      display_exponent: 18,\n      logo_uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2025.png',\n    },\n    nodeUrl: 'https://node.metaos.im',\n    rpcUrl: 'https://tendermint.metaos.im',\n    blockExplorerUrl: 'https://scan.metaos.im',\n  },\n  [Chain_Id.Devnet]: {\n    chainId: 'metaos_99237-3',\n    chainName: 'Metaos Mainnet',\n    nativeCurrency: {\n      base: 'umtos',\n      name: 'MetaOS',\n      symbol: 'MTOS',\n      display_exponent: 18,\n      logo_uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2025.png',\n    },\n    nodeUrl: 'https://node.metaos.im',\n    rpcUrl: 'https://tendermint.metaos.im',\n    blockExplorerUrl: 'https://scan.metaos.im',\n  },\n}\n","import { DeliverTxResponse } from \"@cosmjs/stargate\";\n\nexport type BroadcastResult = DeliverTxResponse;\n\nexport interface ITransaction {\n  transactionHash: string;\n  description: string;\n  status: Transaction_Status;\n}\n\nexport enum Transaction_Status {\n  Wallet = \"wallet\",\n  Pending = \"pending\",\n  Complete = \"complete\",\n  Success = \"success\",\n  Error = \"error\",\n  Reject = \"reject\",\n}\n\nexport function longToNumber(long: Long): number {\n  if (long.gt(Number.MAX_SAFE_INTEGER)) {\n    throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  return long.toNumber();\n}\n","export * from \"./pool\";\nexport * from \"./token\";\nexport * from \"./wallet\";\n\nexport type DeepPartial<T> = T extends object\n  ? {\n    [P in keyof T]?: DeepPartial<T[P]>;\n  }\n  : T;\n\ntype Pick<T, K extends keyof T> = {\n  [P in K]: T[P];\n};\n\nexport enum Tip_Level {\n  Info = \"info\",\n  Warning = \"warning\",\n  Error = \"error\",\n}\n\nexport enum Direction {\n  In = \"exactIn\",\n  Out = \"exactOut\",\n}\n","export const DEFAULT_USER_PRECISION = 6;\n\nexport const DEFAULT_PRECISION = 18;\n\nexport const MAX_PRECISION = 28;\n\nexport const REG_NUMBER = new RegExp(\n  \"^[1-9]+[0-9]*(\\\\.\\\\d{0,\" + DEFAULT_PRECISION + \"})?$\"\n);\n\nexport const REG_DECIMAL_SIMPLE = /^\\d*(\\.\\d*)?$/;\n\nexport const REG_DECIMAL = new RegExp(\n  \"^0(\\\\.\\\\d{0,\" + DEFAULT_PRECISION + \"})?$\"\n);\n","export const TICK_SPACINGS = {\n  100: 1,\n  500: 10,\n  3000: 60,\n  10000: 200,\n};\n\nexport const BASE_UNIT_TICK = 1.0001;\n","import Decimal from \"decimal.js\";\nimport { Decimal as CosmosDecimal } from \"@cosmjs/math\";\nimport {\n  DEFAULT_PRECISION,\n  DEFAULT_USER_PRECISION,\n  MAX_PRECISION,\n} from \"../constants\";\n\nexport function toDecimalPlaces(\n  value: string | number | Decimal,\n  precision: number = DEFAULT_PRECISION\n) {\n  try {\n    return new Decimal(value)\n      .toDecimalPlaces(precision, Decimal.ROUND_UP)\n      .toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport function toAmountString(\n  value: Decimal.Value | undefined = \"\",\n  precision: number = DEFAULT_USER_PRECISION,\n  roundingMode: Decimal.Rounding = Decimal.ROUND_DOWN\n): string {\n  try {\n    return new Decimal(value)\n      .toSignificantDigits(precision, roundingMode)\n      .toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport function toAmountFloor(\n  value: string | number,\n  precision: number = DEFAULT_USER_PRECISION\n): string {\n  return toAmountString(value, precision, Decimal.ROUND_DOWN);\n}\n\nexport function toAmountCeil(\n  value: string | number,\n  precision: number = DEFAULT_USER_PRECISION\n) {\n  return toAmountString(value, precision, Decimal.ROUND_UP);\n}\n\nexport function toAmountFee(\n  value: string | number,\n  precision: number = DEFAULT_PRECISION\n): string {\n  try {\n    return new Decimal(value)\n      .toDecimalPlaces(precision, Decimal.ROUND_DOWN)\n      .toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport function isEmptyAmount(\n  value: Decimal.Value,\n  precision: number = MAX_PRECISION\n): boolean {\n  const _value = new Decimal(value).mul(Math.pow(10, precision)).floor();\n  return _value.isZero();\n}\n\nexport function toExactAmount(\n  value: string,\n  precision = MAX_PRECISION\n): string {\n  try {\n    return CosmosDecimal.fromUserInput(value, precision).toString();\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n\nexport const formatNumber = (\n  value: Decimal.Value,\n  seperator: number = 3,\n  fixed: number = 2\n) => {\n  return `${new Decimal(value)\n    .div(new Decimal(10).pow(seperator))\n    .toFixed(fixed)}k`;\n};\n","import { Token } from \"../types\";\n\nexport function sortsBefore(baseToken: Token, quoteToken: Token) {\n  return baseToken.base.toLowerCase() < quoteToken.base.toLowerCase();\n}\n","import moment from \"moment\";\n\nmoment.locale(\"en-ca\");\n\nexport function formatMoment(value: string, pattern = \"YYYY/MM/DD HH:mm:ss\") {\n  return moment(+value).format(pattern);\n}\n\nexport function formatUnixMoment(value: string, pattern = \"MM/DD HH:mm:ss\") {\n  return moment(+value * 1000).format(pattern);\n}\n\nexport const formatTime = (time: string) => {\n  return moment(time).format(\"YYYY-MM-DD HH:mm:ss\");\n};\n\nexport const formatDiffTime = (time: string) => {\n  return moment(time).fromNow();\n};\n","import { Token } from \"../types\";\nimport { toDecimalPlaces } from \"../utils\";\nimport Decimal from \"decimal.js\";\n\nexport class LiquidityMath {\n  private static getRightSideLiquidity(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount: string\n  ): Decimal {\n    const numerator = new Decimal(amount);\n    const _value1 = new Decimal(1).div(Decimal.sqrt(leftRangeValue));\n    const _value2 = new Decimal(1).div(Decimal.sqrt(rightRangeValue));\n    const denominator = Decimal.sub(_value1, _value2);\n    return numerator.div(denominator);\n  }\n\n  private static getLeftSideLiquidity(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount: string\n  ): Decimal {\n    const numerator = new Decimal(amount);\n    const denominator = Decimal.sub(\n      Decimal.sqrt(rightRangeValue),\n      Decimal.sqrt(leftRangeValue)\n    );\n    return numerator.div(denominator);\n  }\n\n  public static getLiquidityFromAmount0(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount0: string\n  ): Decimal {\n    const pc = new Decimal(priceValue);\n    if (pc.lessThan(leftRangeValue)) {\n      return this.getRightSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount0\n      );\n    } else if (pc.greaterThan(rightRangeValue)) {\n      return this.getLeftSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount0\n      );\n    }\n    const deltaX = new Decimal(amount0);\n    const _value1 = new Decimal(1).div(Decimal.sqrt(priceValue));\n    const _value2 = new Decimal(1).div(Decimal.sqrt(rightRangeValue));\n    const denominator = Decimal.sub(_value1, _value2);\n    return deltaX.div(denominator);\n  }\n\n  private static _getDiverForDeltaX(\n    lower: Decimal.Value,\n    upper: Decimal.Value\n  ): Decimal {\n    const _value1 = new Decimal(1).div(Decimal.sqrt(lower));\n    const _value2 = new Decimal(1).div(Decimal.sqrt(upper));\n    return Decimal.sub(_value1, _value2);\n  }\n\n  private static _getDiverForDeltaY(\n    lower: Decimal.Value,\n    upper: Decimal.Value\n  ): Decimal {\n    return Decimal.sub(Decimal.sqrt(upper), Decimal.sqrt(lower));\n  }\n\n  public static getLiquidityFromAmount1(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount1: string\n  ): Decimal {\n    const pc = new Decimal(priceValue);\n\n    if (pc.lessThan(leftRangeValue)) {\n      return this.getRightSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount1\n      );\n    } else if (pc.greaterThan(rightRangeValue)) {\n      return this.getLeftSideLiquidity(\n        leftRangeValue,\n        rightRangeValue,\n        priceValue,\n        amount1\n      );\n    }\n\n    const deltaY = new Decimal(amount1);\n    const denominator = Decimal.sub(\n      Decimal.sqrt(priceValue),\n      Decimal.sqrt(leftRangeValue)\n    );\n    return deltaY.div(denominator);\n  }\n\n  public static getAmount1FromAmount0(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount0: string,\n    token0: Token\n  ): string {\n    const liquidity = this.getLiquidityFromAmount0(\n      leftRangeValue,\n      rightRangeValue,\n      priceValue,\n      amount0\n    );\n    // console.log(\"liquidity: \" + liquidity);\n\n    const _value1 = new Decimal(liquidity);\n    const _value2 = this._getDiverForDeltaY(leftRangeValue, priceValue);\n    return _value1.mul(_value2).toString();\n  }\n\n  public static getAmount0FromAmount1(\n    leftRangeValue: number, // pa\n    rightRangeValue: number, // pb\n    priceValue: number,\n    amount1: string,\n    token1: Token\n  ): string {\n    const liquidity = this.getLiquidityFromAmount1(\n      leftRangeValue,\n      rightRangeValue,\n      priceValue,\n      amount1\n    );\n\n    // console.log(\"liquidity: \" + liquidity);\n\n    const _value1 = new Decimal(liquidity);\n    const _value2 = this._getDiverForDeltaX(priceValue, rightRangeValue);\n    return _value1.mul(_value2).toString();\n  }\n\n  public static getAmountByLiquidity(\n    leftRangeValue: Decimal.Value,\n    rightRangeValue: Decimal.Value,\n    priceValue: Decimal.Value,\n    liquidity: string,\n    token0: Token,\n    token1: Token\n  ): { amount0: Decimal.Value; amount1: Decimal.Value } {\n    const pc = new Decimal(priceValue);\n\n    const _value1 = new Decimal(liquidity);\n\n    if (pc.lessThan(leftRangeValue)) {\n      const _value2 = this._getDiverForDeltaX(leftRangeValue, rightRangeValue);\n      return {\n        amount0: _value1.mul(_value2),\n        amount1: \"0\",\n      };\n    } else if (pc.greaterThan(rightRangeValue)) {\n      const _value2 = this._getDiverForDeltaY(leftRangeValue, rightRangeValue);\n      return {\n        amount0: \"0\",\n        amount1: _value1.mul(_value2),\n      };\n    }\n    const deltaXDiver = this._getDiverForDeltaX(priceValue, rightRangeValue);\n    const deltaYDiver = this._getDiverForDeltaY(leftRangeValue, priceValue);\n    return {\n      amount0: _value1.mul(deltaXDiver),\n      amount1: _value1.mul(deltaYDiver)\n    };\n  }\n}\n","import invariant from \"tiny-invariant\";\nimport Decimal from \"decimal.js\";\nimport { Fee_Amount, TICK_SPACINGS, BASE_UNIT_TICK } from \"../constants\";\nimport { Token } from \"../types\";\nimport { sortsBefore, toAmountString } from \"../utils\";\n\nexport class TickMath {\n  public static INVALID_TICK = -99999999;\n\n  public static MIN_TICK = -887272;\n\n  public static MIN_TICK_VALUE = \"0\";\n\n  public static MAX_TICK: number = -TickMath.MIN_TICK;\n\n  public static MAX_TICK_VALUE = \"∞\";\n\n  public static nearestUsableTick = (\n    tick: number,\n    tickSpacing: number\n  ): number => {\n    const rounded = Math.round(tick / tickSpacing) * tickSpacing;\n    if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing;\n    else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing;\n    else return rounded;\n  };\n\n  private static priceToClosestTick(price: string): number {\n    const numerator = Decimal.log2(Decimal.sqrt(price));\n    const denominator = Decimal.log2(Decimal.sqrt(BASE_UNIT_TICK));\n    return numerator.div(denominator).toNumber();\n  }\n\n  /**\n   * Compute nearest tick of price for input\n   * @param feeAmount\n   * @param value\n   */\n  public static getNearestTickByPrice(\n    feeAmount: Fee_Amount,\n    value: string\n  ): number {\n    const _value = value.trim();\n    if (_value === \"\") {\n      return this.INVALID_TICK;\n    }\n    if (value === this.MIN_TICK_VALUE) {\n      return this.MIN_TICK;\n    }\n    if (value === this.MAX_TICK_VALUE) {\n      return this.MAX_TICK;\n    }\n    const tick: number = this.priceToClosestTick(value);\n    // console.log(`[priceToClosestTick]: ` + tick);\n    const result = this.nearestUsableTick(tick, TICK_SPACINGS[feeAmount]);\n    // console.log(`[nearestUsableTick]: ` + result);\n    return result;\n  }\n\n  public static getFormattedPriceByTick(\n    tick: Decimal.Value,\n    fee: Fee_Amount\n  ): string {\n    if (tick === this.INVALID_TICK) {\n      return \"\";\n    }\n    if (this.isLowestTick(tick, fee)) {\n      return this.MIN_TICK_VALUE;\n    }\n    if (this.isHighestTick(tick, fee)) {\n      return this.MAX_TICK_VALUE;\n    }\n    const base = Decimal.pow(Decimal.sqrt(BASE_UNIT_TICK), tick);\n    return Decimal.pow(base, 2).toString();\n  }\n\n  public static getPriceByTick(tick: Decimal.Value): string {\n    if (tick === this.INVALID_TICK) {\n      return \"\";\n    }\n    // if (this.isLowestTick(tick, fee)) {\n    //   return this.MIN_TICK_VALUE;\n    // }\n    // if (this.isHighestTick(tick, fee)) {\n    //   return this.MAX_TICK_VALUE;\n    // }\n    const base = Decimal.pow(Decimal.sqrt(BASE_UNIT_TICK), tick);\n    return Decimal.pow(base, 2).toString();\n  }\n\n  public static getNearestPriceByInput(\n    feeAmount: Fee_Amount,\n    price: string\n  ): string {\n    // console.log('INPUT price: ' + price);\n    const nearestTick = this.getNearestTickByPrice(feeAmount, price);\n    const result = this.getPriceByTick(nearestTick);\n    // console.log('getPriceByTick: ' + result);\n    // console.log('==========');\n    return result;\n  }\n\n  public static getPriceBySqrtPrice(sqrtPrice: string): string {\n    if (!sqrtPrice) {\n      return \"\";\n    }\n    if (sqrtPrice === \"0\") {\n      return \"0\";\n    }\n    return new Decimal(sqrtPrice).pow(2).toString();\n  }\n\n  public static getSqrtPriceByPrice(price: string): string {\n    if (price === \"0\") {\n      return \"0\";\n    }\n    return new Decimal(price).sqrt().toString();\n  }\n\n  public static getBaseTickRange(\n    fromToken: Token,\n    toToken: Token,\n    fee: Fee_Amount,\n    leftRange: string,\n    rightRange: string\n  ): { tickLower: number; tickUpper: number } {\n    let tickLower: number;\n    let tickUpper: number;\n    if (sortsBefore(fromToken, toToken)) {\n      tickLower =\n        leftRange === TickMath.MIN_TICK_VALUE\n          ? TickMath.getNearestLowestTick(fee)\n          : TickMath.getNearestTickByPrice(fee, leftRange);\n      tickUpper =\n        rightRange === TickMath.MAX_TICK_VALUE\n          ? TickMath.getNearestHighestTick(fee)\n          : TickMath.getNearestTickByPrice(fee, rightRange);\n    } else {\n      if (leftRange === TickMath.MIN_TICK_VALUE) {\n        tickUpper = TickMath.getNearestHighestTick(fee);\n      } else {\n        tickUpper = TickMath.getNearestTickByPrice(\n          fee,\n          new Decimal(1).div(leftRange).toString()\n        );\n      }\n      if (rightRange === TickMath.MAX_TICK_VALUE) {\n        tickLower = TickMath.getNearestLowestTick(fee);\n      } else {\n        tickLower = TickMath.getNearestTickByPrice(\n          fee,\n          new Decimal(1).div(rightRange).toString()\n        );\n      }\n    }\n    // console.log(\"tickLower: \" + tickLower);\n    // console.log(\"tickUpper: \" + tickUpper);\n    return {\n      tickLower,\n      tickUpper,\n    };\n  }\n\n  public static getNearestLowestTick(fee: Fee_Amount): number {\n    const tickLower = this.nearestUsableTick(this.MIN_TICK, TICK_SPACINGS[fee]);\n    // console.log('getNearestLowestTick: ' + tickLower);\n    return tickLower;\n  }\n\n  public static getNearestHighestTick(fee: Fee_Amount): number {\n    const tickUpper = this.nearestUsableTick(this.MAX_TICK, TICK_SPACINGS[fee]);\n    // console.log('getNearestHighestTick: ' + tickUpper);\n    return tickUpper;\n  }\n\n  public static getNearestPricesByFullTick(fee: Fee_Amount): {\n    lowestPrice: string;\n    highestPrice: string;\n  } {\n    const tickLower = this.nearestUsableTick(this.MIN_TICK, TICK_SPACINGS[fee]);\n    const tickUpper = this.nearestUsableTick(this.MAX_TICK, TICK_SPACINGS[fee]);\n    const lowestPrice = this.getPriceByTick(tickLower);\n    const highestPrice = this.getPriceByTick(tickUpper);\n    return {\n      lowestPrice,\n      highestPrice,\n    };\n  }\n\n  public static isHighestTick(tick: Decimal.Value, fee: Fee_Amount): boolean {\n    const highestTick = this.getNearestHighestTick(fee);\n    return tick >= highestTick;\n  }\n\n  public static isLowestTick(tick: Decimal.Value, fee: Fee_Amount): boolean {\n    const lowestTick = this.getNearestLowestTick(fee);\n    return tick <= lowestTick;\n  }\n}\n","import { EncodeObject, TxBodyEncodeObject } from \"@cosmjs/proto-signing\";\n\nexport abstract class BaseMsg {\n  constructor() {}\n  public abstract generateMessage(): EncodeObject;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"google.protobuf\";\n\n/**\n * `Any` contains an arbitrary serialized protocol buffer message along with a\n * URL that describes the type of the serialized message.\n *\n * Protobuf library provides support to pack/unpack Any values in the form\n * of utility functions or additional generated methods of the Any type.\n *\n * Example 1: Pack and unpack a message in C++.\n *\n *     Foo foo = ...;\n *     Any any;\n *     any.PackFrom(foo);\n *     ...\n *     if (any.UnpackTo(&foo)) {\n *       ...\n *     }\n *\n * Example 2: Pack and unpack a message in Java.\n *\n *     Foo foo = ...;\n *     Any any = Any.pack(foo);\n *     ...\n *     if (any.is(Foo.class)) {\n *       foo = any.unpack(Foo.class);\n *     }\n *\n *  Example 3: Pack and unpack a message in Python.\n *\n *     foo = Foo(...)\n *     any = Any()\n *     any.Pack(foo)\n *     ...\n *     if any.Is(Foo.DESCRIPTOR):\n *       any.Unpack(foo)\n *       ...\n *\n *  Example 4: Pack and unpack a message in Go\n *\n *      foo := &pb.Foo{...}\n *      any, err := ptypes.MarshalAny(foo)\n *      ...\n *      foo := &pb.Foo{}\n *      if err := ptypes.UnmarshalAny(any, foo); err != nil {\n *        ...\n *      }\n *\n * The pack methods provided by protobuf library will by default use\n * 'type.googleapis.com/full.type.name' as the type URL and the unpack\n * methods only use the fully qualified type name after the last '/'\n * in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n * name \"y.z\".\n *\n *\n * JSON\n * ====\n * The JSON representation of an `Any` value uses the regular\n * representation of the deserialized, embedded message, with an\n * additional field `@type` which contains the type URL. Example:\n *\n *     package google.profile;\n *     message Person {\n *       string first_name = 1;\n *       string last_name = 2;\n *     }\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.profile.Person\",\n *       \"firstName\": <string>,\n *       \"lastName\": <string>\n *     }\n *\n * If the embedded message type is well-known and has a custom JSON\n * representation, that representation will be embedded adding a field\n * `value` which holds the custom JSON in addition to the `@type`\n * field. Example (for message [google.protobuf.Duration][]):\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n *       \"value\": \"1.212s\"\n *     }\n */\nexport interface Any {\n  /**\n   * A URL/resource name that uniquely identifies the type of the serialized\n   * protocol buffer message. This string must contain at least\n   * one \"/\" character. The last segment of the URL's path must represent\n   * the fully qualified name of the type (as in\n   * `path/google.protobuf.Duration`). The name should be in a canonical form\n   * (e.g., leading \".\" is not accepted).\n   *\n   * In practice, teams usually precompile into the binary all types that they\n   * expect it to use in the context of Any. However, for URLs which use the\n   * scheme `http`, `https`, or no scheme, one can optionally set up a type\n   * server that maps type URLs to message definitions as follows:\n   *\n   * * If no scheme is provided, `https` is assumed.\n   * * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   *   value in binary format, or produce an error.\n   * * Applications are allowed to cache lookup results based on the\n   *   URL, or have them precompiled into a binary to avoid any\n   *   lookup. Therefore, binary compatibility needs to be preserved\n   *   on changes to types. (Use versioned type names to manage\n   *   breaking changes.)\n   *\n   * Note: this functionality is not currently available in the official\n   * protobuf release, and it is not used for type URLs beginning with\n   * type.googleapis.com.\n   *\n   * Schemes other than `http`, `https` (or the empty scheme) might be\n   * used with implementation specific semantics.\n   */\n  typeUrl: string;\n  /** Must be a valid serialized protocol buffer of the above specified type. */\n  value: Uint8Array;\n}\n\nfunction createBaseAny(): Any {\n  return { typeUrl: \"\", value: new Uint8Array() };\n}\n\nexport const Any = {\n  encode(message: Any, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.typeUrl !== \"\") {\n      writer.uint32(10).string(message.typeUrl);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Any {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAny();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.typeUrl = reader.string();\n          break;\n        case 2:\n          message.value = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Any {\n    return {\n      typeUrl: isSet(object.typeUrl) ? String(object.typeUrl) : \"\",\n      value: isSet(object.value)\n        ? bytesFromBase64(object.value)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: Any): unknown {\n    const obj: any = {};\n    message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);\n    message.value !== undefined &&\n      (obj.value = base64FromBytes(\n        message.value !== undefined ? message.value : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Any>, I>>(object: I): Any {\n    const message = createBaseAny();\n    message.typeUrl = object.typeUrl ?? \"\";\n    message.value = object.value ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"google.protobuf\";\n\n/**\n * A Timestamp represents a point in time independent of any time zone or local\n * calendar, encoded as a count of seconds and fractions of seconds at\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\n * Gregorian calendar backwards to year one.\n *\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n * second table is needed for interpretation, using a [24-hour linear\n * smear](https://developers.google.com/time/smear).\n *\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n * restricting to that range, we ensure that we can convert to and from [RFC\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n *\n * # Examples\n *\n * Example 1: Compute Timestamp from POSIX `time()`.\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(time(NULL));\n *     timestamp.set_nanos(0);\n *\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n *\n *     struct timeval tv;\n *     gettimeofday(&tv, NULL);\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(tv.tv_sec);\n *     timestamp.set_nanos(tv.tv_usec * 1000);\n *\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n *\n *     FILETIME ft;\n *     GetSystemTimeAsFileTime(&ft);\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n *\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n *     Timestamp timestamp;\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n *\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n *\n *     long millis = System.currentTimeMillis();\n *\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\n *\n *\n * Example 5: Compute Timestamp from Java `Instant.now()`.\n *\n *     Instant now = Instant.now();\n *\n *     Timestamp timestamp =\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n *             .setNanos(now.getNano()).build();\n *\n *\n * Example 6: Compute Timestamp from current time in Python.\n *\n *     timestamp = Timestamp()\n *     timestamp.GetCurrentTime()\n *\n * # JSON Mapping\n *\n * In JSON format, the Timestamp type is encoded as a string in the\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n * where {year} is always expressed using four digits while {month}, {day},\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n * able to accept both UTC and other timezones (as indicated by an offset).\n *\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n * 01:30 UTC on January 15, 2017.\n *\n * In JavaScript, one can convert a Date object to this format using the\n * standard\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n * method. In Python, a standard `datetime.datetime` object can be converted\n * to this format using\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\n * http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D\n * ) to obtain a formatter capable of generating timestamps in this format.\n */\nexport interface Timestamp {\n  /**\n   * Represents seconds of UTC time since Unix epoch\n   * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   * 9999-12-31T23:59:59Z inclusive.\n   */\n  seconds: Long;\n  /**\n   * Non-negative fractions of a second at nanosecond resolution. Negative\n   * second values with fractions must still have non-negative nanos values\n   * that count forward in time. Must be from 0 to 999,999,999\n   * inclusive.\n   */\n  nanos: number;\n}\n\nfunction createBaseTimestamp(): Timestamp {\n  return { seconds: Long.ZERO, nanos: 0 };\n}\n\nexport const Timestamp = {\n  encode(\n    message: Timestamp,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.seconds.isZero()) {\n      writer.uint32(8).int64(message.seconds);\n    }\n    if (message.nanos !== 0) {\n      writer.uint32(16).int32(message.nanos);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Timestamp {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTimestamp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.seconds = reader.int64() as Long;\n          break;\n        case 2:\n          message.nanos = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Timestamp {\n    return {\n      seconds: isSet(object.seconds)\n        ? Long.fromValue(object.seconds)\n        : Long.ZERO,\n      nanos: isSet(object.nanos) ? Number(object.nanos) : 0,\n    };\n  },\n\n  toJSON(message: Timestamp): unknown {\n    const obj: any = {};\n    message.seconds !== undefined &&\n      (obj.seconds = (message.seconds || Long.ZERO).toString());\n    message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Timestamp>, I>>(\n    object: I\n  ): Timestamp {\n    const message = createBaseTimestamp();\n    message.seconds =\n      object.seconds !== undefined && object.seconds !== null\n        ? Long.fromValue(object.seconds)\n        : Long.ZERO;\n    message.nanos = object.nanos ?? 0;\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport { Timestamp } from \"../../../google/protobuf/timestamp\";\n\nexport const protobufPackage = \"cosmos.authz.v1beta1\";\n\n/** Since: cosmos-sdk 0.43 */\n\n/**\n * GenericAuthorization gives the grantee unrestricted permissions to execute\n * the provided method on behalf of the granter's account.\n */\nexport interface GenericAuthorization {\n  /** Msg, identified by it's type URL, to grant unrestricted permissions to execute */\n  msg: string;\n}\n\n/**\n * Grant gives permissions to execute\n * the provide method with expiration time.\n */\nexport interface Grant {\n  authorization?: Any;\n  expiration?: Date;\n}\n\n/**\n * GrantAuthorization extends a grant with both the addresses of the grantee and granter.\n * It is used in genesis.proto and query.proto\n *\n * Since: cosmos-sdk 0.45.2\n */\nexport interface GrantAuthorization {\n  granter: string;\n  grantee: string;\n  authorization?: Any;\n  expiration?: Date;\n}\n\nfunction createBaseGenericAuthorization(): GenericAuthorization {\n  return { msg: \"\" };\n}\n\nexport const GenericAuthorization = {\n  encode(\n    message: GenericAuthorization,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.msg !== \"\") {\n      writer.uint32(10).string(message.msg);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): GenericAuthorization {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseGenericAuthorization();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.msg = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): GenericAuthorization {\n    return {\n      msg: isSet(object.msg) ? String(object.msg) : \"\",\n    };\n  },\n\n  toJSON(message: GenericAuthorization): unknown {\n    const obj: any = {};\n    message.msg !== undefined && (obj.msg = message.msg);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<GenericAuthorization>, I>>(\n    object: I\n  ): GenericAuthorization {\n    const message = createBaseGenericAuthorization();\n    message.msg = object.msg ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseGrant(): Grant {\n  return { authorization: undefined, expiration: undefined };\n}\n\nexport const Grant = {\n  encode(message: Grant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.authorization !== undefined) {\n      Any.encode(message.authorization, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.expiration !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.expiration),\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Grant {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseGrant();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.authorization = Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.expiration = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Grant {\n    return {\n      authorization: isSet(object.authorization)\n        ? Any.fromJSON(object.authorization)\n        : undefined,\n      expiration: isSet(object.expiration)\n        ? fromJsonTimestamp(object.expiration)\n        : undefined,\n    };\n  },\n\n  toJSON(message: Grant): unknown {\n    const obj: any = {};\n    message.authorization !== undefined &&\n      (obj.authorization = message.authorization\n        ? Any.toJSON(message.authorization)\n        : undefined);\n    message.expiration !== undefined &&\n      (obj.expiration = message.expiration.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Grant>, I>>(object: I): Grant {\n    const message = createBaseGrant();\n    message.authorization =\n      object.authorization !== undefined && object.authorization !== null\n        ? Any.fromPartial(object.authorization)\n        : undefined;\n    message.expiration = object.expiration ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseGrantAuthorization(): GrantAuthorization {\n  return {\n    granter: \"\",\n    grantee: \"\",\n    authorization: undefined,\n    expiration: undefined,\n  };\n}\n\nexport const GrantAuthorization = {\n  encode(\n    message: GrantAuthorization,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.granter !== \"\") {\n      writer.uint32(10).string(message.granter);\n    }\n    if (message.grantee !== \"\") {\n      writer.uint32(18).string(message.grantee);\n    }\n    if (message.authorization !== undefined) {\n      Any.encode(message.authorization, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.expiration !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.expiration),\n        writer.uint32(34).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): GrantAuthorization {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseGrantAuthorization();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.granter = reader.string();\n          break;\n        case 2:\n          message.grantee = reader.string();\n          break;\n        case 3:\n          message.authorization = Any.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.expiration = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): GrantAuthorization {\n    return {\n      granter: isSet(object.granter) ? String(object.granter) : \"\",\n      grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n      authorization: isSet(object.authorization)\n        ? Any.fromJSON(object.authorization)\n        : undefined,\n      expiration: isSet(object.expiration)\n        ? fromJsonTimestamp(object.expiration)\n        : undefined,\n    };\n  },\n\n  toJSON(message: GrantAuthorization): unknown {\n    const obj: any = {};\n    message.granter !== undefined && (obj.granter = message.granter);\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    message.authorization !== undefined &&\n      (obj.authorization = message.authorization\n        ? Any.toJSON(message.authorization)\n        : undefined);\n    message.expiration !== undefined &&\n      (obj.expiration = message.expiration.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<GrantAuthorization>, I>>(\n    object: I\n  ): GrantAuthorization {\n    const message = createBaseGrantAuthorization();\n    message.granter = object.granter ?? \"\";\n    message.grantee = object.grantee ?? \"\";\n    message.authorization =\n      object.authorization !== undefined && object.authorization !== null\n        ? Any.fromPartial(object.authorization)\n        : undefined;\n    message.expiration = object.expiration ?? undefined;\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nfunction toTimestamp(date: Date): Timestamp {\n  const seconds = numberToLong(date.getTime() / 1_000);\n  const nanos = (date.getTime() % 1_000) * 1_000_000;\n  return { seconds, nanos };\n}\n\nfunction fromTimestamp(t: Timestamp): Date {\n  let millis = t.seconds.toNumber() * 1_000;\n  millis += t.nanos / 1_000_000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o: any): Date {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction numberToLong(number: number) {\n  return Long.fromNumber(number);\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Grant } from \"./authz\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Any } from \"../../../google/protobuf/any\";\n\nexport const protobufPackage = \"cosmos.authz.v1beta1\";\n\n/** Since: cosmos-sdk 0.43 */\n\n/**\n * MsgGrant is a request type for Grant method. It declares authorization to the grantee\n * on behalf of the granter with the provided expiration time.\n */\nexport interface MsgGrant {\n  granter: string;\n  grantee: string;\n  grant?: Grant;\n}\n\n/** MsgExecResponse defines the Msg/MsgExecResponse response type. */\nexport interface MsgExecResponse {\n  results: Uint8Array[];\n}\n\n/**\n * MsgExec attempts to execute the provided messages using\n * authorizations granted to the grantee. Each message should have only\n * one signer corresponding to the granter of the authorization.\n */\nexport interface MsgExec {\n  grantee: string;\n  /**\n   * Authorization Msg requests to execute. Each msg must implement Authorization interface\n   * The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg))\n   * triple and validate it.\n   */\n  msgs: Any[];\n}\n\n/** MsgGrantResponse defines the Msg/MsgGrant response type. */\nexport interface MsgGrantResponse {}\n\n/**\n * MsgRevoke revokes any authorization with the provided sdk.Msg type on the\n * granter's account with that has been granted to the grantee.\n */\nexport interface MsgRevoke {\n  granter: string;\n  grantee: string;\n  msgTypeUrl: string;\n}\n\n/** MsgRevokeResponse defines the Msg/MsgRevokeResponse response type. */\nexport interface MsgRevokeResponse {}\n\nfunction createBaseMsgGrant(): MsgGrant {\n  return { granter: \"\", grantee: \"\", grant: undefined };\n}\n\nexport const MsgGrant = {\n  encode(\n    message: MsgGrant,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.granter !== \"\") {\n      writer.uint32(10).string(message.granter);\n    }\n    if (message.grantee !== \"\") {\n      writer.uint32(18).string(message.grantee);\n    }\n    if (message.grant !== undefined) {\n      Grant.encode(message.grant, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrant {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGrant();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.granter = reader.string();\n          break;\n        case 2:\n          message.grantee = reader.string();\n          break;\n        case 3:\n          message.grant = Grant.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgGrant {\n    return {\n      granter: isSet(object.granter) ? String(object.granter) : \"\",\n      grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n      grant: isSet(object.grant) ? Grant.fromJSON(object.grant) : undefined,\n    };\n  },\n\n  toJSON(message: MsgGrant): unknown {\n    const obj: any = {};\n    message.granter !== undefined && (obj.granter = message.granter);\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    message.grant !== undefined &&\n      (obj.grant = message.grant ? Grant.toJSON(message.grant) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGrant>, I>>(object: I): MsgGrant {\n    const message = createBaseMsgGrant();\n    message.granter = object.granter ?? \"\";\n    message.grantee = object.grantee ?? \"\";\n    message.grant =\n      object.grant !== undefined && object.grant !== null\n        ? Grant.fromPartial(object.grant)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgExecResponse(): MsgExecResponse {\n  return { results: [] };\n}\n\nexport const MsgExecResponse = {\n  encode(\n    message: MsgExecResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.results) {\n      writer.uint32(10).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgExecResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.results.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgExecResponse {\n    return {\n      results: Array.isArray(object?.results)\n        ? object.results.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgExecResponse): unknown {\n    const obj: any = {};\n    if (message.results) {\n      obj.results = message.results.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.results = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgExecResponse>, I>>(\n    object: I\n  ): MsgExecResponse {\n    const message = createBaseMsgExecResponse();\n    message.results = object.results?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgExec(): MsgExec {\n  return { grantee: \"\", msgs: [] };\n}\n\nexport const MsgExec = {\n  encode(\n    message: MsgExec,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.grantee !== \"\") {\n      writer.uint32(10).string(message.grantee);\n    }\n    for (const v of message.msgs) {\n      Any.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgExec {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgExec();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.grantee = reader.string();\n          break;\n        case 2:\n          message.msgs.push(Any.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgExec {\n    return {\n      grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n      msgs: Array.isArray(object?.msgs)\n        ? object.msgs.map((e: any) => Any.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgExec): unknown {\n    const obj: any = {};\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    if (message.msgs) {\n      obj.msgs = message.msgs.map((e) => (e ? Any.toJSON(e) : undefined));\n    } else {\n      obj.msgs = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgExec>, I>>(object: I): MsgExec {\n    const message = createBaseMsgExec();\n    message.grantee = object.grantee ?? \"\";\n    message.msgs = object.msgs?.map((e) => Any.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgGrantResponse(): MsgGrantResponse {\n  return {};\n}\n\nexport const MsgGrantResponse = {\n  encode(\n    _: MsgGrantResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrantResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGrantResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgGrantResponse {\n    return {};\n  },\n\n  toJSON(_: MsgGrantResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGrantResponse>, I>>(\n    _: I\n  ): MsgGrantResponse {\n    const message = createBaseMsgGrantResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgRevoke(): MsgRevoke {\n  return { granter: \"\", grantee: \"\", msgTypeUrl: \"\" };\n}\n\nexport const MsgRevoke = {\n  encode(\n    message: MsgRevoke,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.granter !== \"\") {\n      writer.uint32(10).string(message.granter);\n    }\n    if (message.grantee !== \"\") {\n      writer.uint32(18).string(message.grantee);\n    }\n    if (message.msgTypeUrl !== \"\") {\n      writer.uint32(26).string(message.msgTypeUrl);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevoke {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgRevoke();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.granter = reader.string();\n          break;\n        case 2:\n          message.grantee = reader.string();\n          break;\n        case 3:\n          message.msgTypeUrl = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgRevoke {\n    return {\n      granter: isSet(object.granter) ? String(object.granter) : \"\",\n      grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n      msgTypeUrl: isSet(object.msgTypeUrl) ? String(object.msgTypeUrl) : \"\",\n    };\n  },\n\n  toJSON(message: MsgRevoke): unknown {\n    const obj: any = {};\n    message.granter !== undefined && (obj.granter = message.granter);\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    message.msgTypeUrl !== undefined && (obj.msgTypeUrl = message.msgTypeUrl);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgRevoke>, I>>(\n    object: I\n  ): MsgRevoke {\n    const message = createBaseMsgRevoke();\n    message.granter = object.granter ?? \"\";\n    message.grantee = object.grantee ?? \"\";\n    message.msgTypeUrl = object.msgTypeUrl ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgRevokeResponse(): MsgRevokeResponse {\n  return {};\n}\n\nexport const MsgRevokeResponse = {\n  encode(\n    _: MsgRevokeResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevokeResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgRevokeResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgRevokeResponse {\n    return {};\n  },\n\n  toJSON(_: MsgRevokeResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgRevokeResponse>, I>>(\n    _: I\n  ): MsgRevokeResponse {\n    const message = createBaseMsgRevokeResponse();\n    return message;\n  },\n};\n\n/** Msg defines the authz Msg service. */\nexport interface Msg {\n  /**\n   * Grant grants the provided authorization to the grantee on the granter's\n   * account with the provided expiration time. If there is already a grant\n   * for the given (granter, grantee, Authorization) triple, then the grant\n   * will be overwritten.\n   */\n  Grant(\n    request: DeepPartial<MsgGrant>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGrantResponse>;\n  /**\n   * Exec attempts to execute the provided messages using\n   * authorizations granted to the grantee. Each message should have only\n   * one signer corresponding to the granter of the authorization.\n   */\n  Exec(\n    request: DeepPartial<MsgExec>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgExecResponse>;\n  /**\n   * Revoke revokes any authorization corresponding to the provided method name on the\n   * granter's account that has been granted to the grantee.\n   */\n  Revoke(\n    request: DeepPartial<MsgRevoke>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgRevokeResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.Grant = this.Grant.bind(this);\n    this.Exec = this.Exec.bind(this);\n    this.Revoke = this.Revoke.bind(this);\n  }\n\n  Grant(\n    request: DeepPartial<MsgGrant>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGrantResponse> {\n    return this.rpc.unary(\n      MsgGrantDesc,\n      MsgGrant.fromPartial(request),\n      metadata\n    );\n  }\n\n  Exec(\n    request: DeepPartial<MsgExec>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgExecResponse> {\n    return this.rpc.unary(MsgExecDesc, MsgExec.fromPartial(request), metadata);\n  }\n\n  Revoke(\n    request: DeepPartial<MsgRevoke>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgRevokeResponse> {\n    return this.rpc.unary(\n      MsgRevokeDesc,\n      MsgRevoke.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.authz.v1beta1.Msg\",\n};\n\nexport const MsgGrantDesc: UnaryMethodDefinitionish = {\n  methodName: \"Grant\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgGrant.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgGrantResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgExecDesc: UnaryMethodDefinitionish = {\n  methodName: \"Exec\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgExec.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgExecResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgRevokeDesc: UnaryMethodDefinitionish = {\n  methodName: \"Revoke\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgRevoke.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgRevokeResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"../BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgGrant as MsgGrant_pb,\n  MsgExec as MsgExec_pb,\n  MsgRevoke as MsgRevoke_pb,\n} from \"../../proto/cosmos/authz/v1beta1/tx\";\n\nexport class MsgGrant extends BaseMsg {\n  public protoMsg: MsgGrant_pb;\n  constructor(msg: MsgGrant_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgGrant.typeUrl,\n      value: MsgGrant_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgGrant {\n  export const typeUrl: string = `/${protobufPackage}.MsgGrant`;\n  export const Proto = MsgGrant_pb;\n  export interface Proto extends MsgGrant_pb {}\n}\n\nexport class MsgExec extends BaseMsg {\n  public protoMsg: MsgExec_pb;\n  constructor(msg: MsgExec_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgExec.typeUrl,\n      value: MsgExec_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgExec {\n  export const typeUrl: string = `/${protobufPackage}.MsgExec`;\n  export const Proto = MsgExec_pb;\n  export interface Proto extends MsgExec_pb {}\n}\n\nexport class MsgRevoke extends BaseMsg {\n  public protoMsg: MsgRevoke_pb;\n  constructor(msg: MsgRevoke_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgExec.typeUrl,\n      value: MsgRevoke_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgRevoke {\n  export const typeUrl: string = `/${protobufPackage}.MsgRevoke`;\n  export const Proto = MsgRevoke_pb;\n  export interface Proto extends MsgRevoke_pb {}\n}\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"cosmos.base.v1beta1\";\n\n/**\n * Coin defines a token with a denomination and an amount.\n *\n * NOTE: The amount field is an Int which implements the custom method\n * signatures required by gogoproto.\n */\nexport interface Coin {\n  denom: string;\n  amount: string;\n}\n\n/**\n * DecCoin defines a token with a denomination and a decimal amount.\n *\n * NOTE: The amount field is an Dec which implements the custom method\n * signatures required by gogoproto.\n */\nexport interface DecCoin {\n  denom: string;\n  amount: string;\n}\n\n/** IntProto defines a Protobuf wrapper around an Int object. */\nexport interface IntProto {\n  int: string;\n}\n\n/** DecProto defines a Protobuf wrapper around a Dec object. */\nexport interface DecProto {\n  dec: string;\n}\n\nfunction createBaseCoin(): Coin {\n  return { denom: \"\", amount: \"\" };\n}\n\nexport const Coin = {\n  encode(message: Coin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Coin {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCoin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Coin {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: Coin): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Coin>, I>>(object: I): Coin {\n    const message = createBaseCoin();\n    message.denom = object.denom ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDecCoin(): DecCoin {\n  return { denom: \"\", amount: \"\" };\n}\n\nexport const DecCoin = {\n  encode(\n    message: DecCoin,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DecCoin {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDecCoin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DecCoin {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: DecCoin): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DecCoin>, I>>(object: I): DecCoin {\n    const message = createBaseDecCoin();\n    message.denom = object.denom ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseIntProto(): IntProto {\n  return { int: \"\" };\n}\n\nexport const IntProto = {\n  encode(\n    message: IntProto,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.int !== \"\") {\n      writer.uint32(10).string(message.int);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): IntProto {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseIntProto();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.int = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): IntProto {\n    return {\n      int: isSet(object.int) ? String(object.int) : \"\",\n    };\n  },\n\n  toJSON(message: IntProto): unknown {\n    const obj: any = {};\n    message.int !== undefined && (obj.int = message.int);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<IntProto>, I>>(object: I): IntProto {\n    const message = createBaseIntProto();\n    message.int = object.int ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDecProto(): DecProto {\n  return { dec: \"\" };\n}\n\nexport const DecProto = {\n  encode(\n    message: DecProto,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.dec !== \"\") {\n      writer.uint32(10).string(message.dec);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DecProto {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDecProto();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.dec = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DecProto {\n    return {\n      dec: isSet(object.dec) ? String(object.dec) : \"\",\n    };\n  },\n\n  toJSON(message: DecProto): unknown {\n    const obj: any = {};\n    message.dec !== undefined && (obj.dec = message.dec);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DecProto>, I>>(object: I): DecProto {\n    const message = createBaseDecProto();\n    message.dec = object.dec ?? \"\";\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Coin } from \"../../base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmos.bank.v1beta1\";\n\n/** Params defines the parameters for the bank module. */\nexport interface Params {\n  sendEnabled: SendEnabled[];\n  defaultSendEnabled: boolean;\n}\n\n/**\n * SendEnabled maps coin denom to a send_enabled status (whether a denom is\n * sendable).\n */\nexport interface SendEnabled {\n  denom: string;\n  enabled: boolean;\n}\n\n/** Input models transaction input. */\nexport interface Input {\n  address: string;\n  coins: Coin[];\n}\n\n/** Output models transaction outputs. */\nexport interface Output {\n  address: string;\n  coins: Coin[];\n}\n\n/**\n * Supply represents a struct that passively keeps track of the total supply\n * amounts in the network.\n * This message is deprecated now that supply is indexed by denom.\n *\n * @deprecated\n */\nexport interface Supply {\n  total: Coin[];\n}\n\n/**\n * DenomUnit represents a struct that describes a given\n * denomination unit of the basic token.\n */\nexport interface DenomUnit {\n  /** denom represents the string name of the given denom unit (e.g uatom). */\n  denom: string;\n  /**\n   * exponent represents power of 10 exponent that one must\n   * raise the base_denom to in order to equal the given DenomUnit's denom\n   * 1 denom = 1^exponent base_denom\n   * (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with\n   * exponent = 6, thus: 1 atom = 10^6 uatom).\n   */\n  exponent: number;\n  /** aliases is a list of string aliases for the given denom */\n  aliases: string[];\n}\n\n/**\n * Metadata represents a struct that describes\n * a basic token.\n */\nexport interface Metadata {\n  description: string;\n  /** denom_units represents the list of DenomUnit's for a given coin */\n  denomUnits: DenomUnit[];\n  /** base represents the base denom (should be the DenomUnit with exponent = 0). */\n  base: string;\n  /**\n   * display indicates the suggested denom that should be\n   * displayed in clients.\n   */\n  display: string;\n  /**\n   * name defines the name of the token (eg: Cosmos Atom)\n   *\n   * Since: cosmos-sdk 0.43\n   */\n  name: string;\n  /**\n   * symbol is the token symbol usually shown on exchanges (eg: ATOM). This can\n   * be the same as the display.\n   *\n   * Since: cosmos-sdk 0.43\n   */\n  symbol: string;\n}\n\nfunction createBaseParams(): Params {\n  return { sendEnabled: [], defaultSendEnabled: false };\n}\n\nexport const Params = {\n  encode(\n    message: Params,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.sendEnabled) {\n      SendEnabled.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.defaultSendEnabled === true) {\n      writer.uint32(16).bool(message.defaultSendEnabled);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Params {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sendEnabled.push(SendEnabled.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.defaultSendEnabled = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Params {\n    return {\n      sendEnabled: Array.isArray(object?.sendEnabled)\n        ? object.sendEnabled.map((e: any) => SendEnabled.fromJSON(e))\n        : [],\n      defaultSendEnabled: isSet(object.defaultSendEnabled)\n        ? Boolean(object.defaultSendEnabled)\n        : false,\n    };\n  },\n\n  toJSON(message: Params): unknown {\n    const obj: any = {};\n    if (message.sendEnabled) {\n      obj.sendEnabled = message.sendEnabled.map((e) =>\n        e ? SendEnabled.toJSON(e) : undefined\n      );\n    } else {\n      obj.sendEnabled = [];\n    }\n    message.defaultSendEnabled !== undefined &&\n      (obj.defaultSendEnabled = message.defaultSendEnabled);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {\n    const message = createBaseParams();\n    message.sendEnabled =\n      object.sendEnabled?.map((e) => SendEnabled.fromPartial(e)) || [];\n    message.defaultSendEnabled = object.defaultSendEnabled ?? false;\n    return message;\n  },\n};\n\nfunction createBaseSendEnabled(): SendEnabled {\n  return { denom: \"\", enabled: false };\n}\n\nexport const SendEnabled = {\n  encode(\n    message: SendEnabled,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (message.enabled === true) {\n      writer.uint32(16).bool(message.enabled);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SendEnabled {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSendEnabled();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.enabled = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SendEnabled {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n    };\n  },\n\n  toJSON(message: SendEnabled): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.enabled !== undefined && (obj.enabled = message.enabled);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SendEnabled>, I>>(\n    object: I\n  ): SendEnabled {\n    const message = createBaseSendEnabled();\n    message.denom = object.denom ?? \"\";\n    message.enabled = object.enabled ?? false;\n    return message;\n  },\n};\n\nfunction createBaseInput(): Input {\n  return { address: \"\", coins: [] };\n}\n\nexport const Input = {\n  encode(message: Input, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    for (const v of message.coins) {\n      Coin.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Input {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseInput();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          message.coins.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Input {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      coins: Array.isArray(object?.coins)\n        ? object.coins.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Input): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    if (message.coins) {\n      obj.coins = message.coins.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.coins = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Input>, I>>(object: I): Input {\n    const message = createBaseInput();\n    message.address = object.address ?? \"\";\n    message.coins = object.coins?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseOutput(): Output {\n  return { address: \"\", coins: [] };\n}\n\nexport const Output = {\n  encode(\n    message: Output,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    for (const v of message.coins) {\n      Coin.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Output {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseOutput();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          message.coins.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Output {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      coins: Array.isArray(object?.coins)\n        ? object.coins.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Output): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    if (message.coins) {\n      obj.coins = message.coins.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.coins = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Output>, I>>(object: I): Output {\n    const message = createBaseOutput();\n    message.address = object.address ?? \"\";\n    message.coins = object.coins?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseSupply(): Supply {\n  return { total: [] };\n}\n\nexport const Supply = {\n  encode(\n    message: Supply,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.total) {\n      Coin.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Supply {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSupply();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.total.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Supply {\n    return {\n      total: Array.isArray(object?.total)\n        ? object.total.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Supply): unknown {\n    const obj: any = {};\n    if (message.total) {\n      obj.total = message.total.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.total = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Supply>, I>>(object: I): Supply {\n    const message = createBaseSupply();\n    message.total = object.total?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseDenomUnit(): DenomUnit {\n  return { denom: \"\", exponent: 0, aliases: [] };\n}\n\nexport const DenomUnit = {\n  encode(\n    message: DenomUnit,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (message.exponent !== 0) {\n      writer.uint32(16).uint32(message.exponent);\n    }\n    for (const v of message.aliases) {\n      writer.uint32(26).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DenomUnit {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDenomUnit();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.exponent = reader.uint32();\n          break;\n        case 3:\n          message.aliases.push(reader.string());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DenomUnit {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      exponent: isSet(object.exponent) ? Number(object.exponent) : 0,\n      aliases: Array.isArray(object?.aliases)\n        ? object.aliases.map((e: any) => String(e))\n        : [],\n    };\n  },\n\n  toJSON(message: DenomUnit): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.exponent !== undefined &&\n      (obj.exponent = Math.round(message.exponent));\n    if (message.aliases) {\n      obj.aliases = message.aliases.map((e) => e);\n    } else {\n      obj.aliases = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DenomUnit>, I>>(\n    object: I\n  ): DenomUnit {\n    const message = createBaseDenomUnit();\n    message.denom = object.denom ?? \"\";\n    message.exponent = object.exponent ?? 0;\n    message.aliases = object.aliases?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseMetadata(): Metadata {\n  return {\n    description: \"\",\n    denomUnits: [],\n    base: \"\",\n    display: \"\",\n    name: \"\",\n    symbol: \"\",\n  };\n}\n\nexport const Metadata = {\n  encode(\n    message: Metadata,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.description !== \"\") {\n      writer.uint32(10).string(message.description);\n    }\n    for (const v of message.denomUnits) {\n      DenomUnit.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.base !== \"\") {\n      writer.uint32(26).string(message.base);\n    }\n    if (message.display !== \"\") {\n      writer.uint32(34).string(message.display);\n    }\n    if (message.name !== \"\") {\n      writer.uint32(42).string(message.name);\n    }\n    if (message.symbol !== \"\") {\n      writer.uint32(50).string(message.symbol);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Metadata {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMetadata();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.description = reader.string();\n          break;\n        case 2:\n          message.denomUnits.push(DenomUnit.decode(reader, reader.uint32()));\n          break;\n        case 3:\n          message.base = reader.string();\n          break;\n        case 4:\n          message.display = reader.string();\n          break;\n        case 5:\n          message.name = reader.string();\n          break;\n        case 6:\n          message.symbol = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Metadata {\n    return {\n      description: isSet(object.description) ? String(object.description) : \"\",\n      denomUnits: Array.isArray(object?.denomUnits)\n        ? object.denomUnits.map((e: any) => DenomUnit.fromJSON(e))\n        : [],\n      base: isSet(object.base) ? String(object.base) : \"\",\n      display: isSet(object.display) ? String(object.display) : \"\",\n      name: isSet(object.name) ? String(object.name) : \"\",\n      symbol: isSet(object.symbol) ? String(object.symbol) : \"\",\n    };\n  },\n\n  toJSON(message: Metadata): unknown {\n    const obj: any = {};\n    message.description !== undefined &&\n      (obj.description = message.description);\n    if (message.denomUnits) {\n      obj.denomUnits = message.denomUnits.map((e) =>\n        e ? DenomUnit.toJSON(e) : undefined\n      );\n    } else {\n      obj.denomUnits = [];\n    }\n    message.base !== undefined && (obj.base = message.base);\n    message.display !== undefined && (obj.display = message.display);\n    message.name !== undefined && (obj.name = message.name);\n    message.symbol !== undefined && (obj.symbol = message.symbol);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {\n    const message = createBaseMetadata();\n    message.description = object.description ?? \"\";\n    message.denomUnits =\n      object.denomUnits?.map((e) => DenomUnit.fromPartial(e)) || [];\n    message.base = object.base ?? \"\";\n    message.display = object.display ?? \"\";\n    message.name = object.name ?? \"\";\n    message.symbol = object.symbol ?? \"\";\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Coin } from \"../../base/v1beta1/coin\";\nimport { Input, Output } from \"./bank\";\n\nexport const protobufPackage = \"cosmos.bank.v1beta1\";\n\n/** MsgSend represents a message to send coins from one account to another. */\nexport interface MsgSend {\n  fromAddress: string;\n  toAddress: string;\n  amount: Coin[];\n}\n\n/** MsgSendResponse defines the Msg/Send response type. */\nexport interface MsgSendResponse {}\n\n/** MsgMultiSend represents an arbitrary multi-in, multi-out send message. */\nexport interface MsgMultiSend {\n  inputs: Input[];\n  outputs: Output[];\n}\n\n/** MsgMultiSendResponse defines the Msg/MultiSend response type. */\nexport interface MsgMultiSendResponse {}\n\nfunction createBaseMsgSend(): MsgSend {\n  return { fromAddress: \"\", toAddress: \"\", amount: [] };\n}\n\nexport const MsgSend = {\n  encode(\n    message: MsgSend,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.fromAddress !== \"\") {\n      writer.uint32(10).string(message.fromAddress);\n    }\n    if (message.toAddress !== \"\") {\n      writer.uint32(18).string(message.toAddress);\n    }\n    for (const v of message.amount) {\n      Coin.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSend {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSend();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.fromAddress = reader.string();\n          break;\n        case 2:\n          message.toAddress = reader.string();\n          break;\n        case 3:\n          message.amount.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSend {\n    return {\n      fromAddress: isSet(object.fromAddress) ? String(object.fromAddress) : \"\",\n      toAddress: isSet(object.toAddress) ? String(object.toAddress) : \"\",\n      amount: Array.isArray(object?.amount)\n        ? object.amount.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgSend): unknown {\n    const obj: any = {};\n    message.fromAddress !== undefined &&\n      (obj.fromAddress = message.fromAddress);\n    message.toAddress !== undefined && (obj.toAddress = message.toAddress);\n    if (message.amount) {\n      obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.amount = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSend>, I>>(object: I): MsgSend {\n    const message = createBaseMsgSend();\n    message.fromAddress = object.fromAddress ?? \"\";\n    message.toAddress = object.toAddress ?? \"\";\n    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgSendResponse(): MsgSendResponse {\n  return {};\n}\n\nexport const MsgSendResponse = {\n  encode(\n    _: MsgSendResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSendResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSendResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSendResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSendResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSendResponse>, I>>(\n    _: I\n  ): MsgSendResponse {\n    const message = createBaseMsgSendResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgMultiSend(): MsgMultiSend {\n  return { inputs: [], outputs: [] };\n}\n\nexport const MsgMultiSend = {\n  encode(\n    message: MsgMultiSend,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.inputs) {\n      Input.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.outputs) {\n      Output.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMultiSend {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgMultiSend();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.inputs.push(Input.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.outputs.push(Output.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgMultiSend {\n    return {\n      inputs: Array.isArray(object?.inputs)\n        ? object.inputs.map((e: any) => Input.fromJSON(e))\n        : [],\n      outputs: Array.isArray(object?.outputs)\n        ? object.outputs.map((e: any) => Output.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgMultiSend): unknown {\n    const obj: any = {};\n    if (message.inputs) {\n      obj.inputs = message.inputs.map((e) => (e ? Input.toJSON(e) : undefined));\n    } else {\n      obj.inputs = [];\n    }\n    if (message.outputs) {\n      obj.outputs = message.outputs.map((e) =>\n        e ? Output.toJSON(e) : undefined\n      );\n    } else {\n      obj.outputs = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgMultiSend>, I>>(\n    object: I\n  ): MsgMultiSend {\n    const message = createBaseMsgMultiSend();\n    message.inputs = object.inputs?.map((e) => Input.fromPartial(e)) || [];\n    message.outputs = object.outputs?.map((e) => Output.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgMultiSendResponse(): MsgMultiSendResponse {\n  return {};\n}\n\nexport const MsgMultiSendResponse = {\n  encode(\n    _: MsgMultiSendResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgMultiSendResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgMultiSendResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgMultiSendResponse {\n    return {};\n  },\n\n  toJSON(_: MsgMultiSendResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgMultiSendResponse>, I>>(\n    _: I\n  ): MsgMultiSendResponse {\n    const message = createBaseMsgMultiSendResponse();\n    return message;\n  },\n};\n\n/** Msg defines the bank Msg service. */\nexport interface Msg {\n  /** Send defines a method for sending coins from one account to another account. */\n  Send(\n    request: DeepPartial<MsgSend>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSendResponse>;\n  /** MultiSend defines a method for sending coins from some accounts to other accounts. */\n  MultiSend(\n    request: DeepPartial<MsgMultiSend>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgMultiSendResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.Send = this.Send.bind(this);\n    this.MultiSend = this.MultiSend.bind(this);\n  }\n\n  Send(\n    request: DeepPartial<MsgSend>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSendResponse> {\n    return this.rpc.unary(MsgSendDesc, MsgSend.fromPartial(request), metadata);\n  }\n\n  MultiSend(\n    request: DeepPartial<MsgMultiSend>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgMultiSendResponse> {\n    return this.rpc.unary(\n      MsgMultiSendDesc,\n      MsgMultiSend.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.bank.v1beta1.Msg\",\n};\n\nexport const MsgSendDesc: UnaryMethodDefinitionish = {\n  methodName: \"Send\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSend.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSendResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgMultiSendDesc: UnaryMethodDefinitionish = {\n  methodName: \"MultiSend\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgMultiSend.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgMultiSendResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"../BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgSend as MsgSend_pb,\n  MsgMultiSend as MsgMultiSend_pb,\n} from \"../../proto/cosmos/bank/v1beta1/tx\";\n\nexport class MsgSend extends BaseMsg {\n  public protoMsg: MsgSend_pb;\n  constructor(msg: MsgSend_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSend.typeUrl,\n      value: MsgSend_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSend {\n  export const typeUrl: string = `/${protobufPackage}.MsgSend`;\n  export const Proto = MsgSend_pb;\n  export interface Proto extends MsgSend_pb {}\n}\n\nexport class MsgMultiSend extends BaseMsg {\n  public protoMsg: MsgMultiSend_pb;\n  constructor(msg: MsgMultiSend_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgMultiSend.typeUrl,\n      value: MsgMultiSend_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgMultiSend {\n  export const typeUrl: string = `/${protobufPackage}.MsgMultiSend`;\n  export const Proto = MsgMultiSend_pb;\n  export interface Proto extends MsgMultiSend_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"cosmos.crisis.v1beta1\";\n\n/** MsgVerifyInvariant represents a message to verify a particular invariance. */\nexport interface MsgVerifyInvariant {\n  sender: string;\n  invariantModuleName: string;\n  invariantRoute: string;\n}\n\n/** MsgVerifyInvariantResponse defines the Msg/VerifyInvariant response type. */\nexport interface MsgVerifyInvariantResponse {}\n\nfunction createBaseMsgVerifyInvariant(): MsgVerifyInvariant {\n  return { sender: \"\", invariantModuleName: \"\", invariantRoute: \"\" };\n}\n\nexport const MsgVerifyInvariant = {\n  encode(\n    message: MsgVerifyInvariant,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n    if (message.invariantModuleName !== \"\") {\n      writer.uint32(18).string(message.invariantModuleName);\n    }\n    if (message.invariantRoute !== \"\") {\n      writer.uint32(26).string(message.invariantRoute);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgVerifyInvariant {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgVerifyInvariant();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n        case 2:\n          message.invariantModuleName = reader.string();\n          break;\n        case 3:\n          message.invariantRoute = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgVerifyInvariant {\n    return {\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      invariantModuleName: isSet(object.invariantModuleName)\n        ? String(object.invariantModuleName)\n        : \"\",\n      invariantRoute: isSet(object.invariantRoute)\n        ? String(object.invariantRoute)\n        : \"\",\n    };\n  },\n\n  toJSON(message: MsgVerifyInvariant): unknown {\n    const obj: any = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.invariantModuleName !== undefined &&\n      (obj.invariantModuleName = message.invariantModuleName);\n    message.invariantRoute !== undefined &&\n      (obj.invariantRoute = message.invariantRoute);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgVerifyInvariant>, I>>(\n    object: I\n  ): MsgVerifyInvariant {\n    const message = createBaseMsgVerifyInvariant();\n    message.sender = object.sender ?? \"\";\n    message.invariantModuleName = object.invariantModuleName ?? \"\";\n    message.invariantRoute = object.invariantRoute ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgVerifyInvariantResponse(): MsgVerifyInvariantResponse {\n  return {};\n}\n\nexport const MsgVerifyInvariantResponse = {\n  encode(\n    _: MsgVerifyInvariantResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgVerifyInvariantResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgVerifyInvariantResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgVerifyInvariantResponse {\n    return {};\n  },\n\n  toJSON(_: MsgVerifyInvariantResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgVerifyInvariantResponse>, I>>(\n    _: I\n  ): MsgVerifyInvariantResponse {\n    const message = createBaseMsgVerifyInvariantResponse();\n    return message;\n  },\n};\n\n/** Msg defines the bank Msg service. */\nexport interface Msg {\n  /** VerifyInvariant defines a method to verify a particular invariance. */\n  VerifyInvariant(\n    request: DeepPartial<MsgVerifyInvariant>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgVerifyInvariantResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.VerifyInvariant = this.VerifyInvariant.bind(this);\n  }\n\n  VerifyInvariant(\n    request: DeepPartial<MsgVerifyInvariant>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgVerifyInvariantResponse> {\n    return this.rpc.unary(\n      MsgVerifyInvariantDesc,\n      MsgVerifyInvariant.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.crisis.v1beta1.Msg\",\n};\n\nexport const MsgVerifyInvariantDesc: UnaryMethodDefinitionish = {\n  methodName: \"VerifyInvariant\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgVerifyInvariant.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgVerifyInvariantResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"../BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgVerifyInvariant as MsgVerifyInvariant_pb,\n} from \"../../proto/cosmos/crisis/v1beta1/tx\";\n\nexport class MsgVerifyInvariant extends BaseMsg {\n  public protoMsg: MsgVerifyInvariant_pb;\n  constructor(msg: MsgVerifyInvariant_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgVerifyInvariant.typeUrl,\n      value: MsgVerifyInvariant_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgVerifyInvariant {\n  export const typeUrl: string = `/${protobufPackage}.MsgVerifyInvariant`;\n  export const Proto = MsgVerifyInvariant_pb;\n  export interface Proto extends MsgVerifyInvariant_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Coin } from \"../../base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmos.distribution.v1beta1\";\n\n/**\n * MsgSetWithdrawAddress sets the withdraw address for\n * a delegator (or validator self-delegation).\n */\nexport interface MsgSetWithdrawAddress {\n  delegatorAddress: string;\n  withdrawAddress: string;\n}\n\n/** MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response type. */\nexport interface MsgSetWithdrawAddressResponse {}\n\n/**\n * MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator\n * from a single validator.\n */\nexport interface MsgWithdrawDelegatorReward {\n  delegatorAddress: string;\n  validatorAddress: string;\n}\n\n/** MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward response type. */\nexport interface MsgWithdrawDelegatorRewardResponse {}\n\n/**\n * MsgWithdrawValidatorCommission withdraws the full commission to the validator\n * address.\n */\nexport interface MsgWithdrawValidatorCommission {\n  validatorAddress: string;\n}\n\n/** MsgWithdrawValidatorCommissionResponse defines the Msg/WithdrawValidatorCommission response type. */\nexport interface MsgWithdrawValidatorCommissionResponse {}\n\n/**\n * MsgFundCommunityPool allows an account to directly\n * fund the community pool.\n */\nexport interface MsgFundCommunityPool {\n  amount: Coin[];\n  depositor: string;\n}\n\n/** MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type. */\nexport interface MsgFundCommunityPoolResponse {}\n\nfunction createBaseMsgSetWithdrawAddress(): MsgSetWithdrawAddress {\n  return { delegatorAddress: \"\", withdrawAddress: \"\" };\n}\n\nexport const MsgSetWithdrawAddress = {\n  encode(\n    message: MsgSetWithdrawAddress,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.withdrawAddress !== \"\") {\n      writer.uint32(18).string(message.withdrawAddress);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSetWithdrawAddress {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSetWithdrawAddress();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.withdrawAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSetWithdrawAddress {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      withdrawAddress: isSet(object.withdrawAddress)\n        ? String(object.withdrawAddress)\n        : \"\",\n    };\n  },\n\n  toJSON(message: MsgSetWithdrawAddress): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.withdrawAddress !== undefined &&\n      (obj.withdrawAddress = message.withdrawAddress);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSetWithdrawAddress>, I>>(\n    object: I\n  ): MsgSetWithdrawAddress {\n    const message = createBaseMsgSetWithdrawAddress();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.withdrawAddress = object.withdrawAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgSetWithdrawAddressResponse(): MsgSetWithdrawAddressResponse {\n  return {};\n}\n\nexport const MsgSetWithdrawAddressResponse = {\n  encode(\n    _: MsgSetWithdrawAddressResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSetWithdrawAddressResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSetWithdrawAddressResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSetWithdrawAddressResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSetWithdrawAddressResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSetWithdrawAddressResponse>, I>>(\n    _: I\n  ): MsgSetWithdrawAddressResponse {\n    const message = createBaseMsgSetWithdrawAddressResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgWithdrawDelegatorReward(): MsgWithdrawDelegatorReward {\n  return { delegatorAddress: \"\", validatorAddress: \"\" };\n}\n\nexport const MsgWithdrawDelegatorReward = {\n  encode(\n    message: MsgWithdrawDelegatorReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgWithdrawDelegatorReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgWithdrawDelegatorReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgWithdrawDelegatorReward {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n    };\n  },\n\n  toJSON(message: MsgWithdrawDelegatorReward): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgWithdrawDelegatorReward>, I>>(\n    object: I\n  ): MsgWithdrawDelegatorReward {\n    const message = createBaseMsgWithdrawDelegatorReward();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgWithdrawDelegatorRewardResponse(): MsgWithdrawDelegatorRewardResponse {\n  return {};\n}\n\nexport const MsgWithdrawDelegatorRewardResponse = {\n  encode(\n    _: MsgWithdrawDelegatorRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgWithdrawDelegatorRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgWithdrawDelegatorRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgWithdrawDelegatorRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgWithdrawDelegatorRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<MsgWithdrawDelegatorRewardResponse>, I>\n  >(_: I): MsgWithdrawDelegatorRewardResponse {\n    const message = createBaseMsgWithdrawDelegatorRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgWithdrawValidatorCommission(): MsgWithdrawValidatorCommission {\n  return { validatorAddress: \"\" };\n}\n\nexport const MsgWithdrawValidatorCommission = {\n  encode(\n    message: MsgWithdrawValidatorCommission,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(10).string(message.validatorAddress);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgWithdrawValidatorCommission {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgWithdrawValidatorCommission();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgWithdrawValidatorCommission {\n    return {\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n    };\n  },\n\n  toJSON(message: MsgWithdrawValidatorCommission): unknown {\n    const obj: any = {};\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgWithdrawValidatorCommission>, I>>(\n    object: I\n  ): MsgWithdrawValidatorCommission {\n    const message = createBaseMsgWithdrawValidatorCommission();\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgWithdrawValidatorCommissionResponse(): MsgWithdrawValidatorCommissionResponse {\n  return {};\n}\n\nexport const MsgWithdrawValidatorCommissionResponse = {\n  encode(\n    _: MsgWithdrawValidatorCommissionResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgWithdrawValidatorCommissionResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgWithdrawValidatorCommissionResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgWithdrawValidatorCommissionResponse {\n    return {};\n  },\n\n  toJSON(_: MsgWithdrawValidatorCommissionResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<MsgWithdrawValidatorCommissionResponse>, I>\n  >(_: I): MsgWithdrawValidatorCommissionResponse {\n    const message = createBaseMsgWithdrawValidatorCommissionResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgFundCommunityPool(): MsgFundCommunityPool {\n  return { amount: [], depositor: \"\" };\n}\n\nexport const MsgFundCommunityPool = {\n  encode(\n    message: MsgFundCommunityPool,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.amount) {\n      Coin.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.depositor !== \"\") {\n      writer.uint32(18).string(message.depositor);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgFundCommunityPool {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgFundCommunityPool();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.amount.push(Coin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.depositor = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgFundCommunityPool {\n    return {\n      amount: Array.isArray(object?.amount)\n        ? object.amount.map((e: any) => Coin.fromJSON(e))\n        : [],\n      depositor: isSet(object.depositor) ? String(object.depositor) : \"\",\n    };\n  },\n\n  toJSON(message: MsgFundCommunityPool): unknown {\n    const obj: any = {};\n    if (message.amount) {\n      obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.amount = [];\n    }\n    message.depositor !== undefined && (obj.depositor = message.depositor);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgFundCommunityPool>, I>>(\n    object: I\n  ): MsgFundCommunityPool {\n    const message = createBaseMsgFundCommunityPool();\n    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];\n    message.depositor = object.depositor ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgFundCommunityPoolResponse(): MsgFundCommunityPoolResponse {\n  return {};\n}\n\nexport const MsgFundCommunityPoolResponse = {\n  encode(\n    _: MsgFundCommunityPoolResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgFundCommunityPoolResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgFundCommunityPoolResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgFundCommunityPoolResponse {\n    return {};\n  },\n\n  toJSON(_: MsgFundCommunityPoolResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgFundCommunityPoolResponse>, I>>(\n    _: I\n  ): MsgFundCommunityPoolResponse {\n    const message = createBaseMsgFundCommunityPoolResponse();\n    return message;\n  },\n};\n\n/** Msg defines the distribution Msg service. */\nexport interface Msg {\n  /**\n   * SetWithdrawAddress defines a method to change the withdraw address\n   * for a delegator (or validator self-delegation).\n   */\n  SetWithdrawAddress(\n    request: DeepPartial<MsgSetWithdrawAddress>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSetWithdrawAddressResponse>;\n  /**\n   * WithdrawDelegatorReward defines a method to withdraw rewards of delegator\n   * from a single validator.\n   */\n  WithdrawDelegatorReward(\n    request: DeepPartial<MsgWithdrawDelegatorReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgWithdrawDelegatorRewardResponse>;\n  /**\n   * WithdrawValidatorCommission defines a method to withdraw the\n   * full commission to the validator address.\n   */\n  WithdrawValidatorCommission(\n    request: DeepPartial<MsgWithdrawValidatorCommission>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgWithdrawValidatorCommissionResponse>;\n  /**\n   * FundCommunityPool defines a method to allow an account to directly\n   * fund the community pool.\n   */\n  FundCommunityPool(\n    request: DeepPartial<MsgFundCommunityPool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgFundCommunityPoolResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.SetWithdrawAddress = this.SetWithdrawAddress.bind(this);\n    this.WithdrawDelegatorReward = this.WithdrawDelegatorReward.bind(this);\n    this.WithdrawValidatorCommission =\n      this.WithdrawValidatorCommission.bind(this);\n    this.FundCommunityPool = this.FundCommunityPool.bind(this);\n  }\n\n  SetWithdrawAddress(\n    request: DeepPartial<MsgSetWithdrawAddress>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSetWithdrawAddressResponse> {\n    return this.rpc.unary(\n      MsgSetWithdrawAddressDesc,\n      MsgSetWithdrawAddress.fromPartial(request),\n      metadata\n    );\n  }\n\n  WithdrawDelegatorReward(\n    request: DeepPartial<MsgWithdrawDelegatorReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgWithdrawDelegatorRewardResponse> {\n    return this.rpc.unary(\n      MsgWithdrawDelegatorRewardDesc,\n      MsgWithdrawDelegatorReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  WithdrawValidatorCommission(\n    request: DeepPartial<MsgWithdrawValidatorCommission>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgWithdrawValidatorCommissionResponse> {\n    return this.rpc.unary(\n      MsgWithdrawValidatorCommissionDesc,\n      MsgWithdrawValidatorCommission.fromPartial(request),\n      metadata\n    );\n  }\n\n  FundCommunityPool(\n    request: DeepPartial<MsgFundCommunityPool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgFundCommunityPoolResponse> {\n    return this.rpc.unary(\n      MsgFundCommunityPoolDesc,\n      MsgFundCommunityPool.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.distribution.v1beta1.Msg\",\n};\n\nexport const MsgSetWithdrawAddressDesc: UnaryMethodDefinitionish = {\n  methodName: \"SetWithdrawAddress\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSetWithdrawAddress.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSetWithdrawAddressResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgWithdrawDelegatorRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"WithdrawDelegatorReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgWithdrawDelegatorReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgWithdrawDelegatorRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgWithdrawValidatorCommissionDesc: UnaryMethodDefinitionish = {\n  methodName: \"WithdrawValidatorCommission\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgWithdrawValidatorCommission.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgWithdrawValidatorCommissionResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgFundCommunityPoolDesc: UnaryMethodDefinitionish = {\n  methodName: \"FundCommunityPool\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgFundCommunityPool.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgFundCommunityPoolResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"../BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgFundCommunityPool as MsgFundCommunityPool_pb,\n  MsgSetWithdrawAddress as MsgSetWithdrawAddress_pb,\n  MsgWithdrawDelegatorReward as MsgWithdrawDelegatorReward_pb,\n  MsgWithdrawValidatorCommission as MsgWithdrawValidatorCommission_pb\n} from \"../../proto/cosmos/distribution/v1beta1/tx\";\n\nexport class MsgFundCommunityPool extends BaseMsg {\n  public protoMsg: MsgFundCommunityPool_pb;\n  constructor(msg: MsgFundCommunityPool_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgFundCommunityPool.typeUrl,\n      value: MsgFundCommunityPool_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgFundCommunityPool {\n  export const typeUrl: string = `/${protobufPackage}.MsgFundCommunityPool`;\n  export const Proto = MsgFundCommunityPool_pb;\n  export interface Proto extends MsgFundCommunityPool_pb {}\n}\n\nexport class MsgSetWithdrawAddress extends BaseMsg {\n  public protoMsg: MsgSetWithdrawAddress_pb;\n  constructor(msg: MsgSetWithdrawAddress_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSetWithdrawAddress.typeUrl,\n      value: MsgSetWithdrawAddress_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSetWithdrawAddress {\n  export const typeUrl: string = `/${protobufPackage}.MsgSetWithdrawAddress`;\n  export const Proto = MsgSetWithdrawAddress_pb;\n  export interface Proto extends MsgSetWithdrawAddress_pb {}\n}\n\nexport class MsgWithdrawDelegatorReward extends BaseMsg {\n  public protoMsg: MsgWithdrawDelegatorReward_pb;\n  constructor(msg: MsgWithdrawDelegatorReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgWithdrawDelegatorReward.typeUrl,\n      value: MsgWithdrawDelegatorReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgWithdrawDelegatorReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgWithdrawDelegatorReward`;\n  export const Proto = MsgWithdrawDelegatorReward_pb;\n  export interface Proto extends MsgWithdrawDelegatorReward_pb {}\n}\n\nexport class MsgWithdrawValidatorCommission extends BaseMsg {\n  public protoMsg: MsgWithdrawValidatorCommission_pb;\n  constructor(msg: MsgWithdrawValidatorCommission_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgWithdrawValidatorCommission.typeUrl,\n      value: MsgWithdrawValidatorCommission_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgWithdrawValidatorCommission {\n  export const typeUrl: string = `/${protobufPackage}.MsgWithdrawValidatorCommission`;\n  export const Proto = MsgWithdrawValidatorCommission_pb;\n  export interface Proto extends MsgWithdrawValidatorCommission_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"cosmos.evidence.v1beta1\";\n\n/**\n * MsgSubmitEvidence represents a message that supports submitting arbitrary\n * Evidence of misbehavior such as equivocation or counterfactual signing.\n */\nexport interface MsgSubmitEvidence {\n  submitter: string;\n  evidence?: Any;\n}\n\n/** MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type. */\nexport interface MsgSubmitEvidenceResponse {\n  /** hash defines the hash of the evidence. */\n  hash: Uint8Array;\n}\n\nfunction createBaseMsgSubmitEvidence(): MsgSubmitEvidence {\n  return { submitter: \"\", evidence: undefined };\n}\n\nexport const MsgSubmitEvidence = {\n  encode(\n    message: MsgSubmitEvidence,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.submitter !== \"\") {\n      writer.uint32(10).string(message.submitter);\n    }\n    if (message.evidence !== undefined) {\n      Any.encode(message.evidence, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitEvidence {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSubmitEvidence();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.submitter = reader.string();\n          break;\n        case 2:\n          message.evidence = Any.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSubmitEvidence {\n    return {\n      submitter: isSet(object.submitter) ? String(object.submitter) : \"\",\n      evidence: isSet(object.evidence)\n        ? Any.fromJSON(object.evidence)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgSubmitEvidence): unknown {\n    const obj: any = {};\n    message.submitter !== undefined && (obj.submitter = message.submitter);\n    message.evidence !== undefined &&\n      (obj.evidence = message.evidence\n        ? Any.toJSON(message.evidence)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSubmitEvidence>, I>>(\n    object: I\n  ): MsgSubmitEvidence {\n    const message = createBaseMsgSubmitEvidence();\n    message.submitter = object.submitter ?? \"\";\n    message.evidence =\n      object.evidence !== undefined && object.evidence !== null\n        ? Any.fromPartial(object.evidence)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgSubmitEvidenceResponse(): MsgSubmitEvidenceResponse {\n  return { hash: new Uint8Array() };\n}\n\nexport const MsgSubmitEvidenceResponse = {\n  encode(\n    message: MsgSubmitEvidenceResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.hash.length !== 0) {\n      writer.uint32(34).bytes(message.hash);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSubmitEvidenceResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSubmitEvidenceResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 4:\n          message.hash = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSubmitEvidenceResponse {\n    return {\n      hash: isSet(object.hash)\n        ? bytesFromBase64(object.hash)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: MsgSubmitEvidenceResponse): unknown {\n    const obj: any = {};\n    message.hash !== undefined &&\n      (obj.hash = base64FromBytes(\n        message.hash !== undefined ? message.hash : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSubmitEvidenceResponse>, I>>(\n    object: I\n  ): MsgSubmitEvidenceResponse {\n    const message = createBaseMsgSubmitEvidenceResponse();\n    message.hash = object.hash ?? new Uint8Array();\n    return message;\n  },\n};\n\n/** Msg defines the evidence Msg service. */\nexport interface Msg {\n  /**\n   * SubmitEvidence submits an arbitrary Evidence of misbehavior such as equivocation or\n   * counterfactual signing.\n   */\n  SubmitEvidence(\n    request: DeepPartial<MsgSubmitEvidence>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSubmitEvidenceResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.SubmitEvidence = this.SubmitEvidence.bind(this);\n  }\n\n  SubmitEvidence(\n    request: DeepPartial<MsgSubmitEvidence>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSubmitEvidenceResponse> {\n    return this.rpc.unary(\n      MsgSubmitEvidenceDesc,\n      MsgSubmitEvidence.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.evidence.v1beta1.Msg\",\n};\n\nexport const MsgSubmitEvidenceDesc: UnaryMethodDefinitionish = {\n  methodName: \"SubmitEvidence\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSubmitEvidence.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSubmitEvidenceResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"../BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgSubmitEvidence as MsgSubmitEvidence_pb,\n} from \"../../proto/cosmos/evidence/v1beta1/tx\";\n\nexport class MsgSubmitEvidence extends BaseMsg {\n  public protoMsg: MsgSubmitEvidence_pb;\n  constructor(msg: MsgSubmitEvidence_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSubmitEvidence.typeUrl,\n      value: MsgSubmitEvidence_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSubmitEvidence {\n  export const typeUrl: string = `/${protobufPackage}.MsgSubmitEvidence`;\n  export const Proto = MsgSubmitEvidence_pb;\n  export interface Proto extends MsgSubmitEvidence_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"cosmos.feegrant.v1beta1\";\n\n/** Since: cosmos-sdk 0.43 */\n\n/**\n * MsgGrantAllowance adds permission for Grantee to spend up to Allowance\n * of fees from the account of Granter.\n */\nexport interface MsgGrantAllowance {\n  /** granter is the address of the user granting an allowance of their funds. */\n  granter: string;\n  /** grantee is the address of the user being granted an allowance of another user's funds. */\n  grantee: string;\n  /** allowance can be any of basic and filtered fee allowance. */\n  allowance?: Any;\n}\n\n/** MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type. */\nexport interface MsgGrantAllowanceResponse {}\n\n/** MsgRevokeAllowance removes any existing Allowance from Granter to Grantee. */\nexport interface MsgRevokeAllowance {\n  /** granter is the address of the user granting an allowance of their funds. */\n  granter: string;\n  /** grantee is the address of the user being granted an allowance of another user's funds. */\n  grantee: string;\n}\n\n/** MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type. */\nexport interface MsgRevokeAllowanceResponse {}\n\nfunction createBaseMsgGrantAllowance(): MsgGrantAllowance {\n  return { granter: \"\", grantee: \"\", allowance: undefined };\n}\n\nexport const MsgGrantAllowance = {\n  encode(\n    message: MsgGrantAllowance,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.granter !== \"\") {\n      writer.uint32(10).string(message.granter);\n    }\n    if (message.grantee !== \"\") {\n      writer.uint32(18).string(message.grantee);\n    }\n    if (message.allowance !== undefined) {\n      Any.encode(message.allowance, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrantAllowance {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGrantAllowance();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.granter = reader.string();\n          break;\n        case 2:\n          message.grantee = reader.string();\n          break;\n        case 3:\n          message.allowance = Any.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgGrantAllowance {\n    return {\n      granter: isSet(object.granter) ? String(object.granter) : \"\",\n      grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n      allowance: isSet(object.allowance)\n        ? Any.fromJSON(object.allowance)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgGrantAllowance): unknown {\n    const obj: any = {};\n    message.granter !== undefined && (obj.granter = message.granter);\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    message.allowance !== undefined &&\n      (obj.allowance = message.allowance\n        ? Any.toJSON(message.allowance)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGrantAllowance>, I>>(\n    object: I\n  ): MsgGrantAllowance {\n    const message = createBaseMsgGrantAllowance();\n    message.granter = object.granter ?? \"\";\n    message.grantee = object.grantee ?? \"\";\n    message.allowance =\n      object.allowance !== undefined && object.allowance !== null\n        ? Any.fromPartial(object.allowance)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgGrantAllowanceResponse(): MsgGrantAllowanceResponse {\n  return {};\n}\n\nexport const MsgGrantAllowanceResponse = {\n  encode(\n    _: MsgGrantAllowanceResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgGrantAllowanceResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGrantAllowanceResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgGrantAllowanceResponse {\n    return {};\n  },\n\n  toJSON(_: MsgGrantAllowanceResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGrantAllowanceResponse>, I>>(\n    _: I\n  ): MsgGrantAllowanceResponse {\n    const message = createBaseMsgGrantAllowanceResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgRevokeAllowance(): MsgRevokeAllowance {\n  return { granter: \"\", grantee: \"\" };\n}\n\nexport const MsgRevokeAllowance = {\n  encode(\n    message: MsgRevokeAllowance,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.granter !== \"\") {\n      writer.uint32(10).string(message.granter);\n    }\n    if (message.grantee !== \"\") {\n      writer.uint32(18).string(message.grantee);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevokeAllowance {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgRevokeAllowance();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.granter = reader.string();\n          break;\n        case 2:\n          message.grantee = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgRevokeAllowance {\n    return {\n      granter: isSet(object.granter) ? String(object.granter) : \"\",\n      grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n    };\n  },\n\n  toJSON(message: MsgRevokeAllowance): unknown {\n    const obj: any = {};\n    message.granter !== undefined && (obj.granter = message.granter);\n    message.grantee !== undefined && (obj.grantee = message.grantee);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgRevokeAllowance>, I>>(\n    object: I\n  ): MsgRevokeAllowance {\n    const message = createBaseMsgRevokeAllowance();\n    message.granter = object.granter ?? \"\";\n    message.grantee = object.grantee ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgRevokeAllowanceResponse(): MsgRevokeAllowanceResponse {\n  return {};\n}\n\nexport const MsgRevokeAllowanceResponse = {\n  encode(\n    _: MsgRevokeAllowanceResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgRevokeAllowanceResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgRevokeAllowanceResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgRevokeAllowanceResponse {\n    return {};\n  },\n\n  toJSON(_: MsgRevokeAllowanceResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgRevokeAllowanceResponse>, I>>(\n    _: I\n  ): MsgRevokeAllowanceResponse {\n    const message = createBaseMsgRevokeAllowanceResponse();\n    return message;\n  },\n};\n\n/** Msg defines the feegrant msg service. */\nexport interface Msg {\n  /**\n   * GrantAllowance grants fee allowance to the grantee on the granter's\n   * account with the provided expiration time.\n   */\n  GrantAllowance(\n    request: DeepPartial<MsgGrantAllowance>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGrantAllowanceResponse>;\n  /**\n   * RevokeAllowance revokes any fee allowance of granter's account that\n   * has been granted to the grantee.\n   */\n  RevokeAllowance(\n    request: DeepPartial<MsgRevokeAllowance>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgRevokeAllowanceResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.GrantAllowance = this.GrantAllowance.bind(this);\n    this.RevokeAllowance = this.RevokeAllowance.bind(this);\n  }\n\n  GrantAllowance(\n    request: DeepPartial<MsgGrantAllowance>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGrantAllowanceResponse> {\n    return this.rpc.unary(\n      MsgGrantAllowanceDesc,\n      MsgGrantAllowance.fromPartial(request),\n      metadata\n    );\n  }\n\n  RevokeAllowance(\n    request: DeepPartial<MsgRevokeAllowance>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgRevokeAllowanceResponse> {\n    return this.rpc.unary(\n      MsgRevokeAllowanceDesc,\n      MsgRevokeAllowance.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.feegrant.v1beta1.Msg\",\n};\n\nexport const MsgGrantAllowanceDesc: UnaryMethodDefinitionish = {\n  methodName: \"GrantAllowance\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgGrantAllowance.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgGrantAllowanceResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgRevokeAllowanceDesc: UnaryMethodDefinitionish = {\n  methodName: \"RevokeAllowance\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgRevokeAllowance.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgRevokeAllowanceResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"../BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgGrantAllowance as MsgGrantAllowance_pb,\n  MsgRevokeAllowance as MsgRevokeAllowance_pb\n} from \"../../proto/cosmos/feegrant/v1beta1/tx\";\n\nexport class MsgGrantAllowance extends BaseMsg {\n  public protoMsg: MsgGrantAllowance_pb;\n  constructor(msg: MsgGrantAllowance_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgGrantAllowance.typeUrl,\n      value: MsgGrantAllowance_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgGrantAllowance {\n  export const typeUrl: string = `/${protobufPackage}.MsgGrantAllowance`;\n  export const Proto = MsgGrantAllowance_pb;\n  export interface Proto extends MsgGrantAllowance_pb {}\n}\n\nexport class MsgRevokeAllowance extends BaseMsg {\n  public protoMsg: MsgRevokeAllowance_pb;\n  constructor(msg: MsgRevokeAllowance_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgRevokeAllowance.typeUrl,\n      value: MsgRevokeAllowance_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgRevokeAllowance {\n  export const typeUrl: string = `/${protobufPackage}.MsgRevokeAllowance`;\n  export const Proto = MsgRevokeAllowance_pb;\n  export interface Proto extends MsgRevokeAllowance_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"google.protobuf\";\n\n/**\n * A Duration represents a signed, fixed-length span of time represented\n * as a count of seconds and fractions of seconds at nanosecond\n * resolution. It is independent of any calendar and concepts like \"day\"\n * or \"month\". It is related to Timestamp in that the difference between\n * two Timestamp values is a Duration and it can be added or subtracted\n * from a Timestamp. Range is approximately +-10,000 years.\n *\n * # Examples\n *\n * Example 1: Compute Duration from two Timestamps in pseudo code.\n *\n *     Timestamp start = ...;\n *     Timestamp end = ...;\n *     Duration duration = ...;\n *\n *     duration.seconds = end.seconds - start.seconds;\n *     duration.nanos = end.nanos - start.nanos;\n *\n *     if (duration.seconds < 0 && duration.nanos > 0) {\n *       duration.seconds += 1;\n *       duration.nanos -= 1000000000;\n *     } else if (duration.seconds > 0 && duration.nanos < 0) {\n *       duration.seconds -= 1;\n *       duration.nanos += 1000000000;\n *     }\n *\n * Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n *\n *     Timestamp start = ...;\n *     Duration duration = ...;\n *     Timestamp end = ...;\n *\n *     end.seconds = start.seconds + duration.seconds;\n *     end.nanos = start.nanos + duration.nanos;\n *\n *     if (end.nanos < 0) {\n *       end.seconds -= 1;\n *       end.nanos += 1000000000;\n *     } else if (end.nanos >= 1000000000) {\n *       end.seconds += 1;\n *       end.nanos -= 1000000000;\n *     }\n *\n * Example 3: Compute Duration from datetime.timedelta in Python.\n *\n *     td = datetime.timedelta(days=3, minutes=10)\n *     duration = Duration()\n *     duration.FromTimedelta(td)\n *\n * # JSON Mapping\n *\n * In JSON format, the Duration type is encoded as a string rather than an\n * object, where the string ends in the suffix \"s\" (indicating seconds) and\n * is preceded by the number of seconds, with nanoseconds expressed as\n * fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n * encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n * be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n * microsecond should be expressed in JSON format as \"3.000001s\".\n */\nexport interface Duration {\n  /**\n   * Signed seconds of the span of time. Must be from -315,576,000,000\n   * to +315,576,000,000 inclusive. Note: these bounds are computed from:\n   * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n   */\n  seconds: Long;\n  /**\n   * Signed fractions of a second at nanosecond resolution of the span\n   * of time. Durations less than one second are represented with a 0\n   * `seconds` field and a positive or negative `nanos` field. For durations\n   * of one second or more, a non-zero value for the `nanos` field must be\n   * of the same sign as the `seconds` field. Must be from -999,999,999\n   * to +999,999,999 inclusive.\n   */\n  nanos: number;\n}\n\nfunction createBaseDuration(): Duration {\n  return { seconds: Long.ZERO, nanos: 0 };\n}\n\nexport const Duration = {\n  encode(\n    message: Duration,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.seconds.isZero()) {\n      writer.uint32(8).int64(message.seconds);\n    }\n    if (message.nanos !== 0) {\n      writer.uint32(16).int32(message.nanos);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Duration {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDuration();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.seconds = reader.int64() as Long;\n          break;\n        case 2:\n          message.nanos = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Duration {\n    return {\n      seconds: isSet(object.seconds)\n        ? Long.fromValue(object.seconds)\n        : Long.ZERO,\n      nanos: isSet(object.nanos) ? Number(object.nanos) : 0,\n    };\n  },\n\n  toJSON(message: Duration): unknown {\n    const obj: any = {};\n    message.seconds !== undefined &&\n      (obj.seconds = (message.seconds || Long.ZERO).toString());\n    message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Duration>, I>>(object: I): Duration {\n    const message = createBaseDuration();\n    message.seconds =\n      object.seconds !== undefined && object.seconds !== null\n        ? Long.fromValue(object.seconds)\n        : Long.ZERO;\n    message.nanos = object.nanos ?? 0;\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport { Duration } from \"../../../google/protobuf/duration\";\nimport { Timestamp } from \"../../../google/protobuf/timestamp\";\nimport { Coin } from \"../../base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmos.gov.v1beta1\";\n\n/** VoteOption enumerates the valid vote options for a given governance proposal. */\nexport enum VoteOption {\n  /** VOTE_OPTION_UNSPECIFIED - VOTE_OPTION_UNSPECIFIED defines a no-op vote option. */\n  VOTE_OPTION_UNSPECIFIED = 0,\n  /** VOTE_OPTION_YES - VOTE_OPTION_YES defines a yes vote option. */\n  VOTE_OPTION_YES = 1,\n  /** VOTE_OPTION_ABSTAIN - VOTE_OPTION_ABSTAIN defines an abstain vote option. */\n  VOTE_OPTION_ABSTAIN = 2,\n  /** VOTE_OPTION_NO - VOTE_OPTION_NO defines a no vote option. */\n  VOTE_OPTION_NO = 3,\n  /** VOTE_OPTION_NO_WITH_VETO - VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option. */\n  VOTE_OPTION_NO_WITH_VETO = 4,\n  UNRECOGNIZED = -1,\n}\n\nexport function voteOptionFromJSON(object: any): VoteOption {\n  switch (object) {\n    case 0:\n    case \"VOTE_OPTION_UNSPECIFIED\":\n      return VoteOption.VOTE_OPTION_UNSPECIFIED;\n    case 1:\n    case \"VOTE_OPTION_YES\":\n      return VoteOption.VOTE_OPTION_YES;\n    case 2:\n    case \"VOTE_OPTION_ABSTAIN\":\n      return VoteOption.VOTE_OPTION_ABSTAIN;\n    case 3:\n    case \"VOTE_OPTION_NO\":\n      return VoteOption.VOTE_OPTION_NO;\n    case 4:\n    case \"VOTE_OPTION_NO_WITH_VETO\":\n      return VoteOption.VOTE_OPTION_NO_WITH_VETO;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return VoteOption.UNRECOGNIZED;\n  }\n}\n\nexport function voteOptionToJSON(object: VoteOption): string {\n  switch (object) {\n    case VoteOption.VOTE_OPTION_UNSPECIFIED:\n      return \"VOTE_OPTION_UNSPECIFIED\";\n    case VoteOption.VOTE_OPTION_YES:\n      return \"VOTE_OPTION_YES\";\n    case VoteOption.VOTE_OPTION_ABSTAIN:\n      return \"VOTE_OPTION_ABSTAIN\";\n    case VoteOption.VOTE_OPTION_NO:\n      return \"VOTE_OPTION_NO\";\n    case VoteOption.VOTE_OPTION_NO_WITH_VETO:\n      return \"VOTE_OPTION_NO_WITH_VETO\";\n    case VoteOption.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/** ProposalStatus enumerates the valid statuses of a proposal. */\nexport enum ProposalStatus {\n  /** PROPOSAL_STATUS_UNSPECIFIED - PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status. */\n  PROPOSAL_STATUS_UNSPECIFIED = 0,\n  /**\n   * PROPOSAL_STATUS_DEPOSIT_PERIOD - PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\n   * period.\n   */\n  PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,\n  /**\n   * PROPOSAL_STATUS_VOTING_PERIOD - PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\n   * period.\n   */\n  PROPOSAL_STATUS_VOTING_PERIOD = 2,\n  /**\n   * PROPOSAL_STATUS_PASSED - PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\n   * passed.\n   */\n  PROPOSAL_STATUS_PASSED = 3,\n  /**\n   * PROPOSAL_STATUS_REJECTED - PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\n   * been rejected.\n   */\n  PROPOSAL_STATUS_REJECTED = 4,\n  /**\n   * PROPOSAL_STATUS_FAILED - PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\n   * failed.\n   */\n  PROPOSAL_STATUS_FAILED = 5,\n  UNRECOGNIZED = -1,\n}\n\nexport function proposalStatusFromJSON(object: any): ProposalStatus {\n  switch (object) {\n    case 0:\n    case \"PROPOSAL_STATUS_UNSPECIFIED\":\n      return ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED;\n    case 1:\n    case \"PROPOSAL_STATUS_DEPOSIT_PERIOD\":\n      return ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD;\n    case 2:\n    case \"PROPOSAL_STATUS_VOTING_PERIOD\":\n      return ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD;\n    case 3:\n    case \"PROPOSAL_STATUS_PASSED\":\n      return ProposalStatus.PROPOSAL_STATUS_PASSED;\n    case 4:\n    case \"PROPOSAL_STATUS_REJECTED\":\n      return ProposalStatus.PROPOSAL_STATUS_REJECTED;\n    case 5:\n    case \"PROPOSAL_STATUS_FAILED\":\n      return ProposalStatus.PROPOSAL_STATUS_FAILED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return ProposalStatus.UNRECOGNIZED;\n  }\n}\n\nexport function proposalStatusToJSON(object: ProposalStatus): string {\n  switch (object) {\n    case ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED:\n      return \"PROPOSAL_STATUS_UNSPECIFIED\";\n    case ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD:\n      return \"PROPOSAL_STATUS_DEPOSIT_PERIOD\";\n    case ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD:\n      return \"PROPOSAL_STATUS_VOTING_PERIOD\";\n    case ProposalStatus.PROPOSAL_STATUS_PASSED:\n      return \"PROPOSAL_STATUS_PASSED\";\n    case ProposalStatus.PROPOSAL_STATUS_REJECTED:\n      return \"PROPOSAL_STATUS_REJECTED\";\n    case ProposalStatus.PROPOSAL_STATUS_FAILED:\n      return \"PROPOSAL_STATUS_FAILED\";\n    case ProposalStatus.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/**\n * WeightedVoteOption defines a unit of vote for vote split.\n *\n * Since: cosmos-sdk 0.43\n */\nexport interface WeightedVoteOption {\n  option: VoteOption;\n  weight: string;\n}\n\n/**\n * TextProposal defines a standard text proposal whose changes need to be\n * manually updated in case of approval.\n */\nexport interface TextProposal {\n  title: string;\n  description: string;\n}\n\n/**\n * Deposit defines an amount deposited by an account address to an active\n * proposal.\n */\nexport interface Deposit {\n  proposalId: Long;\n  depositor: string;\n  amount: Coin[];\n}\n\n/** Proposal defines the core field members of a governance proposal. */\nexport interface Proposal {\n  proposalId: Long;\n  content?: Any;\n  status: ProposalStatus;\n  finalTallyResult?: TallyResult;\n  submitTime?: Date;\n  depositEndTime?: Date;\n  totalDeposit: Coin[];\n  votingStartTime?: Date;\n  votingEndTime?: Date;\n}\n\n/** TallyResult defines a standard tally for a governance proposal. */\nexport interface TallyResult {\n  yes: string;\n  abstain: string;\n  no: string;\n  noWithVeto: string;\n}\n\n/**\n * Vote defines a vote on a governance proposal.\n * A Vote consists of a proposal ID, the voter, and the vote option.\n */\nexport interface Vote {\n  proposalId: Long;\n  voter: string;\n  /**\n   * Deprecated: Prefer to use `options` instead. This field is set in queries\n   * if and only if `len(options) == 1` and that option has weight 1. In all\n   * other cases, this field will default to VOTE_OPTION_UNSPECIFIED.\n   *\n   * @deprecated\n   */\n  option: VoteOption;\n  /** Since: cosmos-sdk 0.43 */\n  options: WeightedVoteOption[];\n}\n\n/** DepositParams defines the params for deposits on governance proposals. */\nexport interface DepositParams {\n  /** Minimum deposit for a proposal to enter voting period. */\n  minDeposit: Coin[];\n  /**\n   * Maximum period for Atom holders to deposit on a proposal. Initial value: 2\n   *  months.\n   */\n  maxDepositPeriod?: Duration;\n}\n\n/** VotingParams defines the params for voting on governance proposals. */\nexport interface VotingParams {\n  /** Length of the voting period. */\n  votingPeriod?: Duration;\n}\n\n/** TallyParams defines the params for tallying votes on governance proposals. */\nexport interface TallyParams {\n  /**\n   * Minimum percentage of total stake needed to vote for a result to be\n   *  considered valid.\n   */\n  quorum: Uint8Array;\n  /** Minimum proportion of Yes votes for proposal to pass. Default value: 0.5. */\n  threshold: Uint8Array;\n  /**\n   * Minimum value of Veto votes to Total votes ratio for proposal to be\n   *  vetoed. Default value: 1/3.\n   */\n  vetoThreshold: Uint8Array;\n}\n\nfunction createBaseWeightedVoteOption(): WeightedVoteOption {\n  return { option: 0, weight: \"\" };\n}\n\nexport const WeightedVoteOption = {\n  encode(\n    message: WeightedVoteOption,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.option !== 0) {\n      writer.uint32(8).int32(message.option);\n    }\n    if (message.weight !== \"\") {\n      writer.uint32(18).string(message.weight);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): WeightedVoteOption {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseWeightedVoteOption();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.option = reader.int32() as any;\n          break;\n        case 2:\n          message.weight = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): WeightedVoteOption {\n    return {\n      option: isSet(object.option) ? voteOptionFromJSON(object.option) : 0,\n      weight: isSet(object.weight) ? String(object.weight) : \"\",\n    };\n  },\n\n  toJSON(message: WeightedVoteOption): unknown {\n    const obj: any = {};\n    message.option !== undefined &&\n      (obj.option = voteOptionToJSON(message.option));\n    message.weight !== undefined && (obj.weight = message.weight);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<WeightedVoteOption>, I>>(\n    object: I\n  ): WeightedVoteOption {\n    const message = createBaseWeightedVoteOption();\n    message.option = object.option ?? 0;\n    message.weight = object.weight ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseTextProposal(): TextProposal {\n  return { title: \"\", description: \"\" };\n}\n\nexport const TextProposal = {\n  encode(\n    message: TextProposal,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(18).string(message.description);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TextProposal {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTextProposal();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.description = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TextProposal {\n    return {\n      title: isSet(object.title) ? String(object.title) : \"\",\n      description: isSet(object.description) ? String(object.description) : \"\",\n    };\n  },\n\n  toJSON(message: TextProposal): unknown {\n    const obj: any = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.description !== undefined &&\n      (obj.description = message.description);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TextProposal>, I>>(\n    object: I\n  ): TextProposal {\n    const message = createBaseTextProposal();\n    message.title = object.title ?? \"\";\n    message.description = object.description ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDeposit(): Deposit {\n  return { proposalId: Long.UZERO, depositor: \"\", amount: [] };\n}\n\nexport const Deposit = {\n  encode(\n    message: Deposit,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.depositor !== \"\") {\n      writer.uint32(18).string(message.depositor);\n    }\n    for (const v of message.amount) {\n      Coin.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Deposit {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDeposit();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.depositor = reader.string();\n          break;\n        case 3:\n          message.amount.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Deposit {\n    return {\n      proposalId: isSet(object.proposalId)\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO,\n      depositor: isSet(object.depositor) ? String(object.depositor) : \"\",\n      amount: Array.isArray(object?.amount)\n        ? object.amount.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Deposit): unknown {\n    const obj: any = {};\n    message.proposalId !== undefined &&\n      (obj.proposalId = (message.proposalId || Long.UZERO).toString());\n    message.depositor !== undefined && (obj.depositor = message.depositor);\n    if (message.amount) {\n      obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.amount = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Deposit>, I>>(object: I): Deposit {\n    const message = createBaseDeposit();\n    message.proposalId =\n      object.proposalId !== undefined && object.proposalId !== null\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO;\n    message.depositor = object.depositor ?? \"\";\n    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseProposal(): Proposal {\n  return {\n    proposalId: Long.UZERO,\n    content: undefined,\n    status: 0,\n    finalTallyResult: undefined,\n    submitTime: undefined,\n    depositEndTime: undefined,\n    totalDeposit: [],\n    votingStartTime: undefined,\n    votingEndTime: undefined,\n  };\n}\n\nexport const Proposal = {\n  encode(\n    message: Proposal,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.content !== undefined) {\n      Any.encode(message.content, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.status !== 0) {\n      writer.uint32(24).int32(message.status);\n    }\n    if (message.finalTallyResult !== undefined) {\n      TallyResult.encode(\n        message.finalTallyResult,\n        writer.uint32(34).fork()\n      ).ldelim();\n    }\n    if (message.submitTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.submitTime),\n        writer.uint32(42).fork()\n      ).ldelim();\n    }\n    if (message.depositEndTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.depositEndTime),\n        writer.uint32(50).fork()\n      ).ldelim();\n    }\n    for (const v of message.totalDeposit) {\n      Coin.encode(v!, writer.uint32(58).fork()).ldelim();\n    }\n    if (message.votingStartTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.votingStartTime),\n        writer.uint32(66).fork()\n      ).ldelim();\n    }\n    if (message.votingEndTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.votingEndTime),\n        writer.uint32(74).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Proposal {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProposal();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.content = Any.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.status = reader.int32() as any;\n          break;\n        case 4:\n          message.finalTallyResult = TallyResult.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 5:\n          message.submitTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 6:\n          message.depositEndTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 7:\n          message.totalDeposit.push(Coin.decode(reader, reader.uint32()));\n          break;\n        case 8:\n          message.votingStartTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 9:\n          message.votingEndTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Proposal {\n    return {\n      proposalId: isSet(object.proposalId)\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO,\n      content: isSet(object.content) ? Any.fromJSON(object.content) : undefined,\n      status: isSet(object.status) ? proposalStatusFromJSON(object.status) : 0,\n      finalTallyResult: isSet(object.finalTallyResult)\n        ? TallyResult.fromJSON(object.finalTallyResult)\n        : undefined,\n      submitTime: isSet(object.submitTime)\n        ? fromJsonTimestamp(object.submitTime)\n        : undefined,\n      depositEndTime: isSet(object.depositEndTime)\n        ? fromJsonTimestamp(object.depositEndTime)\n        : undefined,\n      totalDeposit: Array.isArray(object?.totalDeposit)\n        ? object.totalDeposit.map((e: any) => Coin.fromJSON(e))\n        : [],\n      votingStartTime: isSet(object.votingStartTime)\n        ? fromJsonTimestamp(object.votingStartTime)\n        : undefined,\n      votingEndTime: isSet(object.votingEndTime)\n        ? fromJsonTimestamp(object.votingEndTime)\n        : undefined,\n    };\n  },\n\n  toJSON(message: Proposal): unknown {\n    const obj: any = {};\n    message.proposalId !== undefined &&\n      (obj.proposalId = (message.proposalId || Long.UZERO).toString());\n    message.content !== undefined &&\n      (obj.content = message.content ? Any.toJSON(message.content) : undefined);\n    message.status !== undefined &&\n      (obj.status = proposalStatusToJSON(message.status));\n    message.finalTallyResult !== undefined &&\n      (obj.finalTallyResult = message.finalTallyResult\n        ? TallyResult.toJSON(message.finalTallyResult)\n        : undefined);\n    message.submitTime !== undefined &&\n      (obj.submitTime = message.submitTime.toISOString());\n    message.depositEndTime !== undefined &&\n      (obj.depositEndTime = message.depositEndTime.toISOString());\n    if (message.totalDeposit) {\n      obj.totalDeposit = message.totalDeposit.map((e) =>\n        e ? Coin.toJSON(e) : undefined\n      );\n    } else {\n      obj.totalDeposit = [];\n    }\n    message.votingStartTime !== undefined &&\n      (obj.votingStartTime = message.votingStartTime.toISOString());\n    message.votingEndTime !== undefined &&\n      (obj.votingEndTime = message.votingEndTime.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Proposal>, I>>(object: I): Proposal {\n    const message = createBaseProposal();\n    message.proposalId =\n      object.proposalId !== undefined && object.proposalId !== null\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO;\n    message.content =\n      object.content !== undefined && object.content !== null\n        ? Any.fromPartial(object.content)\n        : undefined;\n    message.status = object.status ?? 0;\n    message.finalTallyResult =\n      object.finalTallyResult !== undefined && object.finalTallyResult !== null\n        ? TallyResult.fromPartial(object.finalTallyResult)\n        : undefined;\n    message.submitTime = object.submitTime ?? undefined;\n    message.depositEndTime = object.depositEndTime ?? undefined;\n    message.totalDeposit =\n      object.totalDeposit?.map((e) => Coin.fromPartial(e)) || [];\n    message.votingStartTime = object.votingStartTime ?? undefined;\n    message.votingEndTime = object.votingEndTime ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseTallyResult(): TallyResult {\n  return { yes: \"\", abstain: \"\", no: \"\", noWithVeto: \"\" };\n}\n\nexport const TallyResult = {\n  encode(\n    message: TallyResult,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.yes !== \"\") {\n      writer.uint32(10).string(message.yes);\n    }\n    if (message.abstain !== \"\") {\n      writer.uint32(18).string(message.abstain);\n    }\n    if (message.no !== \"\") {\n      writer.uint32(26).string(message.no);\n    }\n    if (message.noWithVeto !== \"\") {\n      writer.uint32(34).string(message.noWithVeto);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TallyResult {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTallyResult();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.yes = reader.string();\n          break;\n        case 2:\n          message.abstain = reader.string();\n          break;\n        case 3:\n          message.no = reader.string();\n          break;\n        case 4:\n          message.noWithVeto = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TallyResult {\n    return {\n      yes: isSet(object.yes) ? String(object.yes) : \"\",\n      abstain: isSet(object.abstain) ? String(object.abstain) : \"\",\n      no: isSet(object.no) ? String(object.no) : \"\",\n      noWithVeto: isSet(object.noWithVeto) ? String(object.noWithVeto) : \"\",\n    };\n  },\n\n  toJSON(message: TallyResult): unknown {\n    const obj: any = {};\n    message.yes !== undefined && (obj.yes = message.yes);\n    message.abstain !== undefined && (obj.abstain = message.abstain);\n    message.no !== undefined && (obj.no = message.no);\n    message.noWithVeto !== undefined && (obj.noWithVeto = message.noWithVeto);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TallyResult>, I>>(\n    object: I\n  ): TallyResult {\n    const message = createBaseTallyResult();\n    message.yes = object.yes ?? \"\";\n    message.abstain = object.abstain ?? \"\";\n    message.no = object.no ?? \"\";\n    message.noWithVeto = object.noWithVeto ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseVote(): Vote {\n  return { proposalId: Long.UZERO, voter: \"\", option: 0, options: [] };\n}\n\nexport const Vote = {\n  encode(message: Vote, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.voter !== \"\") {\n      writer.uint32(18).string(message.voter);\n    }\n    if (message.option !== 0) {\n      writer.uint32(24).int32(message.option);\n    }\n    for (const v of message.options) {\n      WeightedVoteOption.encode(v!, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Vote {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseVote();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.voter = reader.string();\n          break;\n        case 3:\n          message.option = reader.int32() as any;\n          break;\n        case 4:\n          message.options.push(\n            WeightedVoteOption.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Vote {\n    return {\n      proposalId: isSet(object.proposalId)\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO,\n      voter: isSet(object.voter) ? String(object.voter) : \"\",\n      option: isSet(object.option) ? voteOptionFromJSON(object.option) : 0,\n      options: Array.isArray(object?.options)\n        ? object.options.map((e: any) => WeightedVoteOption.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Vote): unknown {\n    const obj: any = {};\n    message.proposalId !== undefined &&\n      (obj.proposalId = (message.proposalId || Long.UZERO).toString());\n    message.voter !== undefined && (obj.voter = message.voter);\n    message.option !== undefined &&\n      (obj.option = voteOptionToJSON(message.option));\n    if (message.options) {\n      obj.options = message.options.map((e) =>\n        e ? WeightedVoteOption.toJSON(e) : undefined\n      );\n    } else {\n      obj.options = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Vote>, I>>(object: I): Vote {\n    const message = createBaseVote();\n    message.proposalId =\n      object.proposalId !== undefined && object.proposalId !== null\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO;\n    message.voter = object.voter ?? \"\";\n    message.option = object.option ?? 0;\n    message.options =\n      object.options?.map((e) => WeightedVoteOption.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseDepositParams(): DepositParams {\n  return { minDeposit: [], maxDepositPeriod: undefined };\n}\n\nexport const DepositParams = {\n  encode(\n    message: DepositParams,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.minDeposit) {\n      Coin.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.maxDepositPeriod !== undefined) {\n      Duration.encode(\n        message.maxDepositPeriod,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DepositParams {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDepositParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.minDeposit.push(Coin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.maxDepositPeriod = Duration.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DepositParams {\n    return {\n      minDeposit: Array.isArray(object?.minDeposit)\n        ? object.minDeposit.map((e: any) => Coin.fromJSON(e))\n        : [],\n      maxDepositPeriod: isSet(object.maxDepositPeriod)\n        ? Duration.fromJSON(object.maxDepositPeriod)\n        : undefined,\n    };\n  },\n\n  toJSON(message: DepositParams): unknown {\n    const obj: any = {};\n    if (message.minDeposit) {\n      obj.minDeposit = message.minDeposit.map((e) =>\n        e ? Coin.toJSON(e) : undefined\n      );\n    } else {\n      obj.minDeposit = [];\n    }\n    message.maxDepositPeriod !== undefined &&\n      (obj.maxDepositPeriod = message.maxDepositPeriod\n        ? Duration.toJSON(message.maxDepositPeriod)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DepositParams>, I>>(\n    object: I\n  ): DepositParams {\n    const message = createBaseDepositParams();\n    message.minDeposit =\n      object.minDeposit?.map((e) => Coin.fromPartial(e)) || [];\n    message.maxDepositPeriod =\n      object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null\n        ? Duration.fromPartial(object.maxDepositPeriod)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseVotingParams(): VotingParams {\n  return { votingPeriod: undefined };\n}\n\nexport const VotingParams = {\n  encode(\n    message: VotingParams,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.votingPeriod !== undefined) {\n      Duration.encode(message.votingPeriod, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): VotingParams {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseVotingParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.votingPeriod = Duration.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): VotingParams {\n    return {\n      votingPeriod: isSet(object.votingPeriod)\n        ? Duration.fromJSON(object.votingPeriod)\n        : undefined,\n    };\n  },\n\n  toJSON(message: VotingParams): unknown {\n    const obj: any = {};\n    message.votingPeriod !== undefined &&\n      (obj.votingPeriod = message.votingPeriod\n        ? Duration.toJSON(message.votingPeriod)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<VotingParams>, I>>(\n    object: I\n  ): VotingParams {\n    const message = createBaseVotingParams();\n    message.votingPeriod =\n      object.votingPeriod !== undefined && object.votingPeriod !== null\n        ? Duration.fromPartial(object.votingPeriod)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseTallyParams(): TallyParams {\n  return {\n    quorum: new Uint8Array(),\n    threshold: new Uint8Array(),\n    vetoThreshold: new Uint8Array(),\n  };\n}\n\nexport const TallyParams = {\n  encode(\n    message: TallyParams,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.quorum.length !== 0) {\n      writer.uint32(10).bytes(message.quorum);\n    }\n    if (message.threshold.length !== 0) {\n      writer.uint32(18).bytes(message.threshold);\n    }\n    if (message.vetoThreshold.length !== 0) {\n      writer.uint32(26).bytes(message.vetoThreshold);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TallyParams {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTallyParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.quorum = reader.bytes();\n          break;\n        case 2:\n          message.threshold = reader.bytes();\n          break;\n        case 3:\n          message.vetoThreshold = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TallyParams {\n    return {\n      quorum: isSet(object.quorum)\n        ? bytesFromBase64(object.quorum)\n        : new Uint8Array(),\n      threshold: isSet(object.threshold)\n        ? bytesFromBase64(object.threshold)\n        : new Uint8Array(),\n      vetoThreshold: isSet(object.vetoThreshold)\n        ? bytesFromBase64(object.vetoThreshold)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: TallyParams): unknown {\n    const obj: any = {};\n    message.quorum !== undefined &&\n      (obj.quorum = base64FromBytes(\n        message.quorum !== undefined ? message.quorum : new Uint8Array()\n      ));\n    message.threshold !== undefined &&\n      (obj.threshold = base64FromBytes(\n        message.threshold !== undefined ? message.threshold : new Uint8Array()\n      ));\n    message.vetoThreshold !== undefined &&\n      (obj.vetoThreshold = base64FromBytes(\n        message.vetoThreshold !== undefined\n          ? message.vetoThreshold\n          : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TallyParams>, I>>(\n    object: I\n  ): TallyParams {\n    const message = createBaseTallyParams();\n    message.quorum = object.quorum ?? new Uint8Array();\n    message.threshold = object.threshold ?? new Uint8Array();\n    message.vetoThreshold = object.vetoThreshold ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nfunction toTimestamp(date: Date): Timestamp {\n  const seconds = numberToLong(date.getTime() / 1_000);\n  const nanos = (date.getTime() % 1_000) * 1_000_000;\n  return { seconds, nanos };\n}\n\nfunction fromTimestamp(t: Timestamp): Date {\n  let millis = t.seconds.toNumber() * 1_000;\n  millis += t.nanos / 1_000_000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o: any): Date {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction numberToLong(number: number) {\n  return Long.fromNumber(number);\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport {\n  VoteOption,\n  WeightedVoteOption,\n  voteOptionFromJSON,\n  voteOptionToJSON,\n} from \"./gov\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Coin } from \"../../base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmos.gov.v1beta1\";\n\n/**\n * MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary\n * proposal Content.\n */\nexport interface MsgSubmitProposal {\n  content?: Any;\n  initialDeposit: Coin[];\n  proposer: string;\n}\n\n/** MsgSubmitProposalResponse defines the Msg/SubmitProposal response type. */\nexport interface MsgSubmitProposalResponse {\n  proposalId: Long;\n}\n\n/** MsgVote defines a message to cast a vote. */\nexport interface MsgVote {\n  proposalId: Long;\n  voter: string;\n  option: VoteOption;\n}\n\n/** MsgVoteResponse defines the Msg/Vote response type. */\nexport interface MsgVoteResponse {}\n\n/**\n * MsgVoteWeighted defines a message to cast a vote.\n *\n * Since: cosmos-sdk 0.43\n */\nexport interface MsgVoteWeighted {\n  proposalId: Long;\n  voter: string;\n  options: WeightedVoteOption[];\n}\n\n/**\n * MsgVoteWeightedResponse defines the Msg/VoteWeighted response type.\n *\n * Since: cosmos-sdk 0.43\n */\nexport interface MsgVoteWeightedResponse {}\n\n/** MsgDeposit defines a message to submit a deposit to an existing proposal. */\nexport interface MsgDeposit {\n  proposalId: Long;\n  depositor: string;\n  amount: Coin[];\n}\n\n/** MsgDepositResponse defines the Msg/Deposit response type. */\nexport interface MsgDepositResponse {}\n\nfunction createBaseMsgSubmitProposal(): MsgSubmitProposal {\n  return { content: undefined, initialDeposit: [], proposer: \"\" };\n}\n\nexport const MsgSubmitProposal = {\n  encode(\n    message: MsgSubmitProposal,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.content !== undefined) {\n      Any.encode(message.content, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.initialDeposit) {\n      Coin.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.proposer !== \"\") {\n      writer.uint32(26).string(message.proposer);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitProposal {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSubmitProposal();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.content = Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.initialDeposit.push(Coin.decode(reader, reader.uint32()));\n          break;\n        case 3:\n          message.proposer = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSubmitProposal {\n    return {\n      content: isSet(object.content) ? Any.fromJSON(object.content) : undefined,\n      initialDeposit: Array.isArray(object?.initialDeposit)\n        ? object.initialDeposit.map((e: any) => Coin.fromJSON(e))\n        : [],\n      proposer: isSet(object.proposer) ? String(object.proposer) : \"\",\n    };\n  },\n\n  toJSON(message: MsgSubmitProposal): unknown {\n    const obj: any = {};\n    message.content !== undefined &&\n      (obj.content = message.content ? Any.toJSON(message.content) : undefined);\n    if (message.initialDeposit) {\n      obj.initialDeposit = message.initialDeposit.map((e) =>\n        e ? Coin.toJSON(e) : undefined\n      );\n    } else {\n      obj.initialDeposit = [];\n    }\n    message.proposer !== undefined && (obj.proposer = message.proposer);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSubmitProposal>, I>>(\n    object: I\n  ): MsgSubmitProposal {\n    const message = createBaseMsgSubmitProposal();\n    message.content =\n      object.content !== undefined && object.content !== null\n        ? Any.fromPartial(object.content)\n        : undefined;\n    message.initialDeposit =\n      object.initialDeposit?.map((e) => Coin.fromPartial(e)) || [];\n    message.proposer = object.proposer ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgSubmitProposalResponse(): MsgSubmitProposalResponse {\n  return { proposalId: Long.UZERO };\n}\n\nexport const MsgSubmitProposalResponse = {\n  encode(\n    message: MsgSubmitProposalResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSubmitProposalResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSubmitProposalResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSubmitProposalResponse {\n    return {\n      proposalId: isSet(object.proposalId)\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: MsgSubmitProposalResponse): unknown {\n    const obj: any = {};\n    message.proposalId !== undefined &&\n      (obj.proposalId = (message.proposalId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSubmitProposalResponse>, I>>(\n    object: I\n  ): MsgSubmitProposalResponse {\n    const message = createBaseMsgSubmitProposalResponse();\n    message.proposalId =\n      object.proposalId !== undefined && object.proposalId !== null\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgVote(): MsgVote {\n  return { proposalId: Long.UZERO, voter: \"\", option: 0 };\n}\n\nexport const MsgVote = {\n  encode(\n    message: MsgVote,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.voter !== \"\") {\n      writer.uint32(18).string(message.voter);\n    }\n    if (message.option !== 0) {\n      writer.uint32(24).int32(message.option);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgVote {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgVote();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.voter = reader.string();\n          break;\n        case 3:\n          message.option = reader.int32() as any;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgVote {\n    return {\n      proposalId: isSet(object.proposalId)\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO,\n      voter: isSet(object.voter) ? String(object.voter) : \"\",\n      option: isSet(object.option) ? voteOptionFromJSON(object.option) : 0,\n    };\n  },\n\n  toJSON(message: MsgVote): unknown {\n    const obj: any = {};\n    message.proposalId !== undefined &&\n      (obj.proposalId = (message.proposalId || Long.UZERO).toString());\n    message.voter !== undefined && (obj.voter = message.voter);\n    message.option !== undefined &&\n      (obj.option = voteOptionToJSON(message.option));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgVote>, I>>(object: I): MsgVote {\n    const message = createBaseMsgVote();\n    message.proposalId =\n      object.proposalId !== undefined && object.proposalId !== null\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO;\n    message.voter = object.voter ?? \"\";\n    message.option = object.option ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseMsgVoteResponse(): MsgVoteResponse {\n  return {};\n}\n\nexport const MsgVoteResponse = {\n  encode(\n    _: MsgVoteResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgVoteResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgVoteResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgVoteResponse {\n    return {};\n  },\n\n  toJSON(_: MsgVoteResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgVoteResponse>, I>>(\n    _: I\n  ): MsgVoteResponse {\n    const message = createBaseMsgVoteResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgVoteWeighted(): MsgVoteWeighted {\n  return { proposalId: Long.UZERO, voter: \"\", options: [] };\n}\n\nexport const MsgVoteWeighted = {\n  encode(\n    message: MsgVoteWeighted,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.voter !== \"\") {\n      writer.uint32(18).string(message.voter);\n    }\n    for (const v of message.options) {\n      WeightedVoteOption.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgVoteWeighted {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgVoteWeighted();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.voter = reader.string();\n          break;\n        case 3:\n          message.options.push(\n            WeightedVoteOption.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgVoteWeighted {\n    return {\n      proposalId: isSet(object.proposalId)\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO,\n      voter: isSet(object.voter) ? String(object.voter) : \"\",\n      options: Array.isArray(object?.options)\n        ? object.options.map((e: any) => WeightedVoteOption.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgVoteWeighted): unknown {\n    const obj: any = {};\n    message.proposalId !== undefined &&\n      (obj.proposalId = (message.proposalId || Long.UZERO).toString());\n    message.voter !== undefined && (obj.voter = message.voter);\n    if (message.options) {\n      obj.options = message.options.map((e) =>\n        e ? WeightedVoteOption.toJSON(e) : undefined\n      );\n    } else {\n      obj.options = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgVoteWeighted>, I>>(\n    object: I\n  ): MsgVoteWeighted {\n    const message = createBaseMsgVoteWeighted();\n    message.proposalId =\n      object.proposalId !== undefined && object.proposalId !== null\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO;\n    message.voter = object.voter ?? \"\";\n    message.options =\n      object.options?.map((e) => WeightedVoteOption.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgVoteWeightedResponse(): MsgVoteWeightedResponse {\n  return {};\n}\n\nexport const MsgVoteWeightedResponse = {\n  encode(\n    _: MsgVoteWeightedResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgVoteWeightedResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgVoteWeightedResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgVoteWeightedResponse {\n    return {};\n  },\n\n  toJSON(_: MsgVoteWeightedResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgVoteWeightedResponse>, I>>(\n    _: I\n  ): MsgVoteWeightedResponse {\n    const message = createBaseMsgVoteWeightedResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgDeposit(): MsgDeposit {\n  return { proposalId: Long.UZERO, depositor: \"\", amount: [] };\n}\n\nexport const MsgDeposit = {\n  encode(\n    message: MsgDeposit,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.proposalId.isZero()) {\n      writer.uint32(8).uint64(message.proposalId);\n    }\n    if (message.depositor !== \"\") {\n      writer.uint32(18).string(message.depositor);\n    }\n    for (const v of message.amount) {\n      Coin.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeposit {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDeposit();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.proposalId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.depositor = reader.string();\n          break;\n        case 3:\n          message.amount.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgDeposit {\n    return {\n      proposalId: isSet(object.proposalId)\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO,\n      depositor: isSet(object.depositor) ? String(object.depositor) : \"\",\n      amount: Array.isArray(object?.amount)\n        ? object.amount.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgDeposit): unknown {\n    const obj: any = {};\n    message.proposalId !== undefined &&\n      (obj.proposalId = (message.proposalId || Long.UZERO).toString());\n    message.depositor !== undefined && (obj.depositor = message.depositor);\n    if (message.amount) {\n      obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.amount = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDeposit>, I>>(\n    object: I\n  ): MsgDeposit {\n    const message = createBaseMsgDeposit();\n    message.proposalId =\n      object.proposalId !== undefined && object.proposalId !== null\n        ? Long.fromValue(object.proposalId)\n        : Long.UZERO;\n    message.depositor = object.depositor ?? \"\";\n    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgDepositResponse(): MsgDepositResponse {\n  return {};\n}\n\nexport const MsgDepositResponse = {\n  encode(\n    _: MsgDepositResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDepositResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDepositResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgDepositResponse {\n    return {};\n  },\n\n  toJSON(_: MsgDepositResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDepositResponse>, I>>(\n    _: I\n  ): MsgDepositResponse {\n    const message = createBaseMsgDepositResponse();\n    return message;\n  },\n};\n\n/** Msg defines the bank Msg service. */\nexport interface Msg {\n  /** SubmitProposal defines a method to create new proposal given a content. */\n  SubmitProposal(\n    request: DeepPartial<MsgSubmitProposal>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSubmitProposalResponse>;\n  /** Vote defines a method to add a vote on a specific proposal. */\n  Vote(\n    request: DeepPartial<MsgVote>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgVoteResponse>;\n  /**\n   * VoteWeighted defines a method to add a weighted vote on a specific proposal.\n   *\n   * Since: cosmos-sdk 0.43\n   */\n  VoteWeighted(\n    request: DeepPartial<MsgVoteWeighted>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgVoteWeightedResponse>;\n  /** Deposit defines a method to add deposit on a specific proposal. */\n  Deposit(\n    request: DeepPartial<MsgDeposit>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDepositResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.SubmitProposal = this.SubmitProposal.bind(this);\n    this.Vote = this.Vote.bind(this);\n    this.VoteWeighted = this.VoteWeighted.bind(this);\n    this.Deposit = this.Deposit.bind(this);\n  }\n\n  SubmitProposal(\n    request: DeepPartial<MsgSubmitProposal>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSubmitProposalResponse> {\n    return this.rpc.unary(\n      MsgSubmitProposalDesc,\n      MsgSubmitProposal.fromPartial(request),\n      metadata\n    );\n  }\n\n  Vote(\n    request: DeepPartial<MsgVote>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgVoteResponse> {\n    return this.rpc.unary(MsgVoteDesc, MsgVote.fromPartial(request), metadata);\n  }\n\n  VoteWeighted(\n    request: DeepPartial<MsgVoteWeighted>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgVoteWeightedResponse> {\n    return this.rpc.unary(\n      MsgVoteWeightedDesc,\n      MsgVoteWeighted.fromPartial(request),\n      metadata\n    );\n  }\n\n  Deposit(\n    request: DeepPartial<MsgDeposit>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDepositResponse> {\n    return this.rpc.unary(\n      MsgDepositDesc,\n      MsgDeposit.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.gov.v1beta1.Msg\",\n};\n\nexport const MsgSubmitProposalDesc: UnaryMethodDefinitionish = {\n  methodName: \"SubmitProposal\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSubmitProposal.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSubmitProposalResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgVoteDesc: UnaryMethodDefinitionish = {\n  methodName: \"Vote\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgVote.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgVoteResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgVoteWeightedDesc: UnaryMethodDefinitionish = {\n  methodName: \"VoteWeighted\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgVoteWeighted.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgVoteWeightedResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgDepositDesc: UnaryMethodDefinitionish = {\n  methodName: \"Deposit\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgDeposit.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgDepositResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from '../BaseMsg';\nimport {\n  protobufPackage,\n  MsgSubmitProposal as MsgSubmitProposal_pb,\n  MsgVote as MsgVote_pb,\n  MsgVoteWeighted as MsgVoteWeighted_pb,\n  MsgDeposit as MsgDeposit_pb,\n} from \"../../proto/cosmos/gov/v1beta1/tx\";\nimport {EncodeObject} from \"@cosmjs/proto-signing\";\n\nexport class MsgSubmitProposal extends BaseMsg {\n  public protoMsg: MsgSubmitProposal_pb;\n  constructor(msg: MsgSubmitProposal_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSubmitProposal.typeUrl,\n      value: MsgSubmitProposal_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSubmitProposal {\n  export const typeUrl: string = `/${protobufPackage}.MsgSubmitProposal`;\n  export const Proto = MsgSubmitProposal_pb;\n  export interface Proto extends MsgSubmitProposal_pb {}\n}\n\nexport class MsgDeposit extends BaseMsg {\n  public protoMsg: MsgDeposit_pb;\n  constructor(msg: MsgDeposit_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgDeposit.typeUrl,\n      value: MsgDeposit_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgDeposit {\n  export const typeUrl: string = `/${protobufPackage}.MsgDeposit`;\n  export const Proto = MsgDeposit_pb;\n  export interface Proto extends MsgDeposit_pb {}\n}\n\nexport class MsgVote extends BaseMsg {\n  public protoMsg: MsgVote_pb;\n  constructor(msg: MsgVote_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgVote.typeUrl,\n      value: MsgVote_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgVote {\n  export const typeUrl: string = `/${protobufPackage}.MsgVote`;\n  export const Proto = MsgVote_pb;\n  export interface Proto extends MsgVote_pb {}\n}\n\nexport class MsgVoteWeighted extends BaseMsg {\n  public protoMsg: MsgVoteWeighted_pb;\n  constructor(msg: MsgVoteWeighted_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgVoteWeighted.typeUrl,\n      value: MsgVoteWeighted_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgVoteWeighted {\n  export const typeUrl: string = `/${protobufPackage}.MsgVoteWeighted`;\n  export const Proto = MsgVoteWeighted_pb;\n  export interface Proto extends MsgVoteWeighted_pb {}\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Coin } from \"../../base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmos.vesting.v1beta1\";\n\n/**\n * MsgCreateVestingAccount defines a message that enables creating a vesting\n * account.\n */\nexport interface MsgCreateVestingAccount {\n  fromAddress: string;\n  toAddress: string;\n  amount: Coin[];\n  endTime: Long;\n  delayed: boolean;\n}\n\n/** MsgCreateVestingAccountResponse defines the Msg/CreateVestingAccount response type. */\nexport interface MsgCreateVestingAccountResponse {}\n\nfunction createBaseMsgCreateVestingAccount(): MsgCreateVestingAccount {\n  return {\n    fromAddress: \"\",\n    toAddress: \"\",\n    amount: [],\n    endTime: Long.ZERO,\n    delayed: false,\n  };\n}\n\nexport const MsgCreateVestingAccount = {\n  encode(\n    message: MsgCreateVestingAccount,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.fromAddress !== \"\") {\n      writer.uint32(10).string(message.fromAddress);\n    }\n    if (message.toAddress !== \"\") {\n      writer.uint32(18).string(message.toAddress);\n    }\n    for (const v of message.amount) {\n      Coin.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    if (!message.endTime.isZero()) {\n      writer.uint32(32).int64(message.endTime);\n    }\n    if (message.delayed === true) {\n      writer.uint32(40).bool(message.delayed);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreateVestingAccount {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateVestingAccount();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.fromAddress = reader.string();\n          break;\n        case 2:\n          message.toAddress = reader.string();\n          break;\n        case 3:\n          message.amount.push(Coin.decode(reader, reader.uint32()));\n          break;\n        case 4:\n          message.endTime = reader.int64() as Long;\n          break;\n        case 5:\n          message.delayed = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreateVestingAccount {\n    return {\n      fromAddress: isSet(object.fromAddress) ? String(object.fromAddress) : \"\",\n      toAddress: isSet(object.toAddress) ? String(object.toAddress) : \"\",\n      amount: Array.isArray(object?.amount)\n        ? object.amount.map((e: any) => Coin.fromJSON(e))\n        : [],\n      endTime: isSet(object.endTime)\n        ? Long.fromValue(object.endTime)\n        : Long.ZERO,\n      delayed: isSet(object.delayed) ? Boolean(object.delayed) : false,\n    };\n  },\n\n  toJSON(message: MsgCreateVestingAccount): unknown {\n    const obj: any = {};\n    message.fromAddress !== undefined &&\n      (obj.fromAddress = message.fromAddress);\n    message.toAddress !== undefined && (obj.toAddress = message.toAddress);\n    if (message.amount) {\n      obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.amount = [];\n    }\n    message.endTime !== undefined &&\n      (obj.endTime = (message.endTime || Long.ZERO).toString());\n    message.delayed !== undefined && (obj.delayed = message.delayed);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreateVestingAccount>, I>>(\n    object: I\n  ): MsgCreateVestingAccount {\n    const message = createBaseMsgCreateVestingAccount();\n    message.fromAddress = object.fromAddress ?? \"\";\n    message.toAddress = object.toAddress ?? \"\";\n    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];\n    message.endTime =\n      object.endTime !== undefined && object.endTime !== null\n        ? Long.fromValue(object.endTime)\n        : Long.ZERO;\n    message.delayed = object.delayed ?? false;\n    return message;\n  },\n};\n\nfunction createBaseMsgCreateVestingAccountResponse(): MsgCreateVestingAccountResponse {\n  return {};\n}\n\nexport const MsgCreateVestingAccountResponse = {\n  encode(\n    _: MsgCreateVestingAccountResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreateVestingAccountResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateVestingAccountResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreateVestingAccountResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreateVestingAccountResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreateVestingAccountResponse>, I>>(\n    _: I\n  ): MsgCreateVestingAccountResponse {\n    const message = createBaseMsgCreateVestingAccountResponse();\n    return message;\n  },\n};\n\n/** Msg defines the bank Msg service. */\nexport interface Msg {\n  /**\n   * CreateVestingAccount defines a method that enables creating a vesting\n   * account.\n   */\n  CreateVestingAccount(\n    request: DeepPartial<MsgCreateVestingAccount>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateVestingAccountResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.CreateVestingAccount = this.CreateVestingAccount.bind(this);\n  }\n\n  CreateVestingAccount(\n    request: DeepPartial<MsgCreateVestingAccount>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateVestingAccountResponse> {\n    return this.rpc.unary(\n      MsgCreateVestingAccountDesc,\n      MsgCreateVestingAccount.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.vesting.v1beta1.Msg\",\n};\n\nexport const MsgCreateVestingAccountDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreateVestingAccount\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreateVestingAccount.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreateVestingAccountResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"../BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgCreateVestingAccount as MsgCreateVestingAccount_pb,\n} from \"../../proto/cosmos/vesting/v1beta1/tx\";\n\nexport class MsgCreateVestingAccount extends BaseMsg {\n  public protoMsg: MsgCreateVestingAccount_pb;\n  constructor(msg: MsgCreateVestingAccount_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreateVestingAccount.typeUrl,\n      value: MsgCreateVestingAccount_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreateVestingAccount {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreateVestingAccount`;\n  export const Proto = MsgCreateVestingAccount_pb;\n  export interface Proto extends MsgCreateVestingAccount_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"metaoslabs.metaos.deflation\";\n\nexport interface Repurchase {\n  denom: string;\n  sellMinAmount: string;\n  sellMaxAmount: string;\n  denoms: string[];\n  fees: number[];\n}\n\nfunction createBaseRepurchase(): Repurchase {\n  return {\n    denom: \"\",\n    sellMinAmount: \"\",\n    sellMaxAmount: \"\",\n    denoms: [],\n    fees: [],\n  };\n}\n\nexport const Repurchase = {\n  encode(\n    message: Repurchase,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (message.sellMinAmount !== \"\") {\n      writer.uint32(18).string(message.sellMinAmount);\n    }\n    if (message.sellMaxAmount !== \"\") {\n      writer.uint32(26).string(message.sellMaxAmount);\n    }\n    for (const v of message.denoms) {\n      writer.uint32(34).string(v!);\n    }\n    writer.uint32(42).fork();\n    for (const v of message.fees) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Repurchase {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRepurchase();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.sellMinAmount = reader.string();\n          break;\n        case 3:\n          message.sellMaxAmount = reader.string();\n          break;\n        case 4:\n          message.denoms.push(reader.string());\n          break;\n        case 5:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.fees.push(reader.int32());\n            }\n          } else {\n            message.fees.push(reader.int32());\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Repurchase {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      sellMinAmount: isSet(object.sellMinAmount)\n        ? String(object.sellMinAmount)\n        : \"\",\n      sellMaxAmount: isSet(object.sellMaxAmount)\n        ? String(object.sellMaxAmount)\n        : \"\",\n      denoms: Array.isArray(object?.denoms)\n        ? object.denoms.map((e: any) => String(e))\n        : [],\n      fees: Array.isArray(object?.fees)\n        ? object.fees.map((e: any) => Number(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Repurchase): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.sellMinAmount !== undefined &&\n      (obj.sellMinAmount = message.sellMinAmount);\n    message.sellMaxAmount !== undefined &&\n      (obj.sellMaxAmount = message.sellMaxAmount);\n    if (message.denoms) {\n      obj.denoms = message.denoms.map((e) => e);\n    } else {\n      obj.denoms = [];\n    }\n    if (message.fees) {\n      obj.fees = message.fees.map((e) => Math.round(e));\n    } else {\n      obj.fees = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Repurchase>, I>>(\n    object: I\n  ): Repurchase {\n    const message = createBaseRepurchase();\n    message.denom = object.denom ?? \"\";\n    message.sellMinAmount = object.sellMinAmount ?? \"\";\n    message.sellMaxAmount = object.sellMaxAmount ?? \"\";\n    message.denoms = object.denoms?.map((e) => e) || [];\n    message.fees = object.fees?.map((e) => e) || [];\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Repurchase } from \"./repurchase\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"metaoslabs.metaos.deflation\";\n\nexport interface MsgGovRepurchase {\n  creator: string;\n  repurchase?: Repurchase;\n}\n\nexport interface MsgGovRepurchaseResponse {}\n\nfunction createBaseMsgGovRepurchase(): MsgGovRepurchase {\n  return { creator: \"\", repurchase: undefined };\n}\n\nexport const MsgGovRepurchase = {\n  encode(\n    message: MsgGovRepurchase,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.repurchase !== undefined) {\n      Repurchase.encode(message.repurchase, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovRepurchase {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovRepurchase();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.repurchase = Repurchase.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgGovRepurchase {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      repurchase: isSet(object.repurchase)\n        ? Repurchase.fromJSON(object.repurchase)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgGovRepurchase): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.repurchase !== undefined &&\n      (obj.repurchase = message.repurchase\n        ? Repurchase.toJSON(message.repurchase)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovRepurchase>, I>>(\n    object: I\n  ): MsgGovRepurchase {\n    const message = createBaseMsgGovRepurchase();\n    message.creator = object.creator ?? \"\";\n    message.repurchase =\n      object.repurchase !== undefined && object.repurchase !== null\n        ? Repurchase.fromPartial(object.repurchase)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgGovRepurchaseResponse(): MsgGovRepurchaseResponse {\n  return {};\n}\n\nexport const MsgGovRepurchaseResponse = {\n  encode(\n    _: MsgGovRepurchaseResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgGovRepurchaseResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovRepurchaseResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgGovRepurchaseResponse {\n    return {};\n  },\n\n  toJSON(_: MsgGovRepurchaseResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovRepurchaseResponse>, I>>(\n    _: I\n  ): MsgGovRepurchaseResponse {\n    const message = createBaseMsgGovRepurchaseResponse();\n    return message;\n  },\n};\n\n/** Msg defines the Msg service. */\nexport interface Msg {\n  /** this line is used by starport scaffolding # proto/tx/rpc */\n  GovRepurchase(\n    request: DeepPartial<MsgGovRepurchase>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovRepurchaseResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.GovRepurchase = this.GovRepurchase.bind(this);\n  }\n\n  GovRepurchase(\n    request: DeepPartial<MsgGovRepurchase>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovRepurchaseResponse> {\n    return this.rpc.unary(\n      MsgGovRepurchaseDesc,\n      MsgGovRepurchase.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"metaoslabs.metaos.deflation.Msg\",\n};\n\nexport const MsgGovRepurchaseDesc: UnaryMethodDefinitionish = {\n  methodName: \"GovRepurchase\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgGovRepurchase.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgGovRepurchaseResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgGovRepurchase as MsgGovRepurchase_pb,\n} from \"../proto/deflation/tx\";\n\nexport class MsgGovRepurchase extends BaseMsg {\n  public protoMsg: MsgGovRepurchase_pb;\n  constructor(msg: MsgGovRepurchase_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgGovRepurchase.typeUrl,\n      value: MsgGovRepurchase_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgGovRepurchase {\n  export const typeUrl: string = `/${protobufPackage}.MsgGovRepurchase`;\n  export const Proto = MsgGovRepurchase_pb;\n  export interface Proto extends MsgGovRepurchase_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"ethermint.evm.v1\";\n\n/** Params defines the EVM module parameters */\nexport interface Params {\n  /**\n   * evm denom represents the token denomination used to run the EVM state\n   * transitions.\n   */\n  evmDenom: string;\n  /** enable create toggles state transitions that use the vm.Create function */\n  enableCreate: boolean;\n  /** enable call toggles state transitions that use the vm.Call function */\n  enableCall: boolean;\n  /** extra eips defines the additional EIPs for the vm.Config */\n  extraEips: Long[];\n  /** chain config defines the EVM chain configuration parameters */\n  chainConfig?: ChainConfig;\n}\n\n/**\n * ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int values\n * instead of *big.Int.\n */\nexport interface ChainConfig {\n  /** Homestead switch block (nil no fork, 0 = already homestead) */\n  homesteadBlock: string;\n  /** TheDAO hard-fork switch block (nil no fork) */\n  daoForkBlock: string;\n  /** Whether the nodes supports or opposes the DAO hard-fork */\n  daoForkSupport: boolean;\n  /**\n   * EIP150 implements the Gas price changes\n   * (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)\n   */\n  eip150Block: string;\n  /** EIP150 HF hash (needed for header only clients as only gas pricing changed) */\n  eip150Hash: string;\n  /** EIP155Block HF block */\n  eip155Block: string;\n  /** EIP158 HF block */\n  eip158Block: string;\n  /** Byzantium switch block (nil no fork, 0 = already on byzantium) */\n  byzantiumBlock: string;\n  /** Constantinople switch block (nil no fork, 0 = already activated) */\n  constantinopleBlock: string;\n  /** Petersburg switch block (nil same as Constantinople) */\n  petersburgBlock: string;\n  /** Istanbul switch block (nil no fork, 0 = already on istanbul) */\n  istanbulBlock: string;\n  /** Eip-2384 (bomb delay) switch block (nil no fork, 0 = already activated) */\n  muirGlacierBlock: string;\n  /** Berlin switch block (nil = no fork, 0 = already on berlin) */\n  berlinBlock: string;\n  /** London switch block (nil = no fork, 0 = already on london) */\n  londonBlock: string;\n  /** Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already activated) */\n  arrowGlacierBlock: string;\n  /** EIP-3675 (TheMerge) switch block (nil = no fork, 0 = already in merge proceedings) */\n  mergeForkBlock: string;\n}\n\n/** State represents a single Storage key value pair item. */\nexport interface State {\n  key: string;\n  value: string;\n}\n\n/**\n * TransactionLogs define the logs generated from a transaction execution\n * with a given hash. It it used for import/export data as transactions are not\n * persisted on blockchain state after an upgrade.\n */\nexport interface TransactionLogs {\n  hash: string;\n  logs: Log[];\n}\n\n/**\n * Log represents an protobuf compatible Ethereum Log that defines a contract\n * log event. These events are generated by the LOG opcode and stored/indexed by\n * the node.\n */\nexport interface Log {\n  /** address of the contract that generated the event */\n  address: string;\n  /** list of topics provided by the contract. */\n  topics: string[];\n  /** supplied by the contract, usually ABI-encoded */\n  data: Uint8Array;\n  /** block in which the transaction was included */\n  blockNumber: Long;\n  /** hash of the transaction */\n  txHash: string;\n  /** index of the transaction in the block */\n  txIndex: Long;\n  /** hash of the block in which the transaction was included */\n  blockHash: string;\n  /** index of the log in the block */\n  index: Long;\n  /**\n   * The Removed field is true if this log was reverted due to a chain\n   * reorganisation. You must pay attention to this field if you receive logs\n   * through a filter query.\n   */\n  removed: boolean;\n}\n\n/** TxResult stores results of Tx execution. */\nexport interface TxResult {\n  /**\n   * contract_address contains the ethereum address of the created contract (if\n   * any). If the state transition is an evm.Call, the contract address will be\n   * empty.\n   */\n  contractAddress: string;\n  /** bloom represents the bloom filter bytes */\n  bloom: Uint8Array;\n  /**\n   * tx_logs contains the transaction hash and the proto-compatible ethereum\n   * logs.\n   */\n  txLogs?: TransactionLogs;\n  /** ret defines the bytes from the execution. */\n  ret: Uint8Array;\n  /** reverted flag is set to true when the call has been reverted */\n  reverted: boolean;\n  /** gas_used notes the amount of gas consumed while execution */\n  gasUsed: Long;\n}\n\n/** AccessTuple is the element type of an access list. */\nexport interface AccessTuple {\n  /** hex formatted ethereum address */\n  address: string;\n  /** hex formatted hashes of the storage keys */\n  storageKeys: string[];\n}\n\n/** TraceConfig holds extra parameters to trace functions. */\nexport interface TraceConfig {\n  /** custom javascript tracer */\n  tracer: string;\n  /**\n   * overrides the default timeout of 5 seconds for JavaScript-based tracing\n   * calls\n   */\n  timeout: string;\n  /** number of blocks the tracer is willing to go back */\n  reexec: Long;\n  /** disable stack capture */\n  disableStack: boolean;\n  /** disable storage capture */\n  disableStorage: boolean;\n  /** print output during capture end */\n  debug: boolean;\n  /** maximum length of output, but zero means unlimited */\n  limit: number;\n  /** Chain overrides, can be used to execute a trace using future fork rules */\n  overrides?: ChainConfig;\n  /** enable memory capture */\n  enableMemory: boolean;\n  /** enable return data capture */\n  enableReturnData: boolean;\n}\n\nfunction createBaseParams(): Params {\n  return {\n    evmDenom: \"\",\n    enableCreate: false,\n    enableCall: false,\n    extraEips: [],\n    chainConfig: undefined,\n  };\n}\n\nexport const Params = {\n  encode(\n    message: Params,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.evmDenom !== \"\") {\n      writer.uint32(10).string(message.evmDenom);\n    }\n    if (message.enableCreate === true) {\n      writer.uint32(16).bool(message.enableCreate);\n    }\n    if (message.enableCall === true) {\n      writer.uint32(24).bool(message.enableCall);\n    }\n    writer.uint32(34).fork();\n    for (const v of message.extraEips) {\n      writer.int64(v);\n    }\n    writer.ldelim();\n    if (message.chainConfig !== undefined) {\n      ChainConfig.encode(\n        message.chainConfig,\n        writer.uint32(42).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Params {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.evmDenom = reader.string();\n          break;\n        case 2:\n          message.enableCreate = reader.bool();\n          break;\n        case 3:\n          message.enableCall = reader.bool();\n          break;\n        case 4:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.extraEips.push(reader.int64() as Long);\n            }\n          } else {\n            message.extraEips.push(reader.int64() as Long);\n          }\n          break;\n        case 5:\n          message.chainConfig = ChainConfig.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Params {\n    return {\n      evmDenom: isSet(object.evmDenom) ? String(object.evmDenom) : \"\",\n      enableCreate: isSet(object.enableCreate)\n        ? Boolean(object.enableCreate)\n        : false,\n      enableCall: isSet(object.enableCall) ? Boolean(object.enableCall) : false,\n      extraEips: Array.isArray(object?.extraEips)\n        ? object.extraEips.map((e: any) => Long.fromValue(e))\n        : [],\n      chainConfig: isSet(object.chainConfig)\n        ? ChainConfig.fromJSON(object.chainConfig)\n        : undefined,\n    };\n  },\n\n  toJSON(message: Params): unknown {\n    const obj: any = {};\n    message.evmDenom !== undefined && (obj.evmDenom = message.evmDenom);\n    message.enableCreate !== undefined &&\n      (obj.enableCreate = message.enableCreate);\n    message.enableCall !== undefined && (obj.enableCall = message.enableCall);\n    if (message.extraEips) {\n      obj.extraEips = message.extraEips.map((e) => (e || Long.ZERO).toString());\n    } else {\n      obj.extraEips = [];\n    }\n    message.chainConfig !== undefined &&\n      (obj.chainConfig = message.chainConfig\n        ? ChainConfig.toJSON(message.chainConfig)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {\n    const message = createBaseParams();\n    message.evmDenom = object.evmDenom ?? \"\";\n    message.enableCreate = object.enableCreate ?? false;\n    message.enableCall = object.enableCall ?? false;\n    message.extraEips = object.extraEips?.map((e) => Long.fromValue(e)) || [];\n    message.chainConfig =\n      object.chainConfig !== undefined && object.chainConfig !== null\n        ? ChainConfig.fromPartial(object.chainConfig)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseChainConfig(): ChainConfig {\n  return {\n    homesteadBlock: \"\",\n    daoForkBlock: \"\",\n    daoForkSupport: false,\n    eip150Block: \"\",\n    eip150Hash: \"\",\n    eip155Block: \"\",\n    eip158Block: \"\",\n    byzantiumBlock: \"\",\n    constantinopleBlock: \"\",\n    petersburgBlock: \"\",\n    istanbulBlock: \"\",\n    muirGlacierBlock: \"\",\n    berlinBlock: \"\",\n    londonBlock: \"\",\n    arrowGlacierBlock: \"\",\n    mergeForkBlock: \"\",\n  };\n}\n\nexport const ChainConfig = {\n  encode(\n    message: ChainConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.homesteadBlock !== \"\") {\n      writer.uint32(10).string(message.homesteadBlock);\n    }\n    if (message.daoForkBlock !== \"\") {\n      writer.uint32(18).string(message.daoForkBlock);\n    }\n    if (message.daoForkSupport === true) {\n      writer.uint32(24).bool(message.daoForkSupport);\n    }\n    if (message.eip150Block !== \"\") {\n      writer.uint32(34).string(message.eip150Block);\n    }\n    if (message.eip150Hash !== \"\") {\n      writer.uint32(42).string(message.eip150Hash);\n    }\n    if (message.eip155Block !== \"\") {\n      writer.uint32(50).string(message.eip155Block);\n    }\n    if (message.eip158Block !== \"\") {\n      writer.uint32(58).string(message.eip158Block);\n    }\n    if (message.byzantiumBlock !== \"\") {\n      writer.uint32(66).string(message.byzantiumBlock);\n    }\n    if (message.constantinopleBlock !== \"\") {\n      writer.uint32(74).string(message.constantinopleBlock);\n    }\n    if (message.petersburgBlock !== \"\") {\n      writer.uint32(82).string(message.petersburgBlock);\n    }\n    if (message.istanbulBlock !== \"\") {\n      writer.uint32(90).string(message.istanbulBlock);\n    }\n    if (message.muirGlacierBlock !== \"\") {\n      writer.uint32(98).string(message.muirGlacierBlock);\n    }\n    if (message.berlinBlock !== \"\") {\n      writer.uint32(106).string(message.berlinBlock);\n    }\n    if (message.londonBlock !== \"\") {\n      writer.uint32(138).string(message.londonBlock);\n    }\n    if (message.arrowGlacierBlock !== \"\") {\n      writer.uint32(146).string(message.arrowGlacierBlock);\n    }\n    if (message.mergeForkBlock !== \"\") {\n      writer.uint32(154).string(message.mergeForkBlock);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ChainConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseChainConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.homesteadBlock = reader.string();\n          break;\n        case 2:\n          message.daoForkBlock = reader.string();\n          break;\n        case 3:\n          message.daoForkSupport = reader.bool();\n          break;\n        case 4:\n          message.eip150Block = reader.string();\n          break;\n        case 5:\n          message.eip150Hash = reader.string();\n          break;\n        case 6:\n          message.eip155Block = reader.string();\n          break;\n        case 7:\n          message.eip158Block = reader.string();\n          break;\n        case 8:\n          message.byzantiumBlock = reader.string();\n          break;\n        case 9:\n          message.constantinopleBlock = reader.string();\n          break;\n        case 10:\n          message.petersburgBlock = reader.string();\n          break;\n        case 11:\n          message.istanbulBlock = reader.string();\n          break;\n        case 12:\n          message.muirGlacierBlock = reader.string();\n          break;\n        case 13:\n          message.berlinBlock = reader.string();\n          break;\n        case 17:\n          message.londonBlock = reader.string();\n          break;\n        case 18:\n          message.arrowGlacierBlock = reader.string();\n          break;\n        case 19:\n          message.mergeForkBlock = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ChainConfig {\n    return {\n      homesteadBlock: isSet(object.homesteadBlock)\n        ? String(object.homesteadBlock)\n        : \"\",\n      daoForkBlock: isSet(object.daoForkBlock)\n        ? String(object.daoForkBlock)\n        : \"\",\n      daoForkSupport: isSet(object.daoForkSupport)\n        ? Boolean(object.daoForkSupport)\n        : false,\n      eip150Block: isSet(object.eip150Block) ? String(object.eip150Block) : \"\",\n      eip150Hash: isSet(object.eip150Hash) ? String(object.eip150Hash) : \"\",\n      eip155Block: isSet(object.eip155Block) ? String(object.eip155Block) : \"\",\n      eip158Block: isSet(object.eip158Block) ? String(object.eip158Block) : \"\",\n      byzantiumBlock: isSet(object.byzantiumBlock)\n        ? String(object.byzantiumBlock)\n        : \"\",\n      constantinopleBlock: isSet(object.constantinopleBlock)\n        ? String(object.constantinopleBlock)\n        : \"\",\n      petersburgBlock: isSet(object.petersburgBlock)\n        ? String(object.petersburgBlock)\n        : \"\",\n      istanbulBlock: isSet(object.istanbulBlock)\n        ? String(object.istanbulBlock)\n        : \"\",\n      muirGlacierBlock: isSet(object.muirGlacierBlock)\n        ? String(object.muirGlacierBlock)\n        : \"\",\n      berlinBlock: isSet(object.berlinBlock) ? String(object.berlinBlock) : \"\",\n      londonBlock: isSet(object.londonBlock) ? String(object.londonBlock) : \"\",\n      arrowGlacierBlock: isSet(object.arrowGlacierBlock)\n        ? String(object.arrowGlacierBlock)\n        : \"\",\n      mergeForkBlock: isSet(object.mergeForkBlock)\n        ? String(object.mergeForkBlock)\n        : \"\",\n    };\n  },\n\n  toJSON(message: ChainConfig): unknown {\n    const obj: any = {};\n    message.homesteadBlock !== undefined &&\n      (obj.homesteadBlock = message.homesteadBlock);\n    message.daoForkBlock !== undefined &&\n      (obj.daoForkBlock = message.daoForkBlock);\n    message.daoForkSupport !== undefined &&\n      (obj.daoForkSupport = message.daoForkSupport);\n    message.eip150Block !== undefined &&\n      (obj.eip150Block = message.eip150Block);\n    message.eip150Hash !== undefined && (obj.eip150Hash = message.eip150Hash);\n    message.eip155Block !== undefined &&\n      (obj.eip155Block = message.eip155Block);\n    message.eip158Block !== undefined &&\n      (obj.eip158Block = message.eip158Block);\n    message.byzantiumBlock !== undefined &&\n      (obj.byzantiumBlock = message.byzantiumBlock);\n    message.constantinopleBlock !== undefined &&\n      (obj.constantinopleBlock = message.constantinopleBlock);\n    message.petersburgBlock !== undefined &&\n      (obj.petersburgBlock = message.petersburgBlock);\n    message.istanbulBlock !== undefined &&\n      (obj.istanbulBlock = message.istanbulBlock);\n    message.muirGlacierBlock !== undefined &&\n      (obj.muirGlacierBlock = message.muirGlacierBlock);\n    message.berlinBlock !== undefined &&\n      (obj.berlinBlock = message.berlinBlock);\n    message.londonBlock !== undefined &&\n      (obj.londonBlock = message.londonBlock);\n    message.arrowGlacierBlock !== undefined &&\n      (obj.arrowGlacierBlock = message.arrowGlacierBlock);\n    message.mergeForkBlock !== undefined &&\n      (obj.mergeForkBlock = message.mergeForkBlock);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ChainConfig>, I>>(\n    object: I\n  ): ChainConfig {\n    const message = createBaseChainConfig();\n    message.homesteadBlock = object.homesteadBlock ?? \"\";\n    message.daoForkBlock = object.daoForkBlock ?? \"\";\n    message.daoForkSupport = object.daoForkSupport ?? false;\n    message.eip150Block = object.eip150Block ?? \"\";\n    message.eip150Hash = object.eip150Hash ?? \"\";\n    message.eip155Block = object.eip155Block ?? \"\";\n    message.eip158Block = object.eip158Block ?? \"\";\n    message.byzantiumBlock = object.byzantiumBlock ?? \"\";\n    message.constantinopleBlock = object.constantinopleBlock ?? \"\";\n    message.petersburgBlock = object.petersburgBlock ?? \"\";\n    message.istanbulBlock = object.istanbulBlock ?? \"\";\n    message.muirGlacierBlock = object.muirGlacierBlock ?? \"\";\n    message.berlinBlock = object.berlinBlock ?? \"\";\n    message.londonBlock = object.londonBlock ?? \"\";\n    message.arrowGlacierBlock = object.arrowGlacierBlock ?? \"\";\n    message.mergeForkBlock = object.mergeForkBlock ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseState(): State {\n  return { key: \"\", value: \"\" };\n}\n\nexport const State = {\n  encode(message: State, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(18).string(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): State {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseState();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n        case 2:\n          message.value = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): State {\n    return {\n      key: isSet(object.key) ? String(object.key) : \"\",\n      value: isSet(object.value) ? String(object.value) : \"\",\n    };\n  },\n\n  toJSON(message: State): unknown {\n    const obj: any = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.value !== undefined && (obj.value = message.value);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<State>, I>>(object: I): State {\n    const message = createBaseState();\n    message.key = object.key ?? \"\";\n    message.value = object.value ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseTransactionLogs(): TransactionLogs {\n  return { hash: \"\", logs: [] };\n}\n\nexport const TransactionLogs = {\n  encode(\n    message: TransactionLogs,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.hash !== \"\") {\n      writer.uint32(10).string(message.hash);\n    }\n    for (const v of message.logs) {\n      Log.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionLogs {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTransactionLogs();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.string();\n          break;\n        case 2:\n          message.logs.push(Log.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TransactionLogs {\n    return {\n      hash: isSet(object.hash) ? String(object.hash) : \"\",\n      logs: Array.isArray(object?.logs)\n        ? object.logs.map((e: any) => Log.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: TransactionLogs): unknown {\n    const obj: any = {};\n    message.hash !== undefined && (obj.hash = message.hash);\n    if (message.logs) {\n      obj.logs = message.logs.map((e) => (e ? Log.toJSON(e) : undefined));\n    } else {\n      obj.logs = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TransactionLogs>, I>>(\n    object: I\n  ): TransactionLogs {\n    const message = createBaseTransactionLogs();\n    message.hash = object.hash ?? \"\";\n    message.logs = object.logs?.map((e) => Log.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseLog(): Log {\n  return {\n    address: \"\",\n    topics: [],\n    data: new Uint8Array(),\n    blockNumber: Long.UZERO,\n    txHash: \"\",\n    txIndex: Long.UZERO,\n    blockHash: \"\",\n    index: Long.UZERO,\n    removed: false,\n  };\n}\n\nexport const Log = {\n  encode(message: Log, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    for (const v of message.topics) {\n      writer.uint32(18).string(v!);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(26).bytes(message.data);\n    }\n    if (!message.blockNumber.isZero()) {\n      writer.uint32(32).uint64(message.blockNumber);\n    }\n    if (message.txHash !== \"\") {\n      writer.uint32(42).string(message.txHash);\n    }\n    if (!message.txIndex.isZero()) {\n      writer.uint32(48).uint64(message.txIndex);\n    }\n    if (message.blockHash !== \"\") {\n      writer.uint32(58).string(message.blockHash);\n    }\n    if (!message.index.isZero()) {\n      writer.uint32(64).uint64(message.index);\n    }\n    if (message.removed === true) {\n      writer.uint32(72).bool(message.removed);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Log {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLog();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          message.topics.push(reader.string());\n          break;\n        case 3:\n          message.data = reader.bytes();\n          break;\n        case 4:\n          message.blockNumber = reader.uint64() as Long;\n          break;\n        case 5:\n          message.txHash = reader.string();\n          break;\n        case 6:\n          message.txIndex = reader.uint64() as Long;\n          break;\n        case 7:\n          message.blockHash = reader.string();\n          break;\n        case 8:\n          message.index = reader.uint64() as Long;\n          break;\n        case 9:\n          message.removed = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Log {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      topics: Array.isArray(object?.topics)\n        ? object.topics.map((e: any) => String(e))\n        : [],\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n      blockNumber: isSet(object.blockNumber)\n        ? Long.fromValue(object.blockNumber)\n        : Long.UZERO,\n      txHash: isSet(object.txHash) ? String(object.txHash) : \"\",\n      txIndex: isSet(object.txIndex)\n        ? Long.fromValue(object.txIndex)\n        : Long.UZERO,\n      blockHash: isSet(object.blockHash) ? String(object.blockHash) : \"\",\n      index: isSet(object.index) ? Long.fromValue(object.index) : Long.UZERO,\n      removed: isSet(object.removed) ? Boolean(object.removed) : false,\n    };\n  },\n\n  toJSON(message: Log): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    if (message.topics) {\n      obj.topics = message.topics.map((e) => e);\n    } else {\n      obj.topics = [];\n    }\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    message.blockNumber !== undefined &&\n      (obj.blockNumber = (message.blockNumber || Long.UZERO).toString());\n    message.txHash !== undefined && (obj.txHash = message.txHash);\n    message.txIndex !== undefined &&\n      (obj.txIndex = (message.txIndex || Long.UZERO).toString());\n    message.blockHash !== undefined && (obj.blockHash = message.blockHash);\n    message.index !== undefined &&\n      (obj.index = (message.index || Long.UZERO).toString());\n    message.removed !== undefined && (obj.removed = message.removed);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Log>, I>>(object: I): Log {\n    const message = createBaseLog();\n    message.address = object.address ?? \"\";\n    message.topics = object.topics?.map((e) => e) || [];\n    message.data = object.data ?? new Uint8Array();\n    message.blockNumber =\n      object.blockNumber !== undefined && object.blockNumber !== null\n        ? Long.fromValue(object.blockNumber)\n        : Long.UZERO;\n    message.txHash = object.txHash ?? \"\";\n    message.txIndex =\n      object.txIndex !== undefined && object.txIndex !== null\n        ? Long.fromValue(object.txIndex)\n        : Long.UZERO;\n    message.blockHash = object.blockHash ?? \"\";\n    message.index =\n      object.index !== undefined && object.index !== null\n        ? Long.fromValue(object.index)\n        : Long.UZERO;\n    message.removed = object.removed ?? false;\n    return message;\n  },\n};\n\nfunction createBaseTxResult(): TxResult {\n  return {\n    contractAddress: \"\",\n    bloom: new Uint8Array(),\n    txLogs: undefined,\n    ret: new Uint8Array(),\n    reverted: false,\n    gasUsed: Long.UZERO,\n  };\n}\n\nexport const TxResult = {\n  encode(\n    message: TxResult,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.contractAddress !== \"\") {\n      writer.uint32(10).string(message.contractAddress);\n    }\n    if (message.bloom.length !== 0) {\n      writer.uint32(18).bytes(message.bloom);\n    }\n    if (message.txLogs !== undefined) {\n      TransactionLogs.encode(message.txLogs, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.ret.length !== 0) {\n      writer.uint32(34).bytes(message.ret);\n    }\n    if (message.reverted === true) {\n      writer.uint32(40).bool(message.reverted);\n    }\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(48).uint64(message.gasUsed);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TxResult {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxResult();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.contractAddress = reader.string();\n          break;\n        case 2:\n          message.bloom = reader.bytes();\n          break;\n        case 3:\n          message.txLogs = TransactionLogs.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.ret = reader.bytes();\n          break;\n        case 5:\n          message.reverted = reader.bool();\n          break;\n        case 6:\n          message.gasUsed = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TxResult {\n    return {\n      contractAddress: isSet(object.contractAddress)\n        ? String(object.contractAddress)\n        : \"\",\n      bloom: isSet(object.bloom)\n        ? bytesFromBase64(object.bloom)\n        : new Uint8Array(),\n      txLogs: isSet(object.txLogs)\n        ? TransactionLogs.fromJSON(object.txLogs)\n        : undefined,\n      ret: isSet(object.ret) ? bytesFromBase64(object.ret) : new Uint8Array(),\n      reverted: isSet(object.reverted) ? Boolean(object.reverted) : false,\n      gasUsed: isSet(object.gasUsed)\n        ? Long.fromValue(object.gasUsed)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: TxResult): unknown {\n    const obj: any = {};\n    message.contractAddress !== undefined &&\n      (obj.contractAddress = message.contractAddress);\n    message.bloom !== undefined &&\n      (obj.bloom = base64FromBytes(\n        message.bloom !== undefined ? message.bloom : new Uint8Array()\n      ));\n    message.txLogs !== undefined &&\n      (obj.txLogs = message.txLogs\n        ? TransactionLogs.toJSON(message.txLogs)\n        : undefined);\n    message.ret !== undefined &&\n      (obj.ret = base64FromBytes(\n        message.ret !== undefined ? message.ret : new Uint8Array()\n      ));\n    message.reverted !== undefined && (obj.reverted = message.reverted);\n    message.gasUsed !== undefined &&\n      (obj.gasUsed = (message.gasUsed || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TxResult>, I>>(object: I): TxResult {\n    const message = createBaseTxResult();\n    message.contractAddress = object.contractAddress ?? \"\";\n    message.bloom = object.bloom ?? new Uint8Array();\n    message.txLogs =\n      object.txLogs !== undefined && object.txLogs !== null\n        ? TransactionLogs.fromPartial(object.txLogs)\n        : undefined;\n    message.ret = object.ret ?? new Uint8Array();\n    message.reverted = object.reverted ?? false;\n    message.gasUsed =\n      object.gasUsed !== undefined && object.gasUsed !== null\n        ? Long.fromValue(object.gasUsed)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseAccessTuple(): AccessTuple {\n  return { address: \"\", storageKeys: [] };\n}\n\nexport const AccessTuple = {\n  encode(\n    message: AccessTuple,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    for (const v of message.storageKeys) {\n      writer.uint32(18).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): AccessTuple {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAccessTuple();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          message.storageKeys.push(reader.string());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AccessTuple {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      storageKeys: Array.isArray(object?.storageKeys)\n        ? object.storageKeys.map((e: any) => String(e))\n        : [],\n    };\n  },\n\n  toJSON(message: AccessTuple): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    if (message.storageKeys) {\n      obj.storageKeys = message.storageKeys.map((e) => e);\n    } else {\n      obj.storageKeys = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<AccessTuple>, I>>(\n    object: I\n  ): AccessTuple {\n    const message = createBaseAccessTuple();\n    message.address = object.address ?? \"\";\n    message.storageKeys = object.storageKeys?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseTraceConfig(): TraceConfig {\n  return {\n    tracer: \"\",\n    timeout: \"\",\n    reexec: Long.UZERO,\n    disableStack: false,\n    disableStorage: false,\n    debug: false,\n    limit: 0,\n    overrides: undefined,\n    enableMemory: false,\n    enableReturnData: false,\n  };\n}\n\nexport const TraceConfig = {\n  encode(\n    message: TraceConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.tracer !== \"\") {\n      writer.uint32(10).string(message.tracer);\n    }\n    if (message.timeout !== \"\") {\n      writer.uint32(18).string(message.timeout);\n    }\n    if (!message.reexec.isZero()) {\n      writer.uint32(24).uint64(message.reexec);\n    }\n    if (message.disableStack === true) {\n      writer.uint32(40).bool(message.disableStack);\n    }\n    if (message.disableStorage === true) {\n      writer.uint32(48).bool(message.disableStorage);\n    }\n    if (message.debug === true) {\n      writer.uint32(64).bool(message.debug);\n    }\n    if (message.limit !== 0) {\n      writer.uint32(72).int32(message.limit);\n    }\n    if (message.overrides !== undefined) {\n      ChainConfig.encode(message.overrides, writer.uint32(82).fork()).ldelim();\n    }\n    if (message.enableMemory === true) {\n      writer.uint32(88).bool(message.enableMemory);\n    }\n    if (message.enableReturnData === true) {\n      writer.uint32(96).bool(message.enableReturnData);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TraceConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTraceConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.tracer = reader.string();\n          break;\n        case 2:\n          message.timeout = reader.string();\n          break;\n        case 3:\n          message.reexec = reader.uint64() as Long;\n          break;\n        case 5:\n          message.disableStack = reader.bool();\n          break;\n        case 6:\n          message.disableStorage = reader.bool();\n          break;\n        case 8:\n          message.debug = reader.bool();\n          break;\n        case 9:\n          message.limit = reader.int32();\n          break;\n        case 10:\n          message.overrides = ChainConfig.decode(reader, reader.uint32());\n          break;\n        case 11:\n          message.enableMemory = reader.bool();\n          break;\n        case 12:\n          message.enableReturnData = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TraceConfig {\n    return {\n      tracer: isSet(object.tracer) ? String(object.tracer) : \"\",\n      timeout: isSet(object.timeout) ? String(object.timeout) : \"\",\n      reexec: isSet(object.reexec) ? Long.fromValue(object.reexec) : Long.UZERO,\n      disableStack: isSet(object.disableStack)\n        ? Boolean(object.disableStack)\n        : false,\n      disableStorage: isSet(object.disableStorage)\n        ? Boolean(object.disableStorage)\n        : false,\n      debug: isSet(object.debug) ? Boolean(object.debug) : false,\n      limit: isSet(object.limit) ? Number(object.limit) : 0,\n      overrides: isSet(object.overrides)\n        ? ChainConfig.fromJSON(object.overrides)\n        : undefined,\n      enableMemory: isSet(object.enableMemory)\n        ? Boolean(object.enableMemory)\n        : false,\n      enableReturnData: isSet(object.enableReturnData)\n        ? Boolean(object.enableReturnData)\n        : false,\n    };\n  },\n\n  toJSON(message: TraceConfig): unknown {\n    const obj: any = {};\n    message.tracer !== undefined && (obj.tracer = message.tracer);\n    message.timeout !== undefined && (obj.timeout = message.timeout);\n    message.reexec !== undefined &&\n      (obj.reexec = (message.reexec || Long.UZERO).toString());\n    message.disableStack !== undefined &&\n      (obj.disableStack = message.disableStack);\n    message.disableStorage !== undefined &&\n      (obj.disableStorage = message.disableStorage);\n    message.debug !== undefined && (obj.debug = message.debug);\n    message.limit !== undefined && (obj.limit = Math.round(message.limit));\n    message.overrides !== undefined &&\n      (obj.overrides = message.overrides\n        ? ChainConfig.toJSON(message.overrides)\n        : undefined);\n    message.enableMemory !== undefined &&\n      (obj.enableMemory = message.enableMemory);\n    message.enableReturnData !== undefined &&\n      (obj.enableReturnData = message.enableReturnData);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TraceConfig>, I>>(\n    object: I\n  ): TraceConfig {\n    const message = createBaseTraceConfig();\n    message.tracer = object.tracer ?? \"\";\n    message.timeout = object.timeout ?? \"\";\n    message.reexec =\n      object.reexec !== undefined && object.reexec !== null\n        ? Long.fromValue(object.reexec)\n        : Long.UZERO;\n    message.disableStack = object.disableStack ?? false;\n    message.disableStorage = object.disableStorage ?? false;\n    message.debug = object.debug ?? false;\n    message.limit = object.limit ?? 0;\n    message.overrides =\n      object.overrides !== undefined && object.overrides !== null\n        ? ChainConfig.fromPartial(object.overrides)\n        : undefined;\n    message.enableMemory = object.enableMemory ?? false;\n    message.enableReturnData = object.enableReturnData ?? false;\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { AccessTuple, Log } from \"./evm\";\n\nexport const protobufPackage = \"ethermint.evm.v1\";\n\n/** MsgEthereumTx encapsulates an Ethereum transaction as an SDK message. */\nexport interface MsgEthereumTx {\n  /** inner transaction data */\n  data?: Any;\n  /** encoded storage size of the transaction */\n  size: number;\n  /** transaction hash in hex format */\n  hash: string;\n  /**\n   * ethereum signer address in hex format. This address value is checked\n   * against the address derived from the signature (V, R, S) using the\n   * secp256k1 elliptic curve\n   */\n  from: string;\n}\n\n/** LegacyTx is the transaction data of regular Ethereum transactions. */\nexport interface LegacyTx {\n  /** nonce corresponds to the account nonce (transaction sequence). */\n  nonce: Long;\n  /** gas price defines the value for each gas unit */\n  gasPrice: string;\n  /** gas defines the gas limit defined for the transaction. */\n  gas: Long;\n  /** hex formatted address of the recipient */\n  to: string;\n  /** value defines the unsigned integer value of the transaction amount. */\n  value: string;\n  /** input defines the data payload bytes of the transaction. */\n  data: Uint8Array;\n  /** v defines the signature value */\n  v: Uint8Array;\n  /** r defines the signature value */\n  r: Uint8Array;\n  /** s define the signature value */\n  s: Uint8Array;\n}\n\n/** AccessListTx is the data of EIP-2930 access list transactions. */\nexport interface AccessListTx {\n  /** destination EVM chain ID */\n  chainId: string;\n  /** nonce corresponds to the account nonce (transaction sequence). */\n  nonce: Long;\n  /** gas price defines the value for each gas unit */\n  gasPrice: string;\n  /** gas defines the gas limit defined for the transaction. */\n  gas: Long;\n  /** hex formatted address of the recipient */\n  to: string;\n  /** value defines the unsigned integer value of the transaction amount. */\n  value: string;\n  /** input defines the data payload bytes of the transaction. */\n  data: Uint8Array;\n  accesses: AccessTuple[];\n  /** v defines the signature value */\n  v: Uint8Array;\n  /** r defines the signature value */\n  r: Uint8Array;\n  /** s define the signature value */\n  s: Uint8Array;\n}\n\n/** DynamicFeeTx is the data of EIP-1559 dinamic fee transactions. */\nexport interface DynamicFeeTx {\n  /** destination EVM chain ID */\n  chainId: string;\n  /** nonce corresponds to the account nonce (transaction sequence). */\n  nonce: Long;\n  /** gas tip cap defines the max value for the gas tip */\n  gasTipCap: string;\n  /** gas fee cap defines the max value for the gas fee */\n  gasFeeCap: string;\n  /** gas defines the gas limit defined for the transaction. */\n  gas: Long;\n  /** hex formatted address of the recipient */\n  to: string;\n  /** value defines the the transaction amount. */\n  value: string;\n  /** input defines the data payload bytes of the transaction. */\n  data: Uint8Array;\n  accesses: AccessTuple[];\n  /** v defines the signature value */\n  v: Uint8Array;\n  /** r defines the signature value */\n  r: Uint8Array;\n  /** s define the signature value */\n  s: Uint8Array;\n}\n\nexport interface ExtensionOptionsEthereumTx {}\n\n/** MsgEthereumTxResponse defines the Msg/EthereumTx response type. */\nexport interface MsgEthereumTxResponse {\n  /**\n   * ethereum transaction hash in hex format. This hash differs from the\n   * Tendermint sha256 hash of the transaction bytes. See\n   * https://github.com/tendermint/tendermint/issues/6539 for reference\n   */\n  hash: string;\n  /**\n   * logs contains the transaction hash and the proto-compatible ethereum\n   * logs.\n   */\n  logs: Log[];\n  /**\n   * returned data from evm function (result or data supplied with revert\n   * opcode)\n   */\n  ret: Uint8Array;\n  /** vm error is the error returned by vm execution */\n  vmError: string;\n  /** gas consumed by the transaction */\n  gasUsed: Long;\n}\n\nfunction createBaseMsgEthereumTx(): MsgEthereumTx {\n  return { data: undefined, size: 0, hash: \"\", from: \"\" };\n}\n\nexport const MsgEthereumTx = {\n  encode(\n    message: MsgEthereumTx,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.data !== undefined) {\n      Any.encode(message.data, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.size !== 0) {\n      writer.uint32(17).double(message.size);\n    }\n    if (message.hash !== \"\") {\n      writer.uint32(26).string(message.hash);\n    }\n    if (message.from !== \"\") {\n      writer.uint32(34).string(message.from);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgEthereumTx {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgEthereumTx();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data = Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.size = reader.double();\n          break;\n        case 3:\n          message.hash = reader.string();\n          break;\n        case 4:\n          message.from = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgEthereumTx {\n    return {\n      data: isSet(object.data) ? Any.fromJSON(object.data) : undefined,\n      size: isSet(object.size) ? Number(object.size) : 0,\n      hash: isSet(object.hash) ? String(object.hash) : \"\",\n      from: isSet(object.from) ? String(object.from) : \"\",\n    };\n  },\n\n  toJSON(message: MsgEthereumTx): unknown {\n    const obj: any = {};\n    message.data !== undefined &&\n      (obj.data = message.data ? Any.toJSON(message.data) : undefined);\n    message.size !== undefined && (obj.size = message.size);\n    message.hash !== undefined && (obj.hash = message.hash);\n    message.from !== undefined && (obj.from = message.from);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgEthereumTx>, I>>(\n    object: I\n  ): MsgEthereumTx {\n    const message = createBaseMsgEthereumTx();\n    message.data =\n      object.data !== undefined && object.data !== null\n        ? Any.fromPartial(object.data)\n        : undefined;\n    message.size = object.size ?? 0;\n    message.hash = object.hash ?? \"\";\n    message.from = object.from ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseLegacyTx(): LegacyTx {\n  return {\n    nonce: Long.UZERO,\n    gasPrice: \"\",\n    gas: Long.UZERO,\n    to: \"\",\n    value: \"\",\n    data: new Uint8Array(),\n    v: new Uint8Array(),\n    r: new Uint8Array(),\n    s: new Uint8Array(),\n  };\n}\n\nexport const LegacyTx = {\n  encode(\n    message: LegacyTx,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.nonce.isZero()) {\n      writer.uint32(8).uint64(message.nonce);\n    }\n    if (message.gasPrice !== \"\") {\n      writer.uint32(18).string(message.gasPrice);\n    }\n    if (!message.gas.isZero()) {\n      writer.uint32(24).uint64(message.gas);\n    }\n    if (message.to !== \"\") {\n      writer.uint32(34).string(message.to);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(42).string(message.value);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(50).bytes(message.data);\n    }\n    if (message.v.length !== 0) {\n      writer.uint32(58).bytes(message.v);\n    }\n    if (message.r.length !== 0) {\n      writer.uint32(66).bytes(message.r);\n    }\n    if (message.s.length !== 0) {\n      writer.uint32(74).bytes(message.s);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): LegacyTx {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLegacyTx();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.nonce = reader.uint64() as Long;\n          break;\n        case 2:\n          message.gasPrice = reader.string();\n          break;\n        case 3:\n          message.gas = reader.uint64() as Long;\n          break;\n        case 4:\n          message.to = reader.string();\n          break;\n        case 5:\n          message.value = reader.string();\n          break;\n        case 6:\n          message.data = reader.bytes();\n          break;\n        case 7:\n          message.v = reader.bytes();\n          break;\n        case 8:\n          message.r = reader.bytes();\n          break;\n        case 9:\n          message.s = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): LegacyTx {\n    return {\n      nonce: isSet(object.nonce) ? Long.fromValue(object.nonce) : Long.UZERO,\n      gasPrice: isSet(object.gasPrice) ? String(object.gasPrice) : \"\",\n      gas: isSet(object.gas) ? Long.fromValue(object.gas) : Long.UZERO,\n      to: isSet(object.to) ? String(object.to) : \"\",\n      value: isSet(object.value) ? String(object.value) : \"\",\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n      v: isSet(object.v) ? bytesFromBase64(object.v) : new Uint8Array(),\n      r: isSet(object.r) ? bytesFromBase64(object.r) : new Uint8Array(),\n      s: isSet(object.s) ? bytesFromBase64(object.s) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: LegacyTx): unknown {\n    const obj: any = {};\n    message.nonce !== undefined &&\n      (obj.nonce = (message.nonce || Long.UZERO).toString());\n    message.gasPrice !== undefined && (obj.gasPrice = message.gasPrice);\n    message.gas !== undefined &&\n      (obj.gas = (message.gas || Long.UZERO).toString());\n    message.to !== undefined && (obj.to = message.to);\n    message.value !== undefined && (obj.value = message.value);\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    message.v !== undefined &&\n      (obj.v = base64FromBytes(\n        message.v !== undefined ? message.v : new Uint8Array()\n      ));\n    message.r !== undefined &&\n      (obj.r = base64FromBytes(\n        message.r !== undefined ? message.r : new Uint8Array()\n      ));\n    message.s !== undefined &&\n      (obj.s = base64FromBytes(\n        message.s !== undefined ? message.s : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<LegacyTx>, I>>(object: I): LegacyTx {\n    const message = createBaseLegacyTx();\n    message.nonce =\n      object.nonce !== undefined && object.nonce !== null\n        ? Long.fromValue(object.nonce)\n        : Long.UZERO;\n    message.gasPrice = object.gasPrice ?? \"\";\n    message.gas =\n      object.gas !== undefined && object.gas !== null\n        ? Long.fromValue(object.gas)\n        : Long.UZERO;\n    message.to = object.to ?? \"\";\n    message.value = object.value ?? \"\";\n    message.data = object.data ?? new Uint8Array();\n    message.v = object.v ?? new Uint8Array();\n    message.r = object.r ?? new Uint8Array();\n    message.s = object.s ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseAccessListTx(): AccessListTx {\n  return {\n    chainId: \"\",\n    nonce: Long.UZERO,\n    gasPrice: \"\",\n    gas: Long.UZERO,\n    to: \"\",\n    value: \"\",\n    data: new Uint8Array(),\n    accesses: [],\n    v: new Uint8Array(),\n    r: new Uint8Array(),\n    s: new Uint8Array(),\n  };\n}\n\nexport const AccessListTx = {\n  encode(\n    message: AccessListTx,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.chainId !== \"\") {\n      writer.uint32(10).string(message.chainId);\n    }\n    if (!message.nonce.isZero()) {\n      writer.uint32(16).uint64(message.nonce);\n    }\n    if (message.gasPrice !== \"\") {\n      writer.uint32(26).string(message.gasPrice);\n    }\n    if (!message.gas.isZero()) {\n      writer.uint32(32).uint64(message.gas);\n    }\n    if (message.to !== \"\") {\n      writer.uint32(42).string(message.to);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(50).string(message.value);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(58).bytes(message.data);\n    }\n    for (const v of message.accesses) {\n      AccessTuple.encode(v!, writer.uint32(66).fork()).ldelim();\n    }\n    if (message.v.length !== 0) {\n      writer.uint32(74).bytes(message.v);\n    }\n    if (message.r.length !== 0) {\n      writer.uint32(82).bytes(message.r);\n    }\n    if (message.s.length !== 0) {\n      writer.uint32(90).bytes(message.s);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): AccessListTx {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAccessListTx();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.chainId = reader.string();\n          break;\n        case 2:\n          message.nonce = reader.uint64() as Long;\n          break;\n        case 3:\n          message.gasPrice = reader.string();\n          break;\n        case 4:\n          message.gas = reader.uint64() as Long;\n          break;\n        case 5:\n          message.to = reader.string();\n          break;\n        case 6:\n          message.value = reader.string();\n          break;\n        case 7:\n          message.data = reader.bytes();\n          break;\n        case 8:\n          message.accesses.push(AccessTuple.decode(reader, reader.uint32()));\n          break;\n        case 9:\n          message.v = reader.bytes();\n          break;\n        case 10:\n          message.r = reader.bytes();\n          break;\n        case 11:\n          message.s = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AccessListTx {\n    return {\n      chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n      nonce: isSet(object.nonce) ? Long.fromValue(object.nonce) : Long.UZERO,\n      gasPrice: isSet(object.gasPrice) ? String(object.gasPrice) : \"\",\n      gas: isSet(object.gas) ? Long.fromValue(object.gas) : Long.UZERO,\n      to: isSet(object.to) ? String(object.to) : \"\",\n      value: isSet(object.value) ? String(object.value) : \"\",\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n      accesses: Array.isArray(object?.accesses)\n        ? object.accesses.map((e: any) => AccessTuple.fromJSON(e))\n        : [],\n      v: isSet(object.v) ? bytesFromBase64(object.v) : new Uint8Array(),\n      r: isSet(object.r) ? bytesFromBase64(object.r) : new Uint8Array(),\n      s: isSet(object.s) ? bytesFromBase64(object.s) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: AccessListTx): unknown {\n    const obj: any = {};\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.nonce !== undefined &&\n      (obj.nonce = (message.nonce || Long.UZERO).toString());\n    message.gasPrice !== undefined && (obj.gasPrice = message.gasPrice);\n    message.gas !== undefined &&\n      (obj.gas = (message.gas || Long.UZERO).toString());\n    message.to !== undefined && (obj.to = message.to);\n    message.value !== undefined && (obj.value = message.value);\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    if (message.accesses) {\n      obj.accesses = message.accesses.map((e) =>\n        e ? AccessTuple.toJSON(e) : undefined\n      );\n    } else {\n      obj.accesses = [];\n    }\n    message.v !== undefined &&\n      (obj.v = base64FromBytes(\n        message.v !== undefined ? message.v : new Uint8Array()\n      ));\n    message.r !== undefined &&\n      (obj.r = base64FromBytes(\n        message.r !== undefined ? message.r : new Uint8Array()\n      ));\n    message.s !== undefined &&\n      (obj.s = base64FromBytes(\n        message.s !== undefined ? message.s : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<AccessListTx>, I>>(\n    object: I\n  ): AccessListTx {\n    const message = createBaseAccessListTx();\n    message.chainId = object.chainId ?? \"\";\n    message.nonce =\n      object.nonce !== undefined && object.nonce !== null\n        ? Long.fromValue(object.nonce)\n        : Long.UZERO;\n    message.gasPrice = object.gasPrice ?? \"\";\n    message.gas =\n      object.gas !== undefined && object.gas !== null\n        ? Long.fromValue(object.gas)\n        : Long.UZERO;\n    message.to = object.to ?? \"\";\n    message.value = object.value ?? \"\";\n    message.data = object.data ?? new Uint8Array();\n    message.accesses =\n      object.accesses?.map((e) => AccessTuple.fromPartial(e)) || [];\n    message.v = object.v ?? new Uint8Array();\n    message.r = object.r ?? new Uint8Array();\n    message.s = object.s ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseDynamicFeeTx(): DynamicFeeTx {\n  return {\n    chainId: \"\",\n    nonce: Long.UZERO,\n    gasTipCap: \"\",\n    gasFeeCap: \"\",\n    gas: Long.UZERO,\n    to: \"\",\n    value: \"\",\n    data: new Uint8Array(),\n    accesses: [],\n    v: new Uint8Array(),\n    r: new Uint8Array(),\n    s: new Uint8Array(),\n  };\n}\n\nexport const DynamicFeeTx = {\n  encode(\n    message: DynamicFeeTx,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.chainId !== \"\") {\n      writer.uint32(10).string(message.chainId);\n    }\n    if (!message.nonce.isZero()) {\n      writer.uint32(16).uint64(message.nonce);\n    }\n    if (message.gasTipCap !== \"\") {\n      writer.uint32(26).string(message.gasTipCap);\n    }\n    if (message.gasFeeCap !== \"\") {\n      writer.uint32(34).string(message.gasFeeCap);\n    }\n    if (!message.gas.isZero()) {\n      writer.uint32(40).uint64(message.gas);\n    }\n    if (message.to !== \"\") {\n      writer.uint32(50).string(message.to);\n    }\n    if (message.value !== \"\") {\n      writer.uint32(58).string(message.value);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(66).bytes(message.data);\n    }\n    for (const v of message.accesses) {\n      AccessTuple.encode(v!, writer.uint32(74).fork()).ldelim();\n    }\n    if (message.v.length !== 0) {\n      writer.uint32(82).bytes(message.v);\n    }\n    if (message.r.length !== 0) {\n      writer.uint32(90).bytes(message.r);\n    }\n    if (message.s.length !== 0) {\n      writer.uint32(98).bytes(message.s);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DynamicFeeTx {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDynamicFeeTx();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.chainId = reader.string();\n          break;\n        case 2:\n          message.nonce = reader.uint64() as Long;\n          break;\n        case 3:\n          message.gasTipCap = reader.string();\n          break;\n        case 4:\n          message.gasFeeCap = reader.string();\n          break;\n        case 5:\n          message.gas = reader.uint64() as Long;\n          break;\n        case 6:\n          message.to = reader.string();\n          break;\n        case 7:\n          message.value = reader.string();\n          break;\n        case 8:\n          message.data = reader.bytes();\n          break;\n        case 9:\n          message.accesses.push(AccessTuple.decode(reader, reader.uint32()));\n          break;\n        case 10:\n          message.v = reader.bytes();\n          break;\n        case 11:\n          message.r = reader.bytes();\n          break;\n        case 12:\n          message.s = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DynamicFeeTx {\n    return {\n      chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n      nonce: isSet(object.nonce) ? Long.fromValue(object.nonce) : Long.UZERO,\n      gasTipCap: isSet(object.gasTipCap) ? String(object.gasTipCap) : \"\",\n      gasFeeCap: isSet(object.gasFeeCap) ? String(object.gasFeeCap) : \"\",\n      gas: isSet(object.gas) ? Long.fromValue(object.gas) : Long.UZERO,\n      to: isSet(object.to) ? String(object.to) : \"\",\n      value: isSet(object.value) ? String(object.value) : \"\",\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n      accesses: Array.isArray(object?.accesses)\n        ? object.accesses.map((e: any) => AccessTuple.fromJSON(e))\n        : [],\n      v: isSet(object.v) ? bytesFromBase64(object.v) : new Uint8Array(),\n      r: isSet(object.r) ? bytesFromBase64(object.r) : new Uint8Array(),\n      s: isSet(object.s) ? bytesFromBase64(object.s) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: DynamicFeeTx): unknown {\n    const obj: any = {};\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.nonce !== undefined &&\n      (obj.nonce = (message.nonce || Long.UZERO).toString());\n    message.gasTipCap !== undefined && (obj.gasTipCap = message.gasTipCap);\n    message.gasFeeCap !== undefined && (obj.gasFeeCap = message.gasFeeCap);\n    message.gas !== undefined &&\n      (obj.gas = (message.gas || Long.UZERO).toString());\n    message.to !== undefined && (obj.to = message.to);\n    message.value !== undefined && (obj.value = message.value);\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    if (message.accesses) {\n      obj.accesses = message.accesses.map((e) =>\n        e ? AccessTuple.toJSON(e) : undefined\n      );\n    } else {\n      obj.accesses = [];\n    }\n    message.v !== undefined &&\n      (obj.v = base64FromBytes(\n        message.v !== undefined ? message.v : new Uint8Array()\n      ));\n    message.r !== undefined &&\n      (obj.r = base64FromBytes(\n        message.r !== undefined ? message.r : new Uint8Array()\n      ));\n    message.s !== undefined &&\n      (obj.s = base64FromBytes(\n        message.s !== undefined ? message.s : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DynamicFeeTx>, I>>(\n    object: I\n  ): DynamicFeeTx {\n    const message = createBaseDynamicFeeTx();\n    message.chainId = object.chainId ?? \"\";\n    message.nonce =\n      object.nonce !== undefined && object.nonce !== null\n        ? Long.fromValue(object.nonce)\n        : Long.UZERO;\n    message.gasTipCap = object.gasTipCap ?? \"\";\n    message.gasFeeCap = object.gasFeeCap ?? \"\";\n    message.gas =\n      object.gas !== undefined && object.gas !== null\n        ? Long.fromValue(object.gas)\n        : Long.UZERO;\n    message.to = object.to ?? \"\";\n    message.value = object.value ?? \"\";\n    message.data = object.data ?? new Uint8Array();\n    message.accesses =\n      object.accesses?.map((e) => AccessTuple.fromPartial(e)) || [];\n    message.v = object.v ?? new Uint8Array();\n    message.r = object.r ?? new Uint8Array();\n    message.s = object.s ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseExtensionOptionsEthereumTx(): ExtensionOptionsEthereumTx {\n  return {};\n}\n\nexport const ExtensionOptionsEthereumTx = {\n  encode(\n    _: ExtensionOptionsEthereumTx,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): ExtensionOptionsEthereumTx {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseExtensionOptionsEthereumTx();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): ExtensionOptionsEthereumTx {\n    return {};\n  },\n\n  toJSON(_: ExtensionOptionsEthereumTx): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ExtensionOptionsEthereumTx>, I>>(\n    _: I\n  ): ExtensionOptionsEthereumTx {\n    const message = createBaseExtensionOptionsEthereumTx();\n    return message;\n  },\n};\n\nfunction createBaseMsgEthereumTxResponse(): MsgEthereumTxResponse {\n  return {\n    hash: \"\",\n    logs: [],\n    ret: new Uint8Array(),\n    vmError: \"\",\n    gasUsed: Long.UZERO,\n  };\n}\n\nexport const MsgEthereumTxResponse = {\n  encode(\n    message: MsgEthereumTxResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.hash !== \"\") {\n      writer.uint32(10).string(message.hash);\n    }\n    for (const v of message.logs) {\n      Log.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.ret.length !== 0) {\n      writer.uint32(26).bytes(message.ret);\n    }\n    if (message.vmError !== \"\") {\n      writer.uint32(34).string(message.vmError);\n    }\n    if (!message.gasUsed.isZero()) {\n      writer.uint32(40).uint64(message.gasUsed);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgEthereumTxResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgEthereumTxResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.string();\n          break;\n        case 2:\n          message.logs.push(Log.decode(reader, reader.uint32()));\n          break;\n        case 3:\n          message.ret = reader.bytes();\n          break;\n        case 4:\n          message.vmError = reader.string();\n          break;\n        case 5:\n          message.gasUsed = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgEthereumTxResponse {\n    return {\n      hash: isSet(object.hash) ? String(object.hash) : \"\",\n      logs: Array.isArray(object?.logs)\n        ? object.logs.map((e: any) => Log.fromJSON(e))\n        : [],\n      ret: isSet(object.ret) ? bytesFromBase64(object.ret) : new Uint8Array(),\n      vmError: isSet(object.vmError) ? String(object.vmError) : \"\",\n      gasUsed: isSet(object.gasUsed)\n        ? Long.fromValue(object.gasUsed)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: MsgEthereumTxResponse): unknown {\n    const obj: any = {};\n    message.hash !== undefined && (obj.hash = message.hash);\n    if (message.logs) {\n      obj.logs = message.logs.map((e) => (e ? Log.toJSON(e) : undefined));\n    } else {\n      obj.logs = [];\n    }\n    message.ret !== undefined &&\n      (obj.ret = base64FromBytes(\n        message.ret !== undefined ? message.ret : new Uint8Array()\n      ));\n    message.vmError !== undefined && (obj.vmError = message.vmError);\n    message.gasUsed !== undefined &&\n      (obj.gasUsed = (message.gasUsed || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgEthereumTxResponse>, I>>(\n    object: I\n  ): MsgEthereumTxResponse {\n    const message = createBaseMsgEthereumTxResponse();\n    message.hash = object.hash ?? \"\";\n    message.logs = object.logs?.map((e) => Log.fromPartial(e)) || [];\n    message.ret = object.ret ?? new Uint8Array();\n    message.vmError = object.vmError ?? \"\";\n    message.gasUsed =\n      object.gasUsed !== undefined && object.gasUsed !== null\n        ? Long.fromValue(object.gasUsed)\n        : Long.UZERO;\n    return message;\n  },\n};\n\n/** Msg defines the evm Msg service. */\nexport interface Msg {\n  /** EthereumTx defines a method submitting Ethereum transactions. */\n  EthereumTx(\n    request: DeepPartial<MsgEthereumTx>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgEthereumTxResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.EthereumTx = this.EthereumTx.bind(this);\n  }\n\n  EthereumTx(\n    request: DeepPartial<MsgEthereumTx>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgEthereumTxResponse> {\n    return this.rpc.unary(\n      MsgEthereumTxDesc,\n      MsgEthereumTx.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"ethermint.evm.v1.Msg\",\n};\n\nexport const MsgEthereumTxDesc: UnaryMethodDefinitionish = {\n  methodName: \"EthereumTx\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgEthereumTx.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgEthereumTxResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgEthereumTx as MsgEthereumTx_pb\n} from \"../proto/ethermint/evm/v1/tx\";\n\nexport class MsgEthereumTx extends BaseMsg {\n  public protoMsg: MsgEthereumTx_pb;\n  constructor(msg: MsgEthereumTx_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgEthereumTx.typeUrl,\n      value: MsgEthereumTx_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgEthereumTx {\n  export const typeUrl: string = `/${protobufPackage}.MsgEthereumTx`;\n  export const Proto = MsgEthereumTx_pb;\n  export interface Proto extends MsgEthereumTx_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"metaoslabs.metaos.nft\";\n\n/** MsgSend represents a message to send a nft from one account to another account. */\nexport interface MsgSend {\n  /** class_id defines the unique identifier of the nft classification, similar to the contract address of ERC721 */\n  classId: string;\n  /** id defines the unique identification of nft */\n  id: string;\n  /** sender is the address of the owner of nft */\n  sender: string;\n  /** receiver is the receiver address of nft */\n  receiver: string;\n}\n\n/** MsgSendResponse defines the Msg/Send response type. */\nexport interface MsgSendResponse {}\n\nfunction createBaseMsgSend(): MsgSend {\n  return { classId: \"\", id: \"\", sender: \"\", receiver: \"\" };\n}\n\nexport const MsgSend = {\n  encode(\n    message: MsgSend,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.classId !== \"\") {\n      writer.uint32(10).string(message.classId);\n    }\n    if (message.id !== \"\") {\n      writer.uint32(18).string(message.id);\n    }\n    if (message.sender !== \"\") {\n      writer.uint32(26).string(message.sender);\n    }\n    if (message.receiver !== \"\") {\n      writer.uint32(34).string(message.receiver);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSend {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSend();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.classId = reader.string();\n          break;\n        case 2:\n          message.id = reader.string();\n          break;\n        case 3:\n          message.sender = reader.string();\n          break;\n        case 4:\n          message.receiver = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSend {\n    return {\n      classId: isSet(object.classId) ? String(object.classId) : \"\",\n      id: isSet(object.id) ? String(object.id) : \"\",\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      receiver: isSet(object.receiver) ? String(object.receiver) : \"\",\n    };\n  },\n\n  toJSON(message: MsgSend): unknown {\n    const obj: any = {};\n    message.classId !== undefined && (obj.classId = message.classId);\n    message.id !== undefined && (obj.id = message.id);\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.receiver !== undefined && (obj.receiver = message.receiver);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSend>, I>>(object: I): MsgSend {\n    const message = createBaseMsgSend();\n    message.classId = object.classId ?? \"\";\n    message.id = object.id ?? \"\";\n    message.sender = object.sender ?? \"\";\n    message.receiver = object.receiver ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgSendResponse(): MsgSendResponse {\n  return {};\n}\n\nexport const MsgSendResponse = {\n  encode(\n    _: MsgSendResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSendResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSendResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSendResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSendResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSendResponse>, I>>(\n    _: I\n  ): MsgSendResponse {\n    const message = createBaseMsgSendResponse();\n    return message;\n  },\n};\n\n/** Msg defines the Msg service. */\nexport interface Msg {\n  /** this line is used by starport scaffolding # proto/tx/rpc */\n  Send(\n    request: DeepPartial<MsgSend>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSendResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.Send = this.Send.bind(this);\n  }\n\n  Send(\n    request: DeepPartial<MsgSend>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSendResponse> {\n    return this.rpc.unary(MsgSendDesc, MsgSend.fromPartial(request), metadata);\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"metaoslabs.metaos.nft.Msg\",\n};\n\nexport const MsgSendDesc: UnaryMethodDefinitionish = {\n  methodName: \"Send\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSend.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSendResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgSend as MsgSend_pb,\n} from \"../proto/nft/tx\";\n\nexport class MsgSendNft extends BaseMsg {\n  public protoMsg: MsgSend_pb;\n  constructor(msg: MsgSend_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSendNft.typeUrl,\n      value: MsgSend_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSendNft {\n  export const typeUrl: string = `/${protobufPackage}.MsgSend`;\n  export const Proto = MsgSend_pb;\n  export interface Proto extends MsgSend_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Duration } from \"../google/protobuf/duration\";\n\nexport const protobufPackage = \"metaoslabs.metaos.poolincentives\";\n\nexport interface RandSwapRewardSubConfig {\n  title: string;\n  /** the total reward of weight in hundredths of a bip, i.e. 1e-6 */\n  weight: number;\n  numberOfReveal: number;\n}\n\nexport interface RandSwapRewardConfig {\n  id: Long;\n  enabled: boolean;\n  intervalPeriod?: Duration;\n  mintable: boolean;\n  owner: string;\n  denom: string;\n  decimal: number;\n  totalReward: string;\n  subConfigs: RandSwapRewardSubConfig[];\n  pools: string[];\n}\n\nexport interface RandSwapRewardDenom {\n  denom: string;\n  configId: Long;\n}\n\nexport interface RandSwapRewardRound {\n  configId: Long;\n  round: Long;\n}\n\nexport interface RandSwapRewardRoundWithConfig {\n  configId: Long;\n  round: Long;\n  rewardConfig?: RandSwapRewardConfig;\n}\n\nexport interface RandSwapRewardRoundSequencer {\n  configId: Long;\n  round: Long;\n  sequence: Long;\n}\n\nexport interface RandSwapRewardRoundSequence {\n  configId: Long;\n  round: Long;\n  sequence: Long;\n  address: string;\n}\n\nexport interface RandSwapPoolReward {\n  address: string;\n  configIds: Long[];\n}\n\nexport interface RandSwapRewardReveal {\n  configId: Long;\n  round: Long;\n  config?: RandSwapRewardConfig;\n  subConfigEachReward: string[];\n  winnerSequences: Long[];\n}\n\nexport interface RandSwapAccountReward {\n  account: string;\n  denom: string;\n  amount: string;\n}\n\nexport interface RandSwapSequenceClear {\n  configId: Long;\n  round: Long;\n}\n\nfunction createBaseRandSwapRewardSubConfig(): RandSwapRewardSubConfig {\n  return { title: \"\", weight: 0, numberOfReveal: 0 };\n}\n\nexport const RandSwapRewardSubConfig = {\n  encode(\n    message: RandSwapRewardSubConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.title !== \"\") {\n      writer.uint32(10).string(message.title);\n    }\n    if (message.weight !== 0) {\n      writer.uint32(16).int32(message.weight);\n    }\n    if (message.numberOfReveal !== 0) {\n      writer.uint32(24).uint32(message.numberOfReveal);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapRewardSubConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardSubConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.title = reader.string();\n          break;\n        case 2:\n          message.weight = reader.int32();\n          break;\n        case 3:\n          message.numberOfReveal = reader.uint32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardSubConfig {\n    return {\n      title: isSet(object.title) ? String(object.title) : \"\",\n      weight: isSet(object.weight) ? Number(object.weight) : 0,\n      numberOfReveal: isSet(object.numberOfReveal)\n        ? Number(object.numberOfReveal)\n        : 0,\n    };\n  },\n\n  toJSON(message: RandSwapRewardSubConfig): unknown {\n    const obj: any = {};\n    message.title !== undefined && (obj.title = message.title);\n    message.weight !== undefined && (obj.weight = Math.round(message.weight));\n    message.numberOfReveal !== undefined &&\n      (obj.numberOfReveal = Math.round(message.numberOfReveal));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardSubConfig>, I>>(\n    object: I\n  ): RandSwapRewardSubConfig {\n    const message = createBaseRandSwapRewardSubConfig();\n    message.title = object.title ?? \"\";\n    message.weight = object.weight ?? 0;\n    message.numberOfReveal = object.numberOfReveal ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseRandSwapRewardConfig(): RandSwapRewardConfig {\n  return {\n    id: Long.UZERO,\n    enabled: false,\n    intervalPeriod: undefined,\n    mintable: false,\n    owner: \"\",\n    denom: \"\",\n    decimal: 0,\n    totalReward: \"\",\n    subConfigs: [],\n    pools: [],\n  };\n}\n\nexport const RandSwapRewardConfig = {\n  encode(\n    message: RandSwapRewardConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.id.isZero()) {\n      writer.uint32(8).uint64(message.id);\n    }\n    if (message.enabled === true) {\n      writer.uint32(16).bool(message.enabled);\n    }\n    if (message.intervalPeriod !== undefined) {\n      Duration.encode(\n        message.intervalPeriod,\n        writer.uint32(26).fork()\n      ).ldelim();\n    }\n    if (message.mintable === true) {\n      writer.uint32(32).bool(message.mintable);\n    }\n    if (message.owner !== \"\") {\n      writer.uint32(42).string(message.owner);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(50).string(message.denom);\n    }\n    if (message.decimal !== 0) {\n      writer.uint32(56).int32(message.decimal);\n    }\n    if (message.totalReward !== \"\") {\n      writer.uint32(66).string(message.totalReward);\n    }\n    for (const v of message.subConfigs) {\n      RandSwapRewardSubConfig.encode(v!, writer.uint32(74).fork()).ldelim();\n    }\n    for (const v of message.pools) {\n      writer.uint32(82).string(v!);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapRewardConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.uint64() as Long;\n          break;\n        case 2:\n          message.enabled = reader.bool();\n          break;\n        case 3:\n          message.intervalPeriod = Duration.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.mintable = reader.bool();\n          break;\n        case 5:\n          message.owner = reader.string();\n          break;\n        case 6:\n          message.denom = reader.string();\n          break;\n        case 7:\n          message.decimal = reader.int32();\n          break;\n        case 8:\n          message.totalReward = reader.string();\n          break;\n        case 9:\n          message.subConfigs.push(\n            RandSwapRewardSubConfig.decode(reader, reader.uint32())\n          );\n          break;\n        case 10:\n          message.pools.push(reader.string());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardConfig {\n    return {\n      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,\n      enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n      intervalPeriod: isSet(object.intervalPeriod)\n        ? Duration.fromJSON(object.intervalPeriod)\n        : undefined,\n      mintable: isSet(object.mintable) ? Boolean(object.mintable) : false,\n      owner: isSet(object.owner) ? String(object.owner) : \"\",\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      decimal: isSet(object.decimal) ? Number(object.decimal) : 0,\n      totalReward: isSet(object.totalReward) ? String(object.totalReward) : \"\",\n      subConfigs: Array.isArray(object?.subConfigs)\n        ? object.subConfigs.map((e: any) => RandSwapRewardSubConfig.fromJSON(e))\n        : [],\n      pools: Array.isArray(object?.pools)\n        ? object.pools.map((e: any) => String(e))\n        : [],\n    };\n  },\n\n  toJSON(message: RandSwapRewardConfig): unknown {\n    const obj: any = {};\n    message.id !== undefined &&\n      (obj.id = (message.id || Long.UZERO).toString());\n    message.enabled !== undefined && (obj.enabled = message.enabled);\n    message.intervalPeriod !== undefined &&\n      (obj.intervalPeriod = message.intervalPeriod\n        ? Duration.toJSON(message.intervalPeriod)\n        : undefined);\n    message.mintable !== undefined && (obj.mintable = message.mintable);\n    message.owner !== undefined && (obj.owner = message.owner);\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.decimal !== undefined &&\n      (obj.decimal = Math.round(message.decimal));\n    message.totalReward !== undefined &&\n      (obj.totalReward = message.totalReward);\n    if (message.subConfigs) {\n      obj.subConfigs = message.subConfigs.map((e) =>\n        e ? RandSwapRewardSubConfig.toJSON(e) : undefined\n      );\n    } else {\n      obj.subConfigs = [];\n    }\n    if (message.pools) {\n      obj.pools = message.pools.map((e) => e);\n    } else {\n      obj.pools = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardConfig>, I>>(\n    object: I\n  ): RandSwapRewardConfig {\n    const message = createBaseRandSwapRewardConfig();\n    message.id =\n      object.id !== undefined && object.id !== null\n        ? Long.fromValue(object.id)\n        : Long.UZERO;\n    message.enabled = object.enabled ?? false;\n    message.intervalPeriod =\n      object.intervalPeriod !== undefined && object.intervalPeriod !== null\n        ? Duration.fromPartial(object.intervalPeriod)\n        : undefined;\n    message.mintable = object.mintable ?? false;\n    message.owner = object.owner ?? \"\";\n    message.denom = object.denom ?? \"\";\n    message.decimal = object.decimal ?? 0;\n    message.totalReward = object.totalReward ?? \"\";\n    message.subConfigs =\n      object.subConfigs?.map((e) => RandSwapRewardSubConfig.fromPartial(e)) ||\n      [];\n    message.pools = object.pools?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseRandSwapRewardDenom(): RandSwapRewardDenom {\n  return { denom: \"\", configId: Long.UZERO };\n}\n\nexport const RandSwapRewardDenom = {\n  encode(\n    message: RandSwapRewardDenom,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): RandSwapRewardDenom {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardDenom();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardDenom {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: RandSwapRewardDenom): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardDenom>, I>>(\n    object: I\n  ): RandSwapRewardDenom {\n    const message = createBaseRandSwapRewardDenom();\n    message.denom = object.denom ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseRandSwapRewardRound(): RandSwapRewardRound {\n  return { configId: Long.UZERO, round: Long.UZERO };\n}\n\nexport const RandSwapRewardRound = {\n  encode(\n    message: RandSwapRewardRound,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.configId.isZero()) {\n      writer.uint32(8).uint64(message.configId);\n    }\n    if (!message.round.isZero()) {\n      writer.uint32(16).uint64(message.round);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): RandSwapRewardRound {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardRound();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.round = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardRound {\n    return {\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      round: isSet(object.round) ? Long.fromValue(object.round) : Long.UZERO,\n    };\n  },\n\n  toJSON(message: RandSwapRewardRound): unknown {\n    const obj: any = {};\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.round !== undefined &&\n      (obj.round = (message.round || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardRound>, I>>(\n    object: I\n  ): RandSwapRewardRound {\n    const message = createBaseRandSwapRewardRound();\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.round =\n      object.round !== undefined && object.round !== null\n        ? Long.fromValue(object.round)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseRandSwapRewardRoundWithConfig(): RandSwapRewardRoundWithConfig {\n  return { configId: Long.UZERO, round: Long.UZERO, rewardConfig: undefined };\n}\n\nexport const RandSwapRewardRoundWithConfig = {\n  encode(\n    message: RandSwapRewardRoundWithConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.configId.isZero()) {\n      writer.uint32(8).uint64(message.configId);\n    }\n    if (!message.round.isZero()) {\n      writer.uint32(16).uint64(message.round);\n    }\n    if (message.rewardConfig !== undefined) {\n      RandSwapRewardConfig.encode(\n        message.rewardConfig,\n        writer.uint32(26).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapRewardRoundWithConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardRoundWithConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.round = reader.uint64() as Long;\n          break;\n        case 3:\n          message.rewardConfig = RandSwapRewardConfig.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardRoundWithConfig {\n    return {\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      round: isSet(object.round) ? Long.fromValue(object.round) : Long.UZERO,\n      rewardConfig: isSet(object.rewardConfig)\n        ? RandSwapRewardConfig.fromJSON(object.rewardConfig)\n        : undefined,\n    };\n  },\n\n  toJSON(message: RandSwapRewardRoundWithConfig): unknown {\n    const obj: any = {};\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.round !== undefined &&\n      (obj.round = (message.round || Long.UZERO).toString());\n    message.rewardConfig !== undefined &&\n      (obj.rewardConfig = message.rewardConfig\n        ? RandSwapRewardConfig.toJSON(message.rewardConfig)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardRoundWithConfig>, I>>(\n    object: I\n  ): RandSwapRewardRoundWithConfig {\n    const message = createBaseRandSwapRewardRoundWithConfig();\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.round =\n      object.round !== undefined && object.round !== null\n        ? Long.fromValue(object.round)\n        : Long.UZERO;\n    message.rewardConfig =\n      object.rewardConfig !== undefined && object.rewardConfig !== null\n        ? RandSwapRewardConfig.fromPartial(object.rewardConfig)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseRandSwapRewardRoundSequencer(): RandSwapRewardRoundSequencer {\n  return { configId: Long.UZERO, round: Long.UZERO, sequence: Long.UZERO };\n}\n\nexport const RandSwapRewardRoundSequencer = {\n  encode(\n    message: RandSwapRewardRoundSequencer,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.configId.isZero()) {\n      writer.uint32(8).uint64(message.configId);\n    }\n    if (!message.round.isZero()) {\n      writer.uint32(16).uint64(message.round);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapRewardRoundSequencer {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardRoundSequencer();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.round = reader.uint64() as Long;\n          break;\n        case 3:\n          message.sequence = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardRoundSequencer {\n    return {\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      round: isSet(object.round) ? Long.fromValue(object.round) : Long.UZERO,\n      sequence: isSet(object.sequence)\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: RandSwapRewardRoundSequencer): unknown {\n    const obj: any = {};\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.round !== undefined &&\n      (obj.round = (message.round || Long.UZERO).toString());\n    message.sequence !== undefined &&\n      (obj.sequence = (message.sequence || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardRoundSequencer>, I>>(\n    object: I\n  ): RandSwapRewardRoundSequencer {\n    const message = createBaseRandSwapRewardRoundSequencer();\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.round =\n      object.round !== undefined && object.round !== null\n        ? Long.fromValue(object.round)\n        : Long.UZERO;\n    message.sequence =\n      object.sequence !== undefined && object.sequence !== null\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseRandSwapRewardRoundSequence(): RandSwapRewardRoundSequence {\n  return {\n    configId: Long.UZERO,\n    round: Long.UZERO,\n    sequence: Long.UZERO,\n    address: \"\",\n  };\n}\n\nexport const RandSwapRewardRoundSequence = {\n  encode(\n    message: RandSwapRewardRoundSequence,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.configId.isZero()) {\n      writer.uint32(8).uint64(message.configId);\n    }\n    if (!message.round.isZero()) {\n      writer.uint32(16).uint64(message.round);\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(34).string(message.address);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapRewardRoundSequence {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardRoundSequence();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.round = reader.uint64() as Long;\n          break;\n        case 3:\n          message.sequence = reader.uint64() as Long;\n          break;\n        case 4:\n          message.address = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardRoundSequence {\n    return {\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      round: isSet(object.round) ? Long.fromValue(object.round) : Long.UZERO,\n      sequence: isSet(object.sequence)\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO,\n      address: isSet(object.address) ? String(object.address) : \"\",\n    };\n  },\n\n  toJSON(message: RandSwapRewardRoundSequence): unknown {\n    const obj: any = {};\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.round !== undefined &&\n      (obj.round = (message.round || Long.UZERO).toString());\n    message.sequence !== undefined &&\n      (obj.sequence = (message.sequence || Long.UZERO).toString());\n    message.address !== undefined && (obj.address = message.address);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardRoundSequence>, I>>(\n    object: I\n  ): RandSwapRewardRoundSequence {\n    const message = createBaseRandSwapRewardRoundSequence();\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.round =\n      object.round !== undefined && object.round !== null\n        ? Long.fromValue(object.round)\n        : Long.UZERO;\n    message.sequence =\n      object.sequence !== undefined && object.sequence !== null\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO;\n    message.address = object.address ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseRandSwapPoolReward(): RandSwapPoolReward {\n  return { address: \"\", configIds: [] };\n}\n\nexport const RandSwapPoolReward = {\n  encode(\n    message: RandSwapPoolReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    writer.uint32(18).fork();\n    for (const v of message.configIds) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): RandSwapPoolReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapPoolReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.configIds.push(reader.uint64() as Long);\n            }\n          } else {\n            message.configIds.push(reader.uint64() as Long);\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapPoolReward {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      configIds: Array.isArray(object?.configIds)\n        ? object.configIds.map((e: any) => Long.fromValue(e))\n        : [],\n    };\n  },\n\n  toJSON(message: RandSwapPoolReward): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    if (message.configIds) {\n      obj.configIds = message.configIds.map((e) =>\n        (e || Long.UZERO).toString()\n      );\n    } else {\n      obj.configIds = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapPoolReward>, I>>(\n    object: I\n  ): RandSwapPoolReward {\n    const message = createBaseRandSwapPoolReward();\n    message.address = object.address ?? \"\";\n    message.configIds = object.configIds?.map((e) => Long.fromValue(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseRandSwapRewardReveal(): RandSwapRewardReveal {\n  return {\n    configId: Long.UZERO,\n    round: Long.UZERO,\n    config: undefined,\n    subConfigEachReward: [],\n    winnerSequences: [],\n  };\n}\n\nexport const RandSwapRewardReveal = {\n  encode(\n    message: RandSwapRewardReveal,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.configId.isZero()) {\n      writer.uint32(8).uint64(message.configId);\n    }\n    if (!message.round.isZero()) {\n      writer.uint32(16).uint64(message.round);\n    }\n    if (message.config !== undefined) {\n      RandSwapRewardConfig.encode(\n        message.config,\n        writer.uint32(26).fork()\n      ).ldelim();\n    }\n    for (const v of message.subConfigEachReward) {\n      writer.uint32(34).string(v!);\n    }\n    writer.uint32(42).fork();\n    for (const v of message.winnerSequences) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapRewardReveal {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapRewardReveal();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.round = reader.uint64() as Long;\n          break;\n        case 3:\n          message.config = RandSwapRewardConfig.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.subConfigEachReward.push(reader.string());\n          break;\n        case 5:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.winnerSequences.push(reader.uint64() as Long);\n            }\n          } else {\n            message.winnerSequences.push(reader.uint64() as Long);\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapRewardReveal {\n    return {\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      round: isSet(object.round) ? Long.fromValue(object.round) : Long.UZERO,\n      config: isSet(object.config)\n        ? RandSwapRewardConfig.fromJSON(object.config)\n        : undefined,\n      subConfigEachReward: Array.isArray(object?.subConfigEachReward)\n        ? object.subConfigEachReward.map((e: any) => String(e))\n        : [],\n      winnerSequences: Array.isArray(object?.winnerSequences)\n        ? object.winnerSequences.map((e: any) => Long.fromValue(e))\n        : [],\n    };\n  },\n\n  toJSON(message: RandSwapRewardReveal): unknown {\n    const obj: any = {};\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.round !== undefined &&\n      (obj.round = (message.round || Long.UZERO).toString());\n    message.config !== undefined &&\n      (obj.config = message.config\n        ? RandSwapRewardConfig.toJSON(message.config)\n        : undefined);\n    if (message.subConfigEachReward) {\n      obj.subConfigEachReward = message.subConfigEachReward.map((e) => e);\n    } else {\n      obj.subConfigEachReward = [];\n    }\n    if (message.winnerSequences) {\n      obj.winnerSequences = message.winnerSequences.map((e) =>\n        (e || Long.UZERO).toString()\n      );\n    } else {\n      obj.winnerSequences = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapRewardReveal>, I>>(\n    object: I\n  ): RandSwapRewardReveal {\n    const message = createBaseRandSwapRewardReveal();\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.round =\n      object.round !== undefined && object.round !== null\n        ? Long.fromValue(object.round)\n        : Long.UZERO;\n    message.config =\n      object.config !== undefined && object.config !== null\n        ? RandSwapRewardConfig.fromPartial(object.config)\n        : undefined;\n    message.subConfigEachReward =\n      object.subConfigEachReward?.map((e) => e) || [];\n    message.winnerSequences =\n      object.winnerSequences?.map((e) => Long.fromValue(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseRandSwapAccountReward(): RandSwapAccountReward {\n  return { account: \"\", denom: \"\", amount: \"\" };\n}\n\nexport const RandSwapAccountReward = {\n  encode(\n    message: RandSwapAccountReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.account !== \"\") {\n      writer.uint32(10).string(message.account);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(18).string(message.denom);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(26).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapAccountReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapAccountReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.account = reader.string();\n          break;\n        case 2:\n          message.denom = reader.string();\n          break;\n        case 3:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapAccountReward {\n    return {\n      account: isSet(object.account) ? String(object.account) : \"\",\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: RandSwapAccountReward): unknown {\n    const obj: any = {};\n    message.account !== undefined && (obj.account = message.account);\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapAccountReward>, I>>(\n    object: I\n  ): RandSwapAccountReward {\n    const message = createBaseRandSwapAccountReward();\n    message.account = object.account ?? \"\";\n    message.denom = object.denom ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseRandSwapSequenceClear(): RandSwapSequenceClear {\n  return { configId: Long.UZERO, round: Long.UZERO };\n}\n\nexport const RandSwapSequenceClear = {\n  encode(\n    message: RandSwapSequenceClear,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.configId.isZero()) {\n      writer.uint32(8).uint64(message.configId);\n    }\n    if (!message.round.isZero()) {\n      writer.uint32(16).uint64(message.round);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RandSwapSequenceClear {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRandSwapSequenceClear();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.round = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RandSwapSequenceClear {\n    return {\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      round: isSet(object.round) ? Long.fromValue(object.round) : Long.UZERO,\n    };\n  },\n\n  toJSON(message: RandSwapSequenceClear): unknown {\n    const obj: any = {};\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.round !== undefined &&\n      (obj.round = (message.round || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RandSwapSequenceClear>, I>>(\n    object: I\n  ): RandSwapSequenceClear {\n    const message = createBaseRandSwapSequenceClear();\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.round =\n      object.round !== undefined && object.round !== null\n        ? Long.fromValue(object.round)\n        : Long.UZERO;\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"metaoslabs.metaos.poolincentives\";\n\nexport interface LiquidityRewardSubConfig {\n  /** the pool address */\n  address: string;\n  /** the total reward of weight in hundredths of a bip, i.e. 1e-6 */\n  weight: number;\n  /** the index of reward configs */\n  index: number;\n}\n\nexport interface LiquidityRewardConfig {\n  id: Long;\n  enabled: boolean;\n  mintable: boolean;\n  owner: string;\n  denom: string;\n  decimal: number;\n  totalRewardPerDay: string;\n  subConfigs: LiquidityRewardSubConfig[];\n}\n\nexport interface LiquidityRewardDenom {\n  denom: string;\n  configId: Long;\n}\n\nexport interface LiquidityPoolReward {\n  address: string;\n  configIds: Long[];\n}\n\nfunction createBaseLiquidityRewardSubConfig(): LiquidityRewardSubConfig {\n  return { address: \"\", weight: 0, index: 0 };\n}\n\nexport const LiquidityRewardSubConfig = {\n  encode(\n    message: LiquidityRewardSubConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    if (message.weight !== 0) {\n      writer.uint32(16).int32(message.weight);\n    }\n    if (message.index !== 0) {\n      writer.uint32(24).uint32(message.index);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): LiquidityRewardSubConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLiquidityRewardSubConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          message.weight = reader.int32();\n          break;\n        case 3:\n          message.index = reader.uint32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): LiquidityRewardSubConfig {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      weight: isSet(object.weight) ? Number(object.weight) : 0,\n      index: isSet(object.index) ? Number(object.index) : 0,\n    };\n  },\n\n  toJSON(message: LiquidityRewardSubConfig): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    message.weight !== undefined && (obj.weight = Math.round(message.weight));\n    message.index !== undefined && (obj.index = Math.round(message.index));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<LiquidityRewardSubConfig>, I>>(\n    object: I\n  ): LiquidityRewardSubConfig {\n    const message = createBaseLiquidityRewardSubConfig();\n    message.address = object.address ?? \"\";\n    message.weight = object.weight ?? 0;\n    message.index = object.index ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseLiquidityRewardConfig(): LiquidityRewardConfig {\n  return {\n    id: Long.UZERO,\n    enabled: false,\n    mintable: false,\n    owner: \"\",\n    denom: \"\",\n    decimal: 0,\n    totalRewardPerDay: \"\",\n    subConfigs: [],\n  };\n}\n\nexport const LiquidityRewardConfig = {\n  encode(\n    message: LiquidityRewardConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.id.isZero()) {\n      writer.uint32(8).uint64(message.id);\n    }\n    if (message.enabled === true) {\n      writer.uint32(16).bool(message.enabled);\n    }\n    if (message.mintable === true) {\n      writer.uint32(24).bool(message.mintable);\n    }\n    if (message.owner !== \"\") {\n      writer.uint32(34).string(message.owner);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(42).string(message.denom);\n    }\n    if (message.decimal !== 0) {\n      writer.uint32(48).int32(message.decimal);\n    }\n    if (message.totalRewardPerDay !== \"\") {\n      writer.uint32(58).string(message.totalRewardPerDay);\n    }\n    for (const v of message.subConfigs) {\n      LiquidityRewardSubConfig.encode(v!, writer.uint32(66).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): LiquidityRewardConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLiquidityRewardConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.id = reader.uint64() as Long;\n          break;\n        case 2:\n          message.enabled = reader.bool();\n          break;\n        case 3:\n          message.mintable = reader.bool();\n          break;\n        case 4:\n          message.owner = reader.string();\n          break;\n        case 5:\n          message.denom = reader.string();\n          break;\n        case 6:\n          message.decimal = reader.int32();\n          break;\n        case 7:\n          message.totalRewardPerDay = reader.string();\n          break;\n        case 8:\n          message.subConfigs.push(\n            LiquidityRewardSubConfig.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): LiquidityRewardConfig {\n    return {\n      id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,\n      enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n      mintable: isSet(object.mintable) ? Boolean(object.mintable) : false,\n      owner: isSet(object.owner) ? String(object.owner) : \"\",\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      decimal: isSet(object.decimal) ? Number(object.decimal) : 0,\n      totalRewardPerDay: isSet(object.totalRewardPerDay)\n        ? String(object.totalRewardPerDay)\n        : \"\",\n      subConfigs: Array.isArray(object?.subConfigs)\n        ? object.subConfigs.map((e: any) =>\n            LiquidityRewardSubConfig.fromJSON(e)\n          )\n        : [],\n    };\n  },\n\n  toJSON(message: LiquidityRewardConfig): unknown {\n    const obj: any = {};\n    message.id !== undefined &&\n      (obj.id = (message.id || Long.UZERO).toString());\n    message.enabled !== undefined && (obj.enabled = message.enabled);\n    message.mintable !== undefined && (obj.mintable = message.mintable);\n    message.owner !== undefined && (obj.owner = message.owner);\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.decimal !== undefined &&\n      (obj.decimal = Math.round(message.decimal));\n    message.totalRewardPerDay !== undefined &&\n      (obj.totalRewardPerDay = message.totalRewardPerDay);\n    if (message.subConfigs) {\n      obj.subConfigs = message.subConfigs.map((e) =>\n        e ? LiquidityRewardSubConfig.toJSON(e) : undefined\n      );\n    } else {\n      obj.subConfigs = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<LiquidityRewardConfig>, I>>(\n    object: I\n  ): LiquidityRewardConfig {\n    const message = createBaseLiquidityRewardConfig();\n    message.id =\n      object.id !== undefined && object.id !== null\n        ? Long.fromValue(object.id)\n        : Long.UZERO;\n    message.enabled = object.enabled ?? false;\n    message.mintable = object.mintable ?? false;\n    message.owner = object.owner ?? \"\";\n    message.denom = object.denom ?? \"\";\n    message.decimal = object.decimal ?? 0;\n    message.totalRewardPerDay = object.totalRewardPerDay ?? \"\";\n    message.subConfigs =\n      object.subConfigs?.map((e) => LiquidityRewardSubConfig.fromPartial(e)) ||\n      [];\n    return message;\n  },\n};\n\nfunction createBaseLiquidityRewardDenom(): LiquidityRewardDenom {\n  return { denom: \"\", configId: Long.UZERO };\n}\n\nexport const LiquidityRewardDenom = {\n  encode(\n    message: LiquidityRewardDenom,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): LiquidityRewardDenom {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLiquidityRewardDenom();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): LiquidityRewardDenom {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: LiquidityRewardDenom): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<LiquidityRewardDenom>, I>>(\n    object: I\n  ): LiquidityRewardDenom {\n    const message = createBaseLiquidityRewardDenom();\n    message.denom = object.denom ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseLiquidityPoolReward(): LiquidityPoolReward {\n  return { address: \"\", configIds: [] };\n}\n\nexport const LiquidityPoolReward = {\n  encode(\n    message: LiquidityPoolReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    writer.uint32(18).fork();\n    for (const v of message.configIds) {\n      writer.uint64(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): LiquidityPoolReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLiquidityPoolReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.configIds.push(reader.uint64() as Long);\n            }\n          } else {\n            message.configIds.push(reader.uint64() as Long);\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): LiquidityPoolReward {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      configIds: Array.isArray(object?.configIds)\n        ? object.configIds.map((e: any) => Long.fromValue(e))\n        : [],\n    };\n  },\n\n  toJSON(message: LiquidityPoolReward): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    if (message.configIds) {\n      obj.configIds = message.configIds.map((e) =>\n        (e || Long.UZERO).toString()\n      );\n    } else {\n      obj.configIds = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<LiquidityPoolReward>, I>>(\n    object: I\n  ): LiquidityPoolReward {\n    const message = createBaseLiquidityPoolReward();\n    message.address = object.address ?? \"\";\n    message.configIds = object.configIds?.map((e) => Long.fromValue(e)) || [];\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { RandSwapRewardConfig } from \"./rand_swap_reward\";\nimport { LiquidityRewardConfig } from \"./liquidity_reward\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"metaoslabs.metaos.poolincentives\";\n\nexport interface MsgCreateRandSwapRewardConfig {\n  creator: string;\n  config?: RandSwapRewardConfig;\n}\n\nexport interface MsgCreateRandSwapRewardConfigResponse {}\n\nexport interface MsgOpenRandSwapReward {\n  creator: string;\n  configId: Long;\n}\n\nexport interface MsgOpenRandSwapRewardResponse {}\n\nexport interface MsgCloseRandSwapReward {\n  creator: string;\n  configId: Long;\n}\n\nexport interface MsgCloseRandSwapRewardResponse {}\n\nexport interface MsgUpdateRandSwapRewardConfig {\n  creator: string;\n  configId: Long;\n  config?: RandSwapRewardConfig;\n}\n\nexport interface MsgUpdateRandSwapRewardConfigResponse {}\n\nexport interface MsgCollectRandSwapReward {\n  creator: string;\n  denom: string;\n  recipient: string;\n}\n\nexport interface MsgCollectRandSwapRewardResponse {}\n\nexport interface MsgCreateLiquidityRewardConfig {\n  creator: string;\n  config?: LiquidityRewardConfig;\n}\n\nexport interface MsgCreateLiquidityRewardConfigResponse {}\n\nexport interface MsgUpdateLiquidityRewardConfig {\n  creator: string;\n  configId: Long;\n  config?: LiquidityRewardConfig;\n}\n\nexport interface MsgUpdateLiquidityRewardConfigResponse {}\n\nexport interface MsgOpenLiquidityReward {\n  creator: string;\n  configId: Long;\n}\n\nexport interface MsgOpenLiquidityRewardResponse {}\n\nexport interface MsgCloseLiquidityReward {\n  creator: string;\n  configId: Long;\n}\n\nexport interface MsgCloseLiquidityRewardResponse {}\n\nfunction createBaseMsgCreateRandSwapRewardConfig(): MsgCreateRandSwapRewardConfig {\n  return { creator: \"\", config: undefined };\n}\n\nexport const MsgCreateRandSwapRewardConfig = {\n  encode(\n    message: MsgCreateRandSwapRewardConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.config !== undefined) {\n      RandSwapRewardConfig.encode(\n        message.config,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreateRandSwapRewardConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateRandSwapRewardConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.config = RandSwapRewardConfig.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreateRandSwapRewardConfig {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      config: isSet(object.config)\n        ? RandSwapRewardConfig.fromJSON(object.config)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgCreateRandSwapRewardConfig): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.config !== undefined &&\n      (obj.config = message.config\n        ? RandSwapRewardConfig.toJSON(message.config)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreateRandSwapRewardConfig>, I>>(\n    object: I\n  ): MsgCreateRandSwapRewardConfig {\n    const message = createBaseMsgCreateRandSwapRewardConfig();\n    message.creator = object.creator ?? \"\";\n    message.config =\n      object.config !== undefined && object.config !== null\n        ? RandSwapRewardConfig.fromPartial(object.config)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgCreateRandSwapRewardConfigResponse(): MsgCreateRandSwapRewardConfigResponse {\n  return {};\n}\n\nexport const MsgCreateRandSwapRewardConfigResponse = {\n  encode(\n    _: MsgCreateRandSwapRewardConfigResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreateRandSwapRewardConfigResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateRandSwapRewardConfigResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreateRandSwapRewardConfigResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreateRandSwapRewardConfigResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<MsgCreateRandSwapRewardConfigResponse>, I>\n  >(_: I): MsgCreateRandSwapRewardConfigResponse {\n    const message = createBaseMsgCreateRandSwapRewardConfigResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgOpenRandSwapReward(): MsgOpenRandSwapReward {\n  return { creator: \"\", configId: Long.UZERO };\n}\n\nexport const MsgOpenRandSwapReward = {\n  encode(\n    message: MsgOpenRandSwapReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgOpenRandSwapReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgOpenRandSwapReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgOpenRandSwapReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: MsgOpenRandSwapReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgOpenRandSwapReward>, I>>(\n    object: I\n  ): MsgOpenRandSwapReward {\n    const message = createBaseMsgOpenRandSwapReward();\n    message.creator = object.creator ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgOpenRandSwapRewardResponse(): MsgOpenRandSwapRewardResponse {\n  return {};\n}\n\nexport const MsgOpenRandSwapRewardResponse = {\n  encode(\n    _: MsgOpenRandSwapRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgOpenRandSwapRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgOpenRandSwapRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgOpenRandSwapRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgOpenRandSwapRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgOpenRandSwapRewardResponse>, I>>(\n    _: I\n  ): MsgOpenRandSwapRewardResponse {\n    const message = createBaseMsgOpenRandSwapRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCloseRandSwapReward(): MsgCloseRandSwapReward {\n  return { creator: \"\", configId: Long.UZERO };\n}\n\nexport const MsgCloseRandSwapReward = {\n  encode(\n    message: MsgCloseRandSwapReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCloseRandSwapReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCloseRandSwapReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCloseRandSwapReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: MsgCloseRandSwapReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCloseRandSwapReward>, I>>(\n    object: I\n  ): MsgCloseRandSwapReward {\n    const message = createBaseMsgCloseRandSwapReward();\n    message.creator = object.creator ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgCloseRandSwapRewardResponse(): MsgCloseRandSwapRewardResponse {\n  return {};\n}\n\nexport const MsgCloseRandSwapRewardResponse = {\n  encode(\n    _: MsgCloseRandSwapRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCloseRandSwapRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCloseRandSwapRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCloseRandSwapRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCloseRandSwapRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCloseRandSwapRewardResponse>, I>>(\n    _: I\n  ): MsgCloseRandSwapRewardResponse {\n    const message = createBaseMsgCloseRandSwapRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgUpdateRandSwapRewardConfig(): MsgUpdateRandSwapRewardConfig {\n  return { creator: \"\", configId: Long.UZERO, config: undefined };\n}\n\nexport const MsgUpdateRandSwapRewardConfig = {\n  encode(\n    message: MsgUpdateRandSwapRewardConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    if (message.config !== undefined) {\n      RandSwapRewardConfig.encode(\n        message.config,\n        writer.uint32(26).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgUpdateRandSwapRewardConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUpdateRandSwapRewardConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 3:\n          message.config = RandSwapRewardConfig.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgUpdateRandSwapRewardConfig {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      config: isSet(object.config)\n        ? RandSwapRewardConfig.fromJSON(object.config)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgUpdateRandSwapRewardConfig): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.config !== undefined &&\n      (obj.config = message.config\n        ? RandSwapRewardConfig.toJSON(message.config)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgUpdateRandSwapRewardConfig>, I>>(\n    object: I\n  ): MsgUpdateRandSwapRewardConfig {\n    const message = createBaseMsgUpdateRandSwapRewardConfig();\n    message.creator = object.creator ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.config =\n      object.config !== undefined && object.config !== null\n        ? RandSwapRewardConfig.fromPartial(object.config)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgUpdateRandSwapRewardConfigResponse(): MsgUpdateRandSwapRewardConfigResponse {\n  return {};\n}\n\nexport const MsgUpdateRandSwapRewardConfigResponse = {\n  encode(\n    _: MsgUpdateRandSwapRewardConfigResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgUpdateRandSwapRewardConfigResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUpdateRandSwapRewardConfigResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgUpdateRandSwapRewardConfigResponse {\n    return {};\n  },\n\n  toJSON(_: MsgUpdateRandSwapRewardConfigResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<MsgUpdateRandSwapRewardConfigResponse>, I>\n  >(_: I): MsgUpdateRandSwapRewardConfigResponse {\n    const message = createBaseMsgUpdateRandSwapRewardConfigResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectRandSwapReward(): MsgCollectRandSwapReward {\n  return { creator: \"\", denom: \"\", recipient: \"\" };\n}\n\nexport const MsgCollectRandSwapReward = {\n  encode(\n    message: MsgCollectRandSwapReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(18).string(message.denom);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectRandSwapReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectRandSwapReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.denom = reader.string();\n          break;\n        case 3:\n          message.recipient = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCollectRandSwapReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n    };\n  },\n\n  toJSON(message: MsgCollectRandSwapReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectRandSwapReward>, I>>(\n    object: I\n  ): MsgCollectRandSwapReward {\n    const message = createBaseMsgCollectRandSwapReward();\n    message.creator = object.creator ?? \"\";\n    message.denom = object.denom ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectRandSwapRewardResponse(): MsgCollectRandSwapRewardResponse {\n  return {};\n}\n\nexport const MsgCollectRandSwapRewardResponse = {\n  encode(\n    _: MsgCollectRandSwapRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectRandSwapRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectRandSwapRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCollectRandSwapRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCollectRandSwapRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<MsgCollectRandSwapRewardResponse>, I>\n  >(_: I): MsgCollectRandSwapRewardResponse {\n    const message = createBaseMsgCollectRandSwapRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCreateLiquidityRewardConfig(): MsgCreateLiquidityRewardConfig {\n  return { creator: \"\", config: undefined };\n}\n\nexport const MsgCreateLiquidityRewardConfig = {\n  encode(\n    message: MsgCreateLiquidityRewardConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.config !== undefined) {\n      LiquidityRewardConfig.encode(\n        message.config,\n        writer.uint32(26).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreateLiquidityRewardConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateLiquidityRewardConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 3:\n          message.config = LiquidityRewardConfig.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreateLiquidityRewardConfig {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      config: isSet(object.config)\n        ? LiquidityRewardConfig.fromJSON(object.config)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgCreateLiquidityRewardConfig): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.config !== undefined &&\n      (obj.config = message.config\n        ? LiquidityRewardConfig.toJSON(message.config)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreateLiquidityRewardConfig>, I>>(\n    object: I\n  ): MsgCreateLiquidityRewardConfig {\n    const message = createBaseMsgCreateLiquidityRewardConfig();\n    message.creator = object.creator ?? \"\";\n    message.config =\n      object.config !== undefined && object.config !== null\n        ? LiquidityRewardConfig.fromPartial(object.config)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgCreateLiquidityRewardConfigResponse(): MsgCreateLiquidityRewardConfigResponse {\n  return {};\n}\n\nexport const MsgCreateLiquidityRewardConfigResponse = {\n  encode(\n    _: MsgCreateLiquidityRewardConfigResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreateLiquidityRewardConfigResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateLiquidityRewardConfigResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreateLiquidityRewardConfigResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreateLiquidityRewardConfigResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<MsgCreateLiquidityRewardConfigResponse>, I>\n  >(_: I): MsgCreateLiquidityRewardConfigResponse {\n    const message = createBaseMsgCreateLiquidityRewardConfigResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgUpdateLiquidityRewardConfig(): MsgUpdateLiquidityRewardConfig {\n  return { creator: \"\", configId: Long.UZERO, config: undefined };\n}\n\nexport const MsgUpdateLiquidityRewardConfig = {\n  encode(\n    message: MsgUpdateLiquidityRewardConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    if (message.config !== undefined) {\n      LiquidityRewardConfig.encode(\n        message.config,\n        writer.uint32(34).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgUpdateLiquidityRewardConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUpdateLiquidityRewardConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        case 4:\n          message.config = LiquidityRewardConfig.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgUpdateLiquidityRewardConfig {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n      config: isSet(object.config)\n        ? LiquidityRewardConfig.fromJSON(object.config)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgUpdateLiquidityRewardConfig): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    message.config !== undefined &&\n      (obj.config = message.config\n        ? LiquidityRewardConfig.toJSON(message.config)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgUpdateLiquidityRewardConfig>, I>>(\n    object: I\n  ): MsgUpdateLiquidityRewardConfig {\n    const message = createBaseMsgUpdateLiquidityRewardConfig();\n    message.creator = object.creator ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    message.config =\n      object.config !== undefined && object.config !== null\n        ? LiquidityRewardConfig.fromPartial(object.config)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgUpdateLiquidityRewardConfigResponse(): MsgUpdateLiquidityRewardConfigResponse {\n  return {};\n}\n\nexport const MsgUpdateLiquidityRewardConfigResponse = {\n  encode(\n    _: MsgUpdateLiquidityRewardConfigResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgUpdateLiquidityRewardConfigResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUpdateLiquidityRewardConfigResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgUpdateLiquidityRewardConfigResponse {\n    return {};\n  },\n\n  toJSON(_: MsgUpdateLiquidityRewardConfigResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<MsgUpdateLiquidityRewardConfigResponse>, I>\n  >(_: I): MsgUpdateLiquidityRewardConfigResponse {\n    const message = createBaseMsgUpdateLiquidityRewardConfigResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgOpenLiquidityReward(): MsgOpenLiquidityReward {\n  return { creator: \"\", configId: Long.UZERO };\n}\n\nexport const MsgOpenLiquidityReward = {\n  encode(\n    message: MsgOpenLiquidityReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgOpenLiquidityReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgOpenLiquidityReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgOpenLiquidityReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: MsgOpenLiquidityReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgOpenLiquidityReward>, I>>(\n    object: I\n  ): MsgOpenLiquidityReward {\n    const message = createBaseMsgOpenLiquidityReward();\n    message.creator = object.creator ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgOpenLiquidityRewardResponse(): MsgOpenLiquidityRewardResponse {\n  return {};\n}\n\nexport const MsgOpenLiquidityRewardResponse = {\n  encode(\n    _: MsgOpenLiquidityRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgOpenLiquidityRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgOpenLiquidityRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgOpenLiquidityRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgOpenLiquidityRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgOpenLiquidityRewardResponse>, I>>(\n    _: I\n  ): MsgOpenLiquidityRewardResponse {\n    const message = createBaseMsgOpenLiquidityRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCloseLiquidityReward(): MsgCloseLiquidityReward {\n  return { creator: \"\", configId: Long.UZERO };\n}\n\nexport const MsgCloseLiquidityReward = {\n  encode(\n    message: MsgCloseLiquidityReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (!message.configId.isZero()) {\n      writer.uint32(16).uint64(message.configId);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCloseLiquidityReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCloseLiquidityReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.configId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCloseLiquidityReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      configId: isSet(object.configId)\n        ? Long.fromValue(object.configId)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: MsgCloseLiquidityReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.configId !== undefined &&\n      (obj.configId = (message.configId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCloseLiquidityReward>, I>>(\n    object: I\n  ): MsgCloseLiquidityReward {\n    const message = createBaseMsgCloseLiquidityReward();\n    message.creator = object.creator ?? \"\";\n    message.configId =\n      object.configId !== undefined && object.configId !== null\n        ? Long.fromValue(object.configId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgCloseLiquidityRewardResponse(): MsgCloseLiquidityRewardResponse {\n  return {};\n}\n\nexport const MsgCloseLiquidityRewardResponse = {\n  encode(\n    _: MsgCloseLiquidityRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCloseLiquidityRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCloseLiquidityRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCloseLiquidityRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCloseLiquidityRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCloseLiquidityRewardResponse>, I>>(\n    _: I\n  ): MsgCloseLiquidityRewardResponse {\n    const message = createBaseMsgCloseLiquidityRewardResponse();\n    return message;\n  },\n};\n\n/** Msg defines the Msg service. */\nexport interface Msg {\n  CreateRandSwapRewardConfig(\n    request: DeepPartial<MsgCreateRandSwapRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateRandSwapRewardConfigResponse>;\n  UpdateRandSwapRewardConfig(\n    request: DeepPartial<MsgUpdateRandSwapRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUpdateRandSwapRewardConfigResponse>;\n  OpenRandSwapReward(\n    request: DeepPartial<MsgOpenRandSwapReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgOpenRandSwapRewardResponse>;\n  CloseRandSwapReward(\n    request: DeepPartial<MsgCloseRandSwapReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCloseRandSwapRewardResponse>;\n  CollectRandSwapReward(\n    request: DeepPartial<MsgCollectRandSwapReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectRandSwapRewardResponse>;\n  CreateLiquidityRewardConfig(\n    request: DeepPartial<MsgCreateLiquidityRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateLiquidityRewardConfigResponse>;\n  UpdateLiquidityRewardConfig(\n    request: DeepPartial<MsgUpdateLiquidityRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUpdateLiquidityRewardConfigResponse>;\n  OpenLiquidityReward(\n    request: DeepPartial<MsgOpenLiquidityReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgOpenLiquidityRewardResponse>;\n  /** this line is used by starport scaffolding # proto/tx/rpc */\n  CloseLiquidityReward(\n    request: DeepPartial<MsgCloseLiquidityReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCloseLiquidityRewardResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.CreateRandSwapRewardConfig =\n      this.CreateRandSwapRewardConfig.bind(this);\n    this.UpdateRandSwapRewardConfig =\n      this.UpdateRandSwapRewardConfig.bind(this);\n    this.OpenRandSwapReward = this.OpenRandSwapReward.bind(this);\n    this.CloseRandSwapReward = this.CloseRandSwapReward.bind(this);\n    this.CollectRandSwapReward = this.CollectRandSwapReward.bind(this);\n    this.CreateLiquidityRewardConfig =\n      this.CreateLiquidityRewardConfig.bind(this);\n    this.UpdateLiquidityRewardConfig =\n      this.UpdateLiquidityRewardConfig.bind(this);\n    this.OpenLiquidityReward = this.OpenLiquidityReward.bind(this);\n    this.CloseLiquidityReward = this.CloseLiquidityReward.bind(this);\n  }\n\n  CreateRandSwapRewardConfig(\n    request: DeepPartial<MsgCreateRandSwapRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateRandSwapRewardConfigResponse> {\n    return this.rpc.unary(\n      MsgCreateRandSwapRewardConfigDesc,\n      MsgCreateRandSwapRewardConfig.fromPartial(request),\n      metadata\n    );\n  }\n\n  UpdateRandSwapRewardConfig(\n    request: DeepPartial<MsgUpdateRandSwapRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUpdateRandSwapRewardConfigResponse> {\n    return this.rpc.unary(\n      MsgUpdateRandSwapRewardConfigDesc,\n      MsgUpdateRandSwapRewardConfig.fromPartial(request),\n      metadata\n    );\n  }\n\n  OpenRandSwapReward(\n    request: DeepPartial<MsgOpenRandSwapReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgOpenRandSwapRewardResponse> {\n    return this.rpc.unary(\n      MsgOpenRandSwapRewardDesc,\n      MsgOpenRandSwapReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  CloseRandSwapReward(\n    request: DeepPartial<MsgCloseRandSwapReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCloseRandSwapRewardResponse> {\n    return this.rpc.unary(\n      MsgCloseRandSwapRewardDesc,\n      MsgCloseRandSwapReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  CollectRandSwapReward(\n    request: DeepPartial<MsgCollectRandSwapReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectRandSwapRewardResponse> {\n    return this.rpc.unary(\n      MsgCollectRandSwapRewardDesc,\n      MsgCollectRandSwapReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  CreateLiquidityRewardConfig(\n    request: DeepPartial<MsgCreateLiquidityRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateLiquidityRewardConfigResponse> {\n    return this.rpc.unary(\n      MsgCreateLiquidityRewardConfigDesc,\n      MsgCreateLiquidityRewardConfig.fromPartial(request),\n      metadata\n    );\n  }\n\n  UpdateLiquidityRewardConfig(\n    request: DeepPartial<MsgUpdateLiquidityRewardConfig>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUpdateLiquidityRewardConfigResponse> {\n    return this.rpc.unary(\n      MsgUpdateLiquidityRewardConfigDesc,\n      MsgUpdateLiquidityRewardConfig.fromPartial(request),\n      metadata\n    );\n  }\n\n  OpenLiquidityReward(\n    request: DeepPartial<MsgOpenLiquidityReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgOpenLiquidityRewardResponse> {\n    return this.rpc.unary(\n      MsgOpenLiquidityRewardDesc,\n      MsgOpenLiquidityReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  CloseLiquidityReward(\n    request: DeepPartial<MsgCloseLiquidityReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCloseLiquidityRewardResponse> {\n    return this.rpc.unary(\n      MsgCloseLiquidityRewardDesc,\n      MsgCloseLiquidityReward.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"metaoslabs.metaos.poolincentives.Msg\",\n};\n\nexport const MsgCreateRandSwapRewardConfigDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreateRandSwapRewardConfig\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreateRandSwapRewardConfig.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreateRandSwapRewardConfigResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgUpdateRandSwapRewardConfigDesc: UnaryMethodDefinitionish = {\n  methodName: \"UpdateRandSwapRewardConfig\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgUpdateRandSwapRewardConfig.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgUpdateRandSwapRewardConfigResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgOpenRandSwapRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"OpenRandSwapReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgOpenRandSwapReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgOpenRandSwapRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCloseRandSwapRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"CloseRandSwapReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCloseRandSwapReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCloseRandSwapRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCollectRandSwapRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"CollectRandSwapReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCollectRandSwapReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCollectRandSwapRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCreateLiquidityRewardConfigDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreateLiquidityRewardConfig\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreateLiquidityRewardConfig.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreateLiquidityRewardConfigResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgUpdateLiquidityRewardConfigDesc: UnaryMethodDefinitionish = {\n  methodName: \"UpdateLiquidityRewardConfig\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgUpdateLiquidityRewardConfig.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgUpdateLiquidityRewardConfigResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgOpenLiquidityRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"OpenLiquidityReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgOpenLiquidityReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgOpenLiquidityRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCloseLiquidityRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"CloseLiquidityReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCloseLiquidityReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCloseLiquidityRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import {\n  protobufPackage,\n  MsgCreateRandSwapRewardConfig as MsgCreateRandSwapRewardConfig_pb,\n  MsgOpenRandSwapReward as MsgOpenRandSwapReward_pb,\n  MsgCloseRandSwapReward as MsgCloseRandSwapReward_pb,\n  MsgUpdateRandSwapRewardConfig as MsgUpdateRandSwapRewardConfig_pb,\n  MsgCollectRandSwapReward as MsgCollectRandSwapReward_pb,\n  MsgCreateLiquidityRewardConfig as MsgCreateLiquidityRewardConfig_pb,\n  MsgUpdateLiquidityRewardConfig as MsgUpdateLiquidityRewardConfig_pb,\n  MsgOpenLiquidityReward as MsgOpenLiquidityReward_pb,\n  MsgCloseLiquidityReward as MsgCloseLiquidityReward_pb,\n} from \"../proto/pool-incentives/tx\";\nimport { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\n\nexport class MsgCreateRandSwapRewardConfig extends BaseMsg {\n  public protoMsg: MsgCreateRandSwapRewardConfig_pb;\n  constructor(msg: MsgCreateRandSwapRewardConfig_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreateRandSwapRewardConfig.typeUrl,\n      value: MsgCreateRandSwapRewardConfig_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreateRandSwapRewardConfig {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreateRandSwapRewardConfig`;\n  export const Proto = MsgCreateRandSwapRewardConfig_pb;\n  export interface Proto extends MsgCreateRandSwapRewardConfig_pb {}\n}\n\nexport class MsgCollectRandSwapReward extends BaseMsg {\n  public protoMsg: MsgCollectRandSwapReward_pb;\n  constructor(msg: MsgCollectRandSwapReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCollectRandSwapReward.typeUrl,\n      value: MsgCollectRandSwapReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCollectRandSwapReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgCollectRandSwapReward`;\n  export const Proto = MsgCollectRandSwapReward_pb;\n  export interface Proto extends MsgCollectRandSwapReward_pb {}\n}\n\nexport class MsgOpenRandSwapReward extends BaseMsg {\n  public protoMsg: MsgOpenRandSwapReward_pb;\n  constructor(msg: MsgOpenRandSwapReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgOpenRandSwapReward.typeUrl,\n      value: MsgOpenRandSwapReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgOpenRandSwapReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgOpenRandSwapReward`;\n  export const Proto = MsgOpenRandSwapReward_pb;\n  export interface Proto extends MsgOpenRandSwapReward_pb {}\n}\n\nexport class MsgCloseRandSwapReward extends BaseMsg {\n  public protoMsg: MsgCloseRandSwapReward_pb;\n  constructor(msg: MsgCloseRandSwapReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCloseRandSwapReward.typeUrl,\n      value: MsgCloseRandSwapReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCloseRandSwapReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgCloseRandSwapReward`;\n  export const Proto = MsgCloseRandSwapReward_pb;\n  export interface Proto extends MsgCloseRandSwapReward_pb {}\n}\n\nexport class MsgUpdateRandSwapRewardConfig extends BaseMsg {\n  public protoMsg: MsgUpdateRandSwapRewardConfig_pb;\n  constructor(msg: MsgUpdateRandSwapRewardConfig_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgUpdateRandSwapRewardConfig.typeUrl,\n      value: MsgUpdateRandSwapRewardConfig_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgUpdateRandSwapRewardConfig {\n  export const typeUrl: string = `/${protobufPackage}.MsgUpdateRandSwapRewardConfig`;\n  export const Proto = MsgUpdateRandSwapRewardConfig_pb;\n  export interface Proto extends MsgUpdateRandSwapRewardConfig_pb {}\n}\n\nexport class MsgCreateLiquidityRewardConfig extends BaseMsg {\n  public protoMsg: MsgCreateLiquidityRewardConfig_pb;\n  constructor(msg: MsgCreateLiquidityRewardConfig_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreateLiquidityRewardConfig.typeUrl,\n      value: MsgCreateLiquidityRewardConfig_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreateLiquidityRewardConfig {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreateLiquidityRewardConfig`;\n  export const Proto = MsgCreateLiquidityRewardConfig_pb;\n  export interface Proto extends MsgCreateLiquidityRewardConfig_pb {}\n}\n\nexport class MsgUpdateLiquidityRewardConfig extends BaseMsg {\n  public protoMsg: MsgUpdateLiquidityRewardConfig_pb;\n  constructor(msg: MsgUpdateLiquidityRewardConfig_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgUpdateLiquidityRewardConfig.typeUrl,\n      value: MsgUpdateLiquidityRewardConfig_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgUpdateLiquidityRewardConfig {\n  export const typeUrl: string = `/${protobufPackage}.MsgUpdateLiquidityRewardConfig`;\n  export const Proto = MsgUpdateLiquidityRewardConfig_pb;\n  export interface Proto extends MsgUpdateLiquidityRewardConfig_pb {}\n}\n\nexport class MsgOpenLiquidityReward extends BaseMsg {\n  public protoMsg: MsgOpenLiquidityReward_pb;\n  constructor(msg: MsgOpenLiquidityReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgOpenLiquidityReward.typeUrl,\n      value: MsgOpenLiquidityReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgOpenLiquidityReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgOpenLiquidityReward`;\n  export const Proto = MsgOpenLiquidityReward_pb;\n  export interface Proto extends MsgOpenLiquidityReward_pb {}\n}\n\nexport class MsgCloseLiquidityReward extends BaseMsg {\n  public protoMsg: MsgCloseLiquidityReward_pb;\n  constructor(msg: MsgCloseLiquidityReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCloseLiquidityReward.typeUrl,\n      value: MsgCloseLiquidityReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCloseLiquidityReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgCloseLiquidityReward`;\n  export const Proto = MsgCloseLiquidityReward_pb;\n  export interface Proto extends MsgCloseLiquidityReward_pb {}\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Proof } from \"../crypto/proof\";\nimport { Consensus } from \"../version/types\";\nimport { ValidatorSet } from \"./validator\";\nimport { Timestamp } from \"../../google/protobuf/timestamp\";\n\nexport const protobufPackage = \"tendermint.types\";\n\n/** BlockIdFlag indicates which BlcokID the signature is for */\nexport enum BlockIDFlag {\n  BLOCK_ID_FLAG_UNKNOWN = 0,\n  BLOCK_ID_FLAG_ABSENT = 1,\n  BLOCK_ID_FLAG_COMMIT = 2,\n  BLOCK_ID_FLAG_NIL = 3,\n  UNRECOGNIZED = -1,\n}\n\nexport function blockIDFlagFromJSON(object: any): BlockIDFlag {\n  switch (object) {\n    case 0:\n    case \"BLOCK_ID_FLAG_UNKNOWN\":\n      return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;\n    case 1:\n    case \"BLOCK_ID_FLAG_ABSENT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;\n    case 2:\n    case \"BLOCK_ID_FLAG_COMMIT\":\n      return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;\n    case 3:\n    case \"BLOCK_ID_FLAG_NIL\":\n      return BlockIDFlag.BLOCK_ID_FLAG_NIL;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return BlockIDFlag.UNRECOGNIZED;\n  }\n}\n\nexport function blockIDFlagToJSON(object: BlockIDFlag): string {\n  switch (object) {\n    case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:\n      return \"BLOCK_ID_FLAG_UNKNOWN\";\n    case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:\n      return \"BLOCK_ID_FLAG_ABSENT\";\n    case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:\n      return \"BLOCK_ID_FLAG_COMMIT\";\n    case BlockIDFlag.BLOCK_ID_FLAG_NIL:\n      return \"BLOCK_ID_FLAG_NIL\";\n    case BlockIDFlag.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/** SignedMsgType is a type of signed message in the consensus. */\nexport enum SignedMsgType {\n  SIGNED_MSG_TYPE_UNKNOWN = 0,\n  /** SIGNED_MSG_TYPE_PREVOTE - Votes */\n  SIGNED_MSG_TYPE_PREVOTE = 1,\n  SIGNED_MSG_TYPE_PRECOMMIT = 2,\n  /** SIGNED_MSG_TYPE_PROPOSAL - Proposals */\n  SIGNED_MSG_TYPE_PROPOSAL = 32,\n  UNRECOGNIZED = -1,\n}\n\nexport function signedMsgTypeFromJSON(object: any): SignedMsgType {\n  switch (object) {\n    case 0:\n    case \"SIGNED_MSG_TYPE_UNKNOWN\":\n      return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;\n    case 1:\n    case \"SIGNED_MSG_TYPE_PREVOTE\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;\n    case 2:\n    case \"SIGNED_MSG_TYPE_PRECOMMIT\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;\n    case 32:\n    case \"SIGNED_MSG_TYPE_PROPOSAL\":\n      return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return SignedMsgType.UNRECOGNIZED;\n  }\n}\n\nexport function signedMsgTypeToJSON(object: SignedMsgType): string {\n  switch (object) {\n    case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:\n      return \"SIGNED_MSG_TYPE_UNKNOWN\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:\n      return \"SIGNED_MSG_TYPE_PREVOTE\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:\n      return \"SIGNED_MSG_TYPE_PRECOMMIT\";\n    case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:\n      return \"SIGNED_MSG_TYPE_PROPOSAL\";\n    case SignedMsgType.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/** PartsetHeader */\nexport interface PartSetHeader {\n  total: number;\n  hash: Uint8Array;\n}\n\nexport interface Part {\n  index: number;\n  bytes: Uint8Array;\n  proof?: Proof;\n}\n\n/** BlockID */\nexport interface BlockID {\n  hash: Uint8Array;\n  partSetHeader?: PartSetHeader;\n}\n\n/** Header defines the structure of a Tendermint block header. */\nexport interface Header {\n  /** basic block info */\n  version?: Consensus;\n  chainId: string;\n  height: Long;\n  time?: Date;\n  /** prev block info */\n  lastBlockId?: BlockID;\n  /** hashes of block data */\n  lastCommitHash: Uint8Array;\n  /** transactions */\n  dataHash: Uint8Array;\n  /** hashes from the app output from the prev block */\n  validatorsHash: Uint8Array;\n  /** validators for the next block */\n  nextValidatorsHash: Uint8Array;\n  /** consensus params for current block */\n  consensusHash: Uint8Array;\n  /** state after txs from the previous block */\n  appHash: Uint8Array;\n  /** root hash of all results from the txs from the previous block */\n  lastResultsHash: Uint8Array;\n  /** consensus info */\n  evidenceHash: Uint8Array;\n  /** original proposer of the block */\n  proposerAddress: Uint8Array;\n}\n\n/** Data contains the set of transactions included in the block */\nexport interface Data {\n  /**\n   * Txs that will be applied by state @ block.Height+1.\n   * NOTE: not all txs here are valid.  We're just agreeing on the order first.\n   * This means that block.AppHash does not include these txs.\n   */\n  txs: Uint8Array[];\n}\n\n/**\n * Vote represents a prevote, precommit, or commit vote from validators for\n * consensus.\n */\nexport interface Vote {\n  type: SignedMsgType;\n  height: Long;\n  round: number;\n  /** zero if vote is nil. */\n  blockId?: BlockID;\n  timestamp?: Date;\n  validatorAddress: Uint8Array;\n  validatorIndex: number;\n  signature: Uint8Array;\n}\n\n/**\n * Commit contains the evidence that a block was committed by a set of\n * validators.\n */\nexport interface Commit {\n  height: Long;\n  round: number;\n  blockId?: BlockID;\n  signatures: CommitSig[];\n}\n\n/** CommitSig is a part of the Vote included in a Commit. */\nexport interface CommitSig {\n  blockIdFlag: BlockIDFlag;\n  validatorAddress: Uint8Array;\n  timestamp?: Date;\n  signature: Uint8Array;\n}\n\nexport interface Proposal {\n  type: SignedMsgType;\n  height: Long;\n  round: number;\n  polRound: number;\n  blockId?: BlockID;\n  timestamp?: Date;\n  signature: Uint8Array;\n}\n\nexport interface SignedHeader {\n  header?: Header;\n  commit?: Commit;\n}\n\nexport interface LightBlock {\n  signedHeader?: SignedHeader;\n  validatorSet?: ValidatorSet;\n}\n\nexport interface BlockMeta {\n  blockId?: BlockID;\n  blockSize: Long;\n  header?: Header;\n  numTxs: Long;\n}\n\n/**\n * TxProof represents a Merkle proof of the presence of a transaction in the\n * Merkle tree.\n */\nexport interface TxProof {\n  rootHash: Uint8Array;\n  data: Uint8Array;\n  proof?: Proof;\n}\n\nfunction createBasePartSetHeader(): PartSetHeader {\n  return { total: 0, hash: new Uint8Array() };\n}\n\nexport const PartSetHeader = {\n  encode(\n    message: PartSetHeader,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.total !== 0) {\n      writer.uint32(8).uint32(message.total);\n    }\n    if (message.hash.length !== 0) {\n      writer.uint32(18).bytes(message.hash);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PartSetHeader {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePartSetHeader();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.total = reader.uint32();\n          break;\n        case 2:\n          message.hash = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): PartSetHeader {\n    return {\n      total: isSet(object.total) ? Number(object.total) : 0,\n      hash: isSet(object.hash)\n        ? bytesFromBase64(object.hash)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: PartSetHeader): unknown {\n    const obj: any = {};\n    message.total !== undefined && (obj.total = Math.round(message.total));\n    message.hash !== undefined &&\n      (obj.hash = base64FromBytes(\n        message.hash !== undefined ? message.hash : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<PartSetHeader>, I>>(\n    object: I\n  ): PartSetHeader {\n    const message = createBasePartSetHeader();\n    message.total = object.total ?? 0;\n    message.hash = object.hash ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBasePart(): Part {\n  return { index: 0, bytes: new Uint8Array(), proof: undefined };\n}\n\nexport const Part = {\n  encode(message: Part, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.index !== 0) {\n      writer.uint32(8).uint32(message.index);\n    }\n    if (message.bytes.length !== 0) {\n      writer.uint32(18).bytes(message.bytes);\n    }\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Part {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePart();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.index = reader.uint32();\n          break;\n        case 2:\n          message.bytes = reader.bytes();\n          break;\n        case 3:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Part {\n    return {\n      index: isSet(object.index) ? Number(object.index) : 0,\n      bytes: isSet(object.bytes)\n        ? bytesFromBase64(object.bytes)\n        : new Uint8Array(),\n      proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined,\n    };\n  },\n\n  toJSON(message: Part): unknown {\n    const obj: any = {};\n    message.index !== undefined && (obj.index = Math.round(message.index));\n    message.bytes !== undefined &&\n      (obj.bytes = base64FromBytes(\n        message.bytes !== undefined ? message.bytes : new Uint8Array()\n      ));\n    message.proof !== undefined &&\n      (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Part>, I>>(object: I): Part {\n    const message = createBasePart();\n    message.index = object.index ?? 0;\n    message.bytes = object.bytes ?? new Uint8Array();\n    message.proof =\n      object.proof !== undefined && object.proof !== null\n        ? Proof.fromPartial(object.proof)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseBlockID(): BlockID {\n  return { hash: new Uint8Array(), partSetHeader: undefined };\n}\n\nexport const BlockID = {\n  encode(\n    message: BlockID,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.hash.length !== 0) {\n      writer.uint32(10).bytes(message.hash);\n    }\n    if (message.partSetHeader !== undefined) {\n      PartSetHeader.encode(\n        message.partSetHeader,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): BlockID {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBlockID();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.bytes();\n          break;\n        case 2:\n          message.partSetHeader = PartSetHeader.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BlockID {\n    return {\n      hash: isSet(object.hash)\n        ? bytesFromBase64(object.hash)\n        : new Uint8Array(),\n      partSetHeader: isSet(object.partSetHeader)\n        ? PartSetHeader.fromJSON(object.partSetHeader)\n        : undefined,\n    };\n  },\n\n  toJSON(message: BlockID): unknown {\n    const obj: any = {};\n    message.hash !== undefined &&\n      (obj.hash = base64FromBytes(\n        message.hash !== undefined ? message.hash : new Uint8Array()\n      ));\n    message.partSetHeader !== undefined &&\n      (obj.partSetHeader = message.partSetHeader\n        ? PartSetHeader.toJSON(message.partSetHeader)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<BlockID>, I>>(object: I): BlockID {\n    const message = createBaseBlockID();\n    message.hash = object.hash ?? new Uint8Array();\n    message.partSetHeader =\n      object.partSetHeader !== undefined && object.partSetHeader !== null\n        ? PartSetHeader.fromPartial(object.partSetHeader)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseHeader(): Header {\n  return {\n    version: undefined,\n    chainId: \"\",\n    height: Long.ZERO,\n    time: undefined,\n    lastBlockId: undefined,\n    lastCommitHash: new Uint8Array(),\n    dataHash: new Uint8Array(),\n    validatorsHash: new Uint8Array(),\n    nextValidatorsHash: new Uint8Array(),\n    consensusHash: new Uint8Array(),\n    appHash: new Uint8Array(),\n    lastResultsHash: new Uint8Array(),\n    evidenceHash: new Uint8Array(),\n    proposerAddress: new Uint8Array(),\n  };\n}\n\nexport const Header = {\n  encode(\n    message: Header,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.version !== undefined) {\n      Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.chainId !== \"\") {\n      writer.uint32(18).string(message.chainId);\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(24).int64(message.height);\n    }\n    if (message.time !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.time),\n        writer.uint32(34).fork()\n      ).ldelim();\n    }\n    if (message.lastBlockId !== undefined) {\n      BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.lastCommitHash.length !== 0) {\n      writer.uint32(50).bytes(message.lastCommitHash);\n    }\n    if (message.dataHash.length !== 0) {\n      writer.uint32(58).bytes(message.dataHash);\n    }\n    if (message.validatorsHash.length !== 0) {\n      writer.uint32(66).bytes(message.validatorsHash);\n    }\n    if (message.nextValidatorsHash.length !== 0) {\n      writer.uint32(74).bytes(message.nextValidatorsHash);\n    }\n    if (message.consensusHash.length !== 0) {\n      writer.uint32(82).bytes(message.consensusHash);\n    }\n    if (message.appHash.length !== 0) {\n      writer.uint32(90).bytes(message.appHash);\n    }\n    if (message.lastResultsHash.length !== 0) {\n      writer.uint32(98).bytes(message.lastResultsHash);\n    }\n    if (message.evidenceHash.length !== 0) {\n      writer.uint32(106).bytes(message.evidenceHash);\n    }\n    if (message.proposerAddress.length !== 0) {\n      writer.uint32(114).bytes(message.proposerAddress);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Header {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseHeader();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.version = Consensus.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.chainId = reader.string();\n          break;\n        case 3:\n          message.height = reader.int64() as Long;\n          break;\n        case 4:\n          message.time = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 5:\n          message.lastBlockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.lastCommitHash = reader.bytes();\n          break;\n        case 7:\n          message.dataHash = reader.bytes();\n          break;\n        case 8:\n          message.validatorsHash = reader.bytes();\n          break;\n        case 9:\n          message.nextValidatorsHash = reader.bytes();\n          break;\n        case 10:\n          message.consensusHash = reader.bytes();\n          break;\n        case 11:\n          message.appHash = reader.bytes();\n          break;\n        case 12:\n          message.lastResultsHash = reader.bytes();\n          break;\n        case 13:\n          message.evidenceHash = reader.bytes();\n          break;\n        case 14:\n          message.proposerAddress = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Header {\n    return {\n      version: isSet(object.version)\n        ? Consensus.fromJSON(object.version)\n        : undefined,\n      chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n      height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,\n      time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,\n      lastBlockId: isSet(object.lastBlockId)\n        ? BlockID.fromJSON(object.lastBlockId)\n        : undefined,\n      lastCommitHash: isSet(object.lastCommitHash)\n        ? bytesFromBase64(object.lastCommitHash)\n        : new Uint8Array(),\n      dataHash: isSet(object.dataHash)\n        ? bytesFromBase64(object.dataHash)\n        : new Uint8Array(),\n      validatorsHash: isSet(object.validatorsHash)\n        ? bytesFromBase64(object.validatorsHash)\n        : new Uint8Array(),\n      nextValidatorsHash: isSet(object.nextValidatorsHash)\n        ? bytesFromBase64(object.nextValidatorsHash)\n        : new Uint8Array(),\n      consensusHash: isSet(object.consensusHash)\n        ? bytesFromBase64(object.consensusHash)\n        : new Uint8Array(),\n      appHash: isSet(object.appHash)\n        ? bytesFromBase64(object.appHash)\n        : new Uint8Array(),\n      lastResultsHash: isSet(object.lastResultsHash)\n        ? bytesFromBase64(object.lastResultsHash)\n        : new Uint8Array(),\n      evidenceHash: isSet(object.evidenceHash)\n        ? bytesFromBase64(object.evidenceHash)\n        : new Uint8Array(),\n      proposerAddress: isSet(object.proposerAddress)\n        ? bytesFromBase64(object.proposerAddress)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: Header): unknown {\n    const obj: any = {};\n    message.version !== undefined &&\n      (obj.version = message.version\n        ? Consensus.toJSON(message.version)\n        : undefined);\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.height !== undefined &&\n      (obj.height = (message.height || Long.ZERO).toString());\n    message.time !== undefined && (obj.time = message.time.toISOString());\n    message.lastBlockId !== undefined &&\n      (obj.lastBlockId = message.lastBlockId\n        ? BlockID.toJSON(message.lastBlockId)\n        : undefined);\n    message.lastCommitHash !== undefined &&\n      (obj.lastCommitHash = base64FromBytes(\n        message.lastCommitHash !== undefined\n          ? message.lastCommitHash\n          : new Uint8Array()\n      ));\n    message.dataHash !== undefined &&\n      (obj.dataHash = base64FromBytes(\n        message.dataHash !== undefined ? message.dataHash : new Uint8Array()\n      ));\n    message.validatorsHash !== undefined &&\n      (obj.validatorsHash = base64FromBytes(\n        message.validatorsHash !== undefined\n          ? message.validatorsHash\n          : new Uint8Array()\n      ));\n    message.nextValidatorsHash !== undefined &&\n      (obj.nextValidatorsHash = base64FromBytes(\n        message.nextValidatorsHash !== undefined\n          ? message.nextValidatorsHash\n          : new Uint8Array()\n      ));\n    message.consensusHash !== undefined &&\n      (obj.consensusHash = base64FromBytes(\n        message.consensusHash !== undefined\n          ? message.consensusHash\n          : new Uint8Array()\n      ));\n    message.appHash !== undefined &&\n      (obj.appHash = base64FromBytes(\n        message.appHash !== undefined ? message.appHash : new Uint8Array()\n      ));\n    message.lastResultsHash !== undefined &&\n      (obj.lastResultsHash = base64FromBytes(\n        message.lastResultsHash !== undefined\n          ? message.lastResultsHash\n          : new Uint8Array()\n      ));\n    message.evidenceHash !== undefined &&\n      (obj.evidenceHash = base64FromBytes(\n        message.evidenceHash !== undefined\n          ? message.evidenceHash\n          : new Uint8Array()\n      ));\n    message.proposerAddress !== undefined &&\n      (obj.proposerAddress = base64FromBytes(\n        message.proposerAddress !== undefined\n          ? message.proposerAddress\n          : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Header>, I>>(object: I): Header {\n    const message = createBaseHeader();\n    message.version =\n      object.version !== undefined && object.version !== null\n        ? Consensus.fromPartial(object.version)\n        : undefined;\n    message.chainId = object.chainId ?? \"\";\n    message.height =\n      object.height !== undefined && object.height !== null\n        ? Long.fromValue(object.height)\n        : Long.ZERO;\n    message.time = object.time ?? undefined;\n    message.lastBlockId =\n      object.lastBlockId !== undefined && object.lastBlockId !== null\n        ? BlockID.fromPartial(object.lastBlockId)\n        : undefined;\n    message.lastCommitHash = object.lastCommitHash ?? new Uint8Array();\n    message.dataHash = object.dataHash ?? new Uint8Array();\n    message.validatorsHash = object.validatorsHash ?? new Uint8Array();\n    message.nextValidatorsHash = object.nextValidatorsHash ?? new Uint8Array();\n    message.consensusHash = object.consensusHash ?? new Uint8Array();\n    message.appHash = object.appHash ?? new Uint8Array();\n    message.lastResultsHash = object.lastResultsHash ?? new Uint8Array();\n    message.evidenceHash = object.evidenceHash ?? new Uint8Array();\n    message.proposerAddress = object.proposerAddress ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseData(): Data {\n  return { txs: [] };\n}\n\nexport const Data = {\n  encode(message: Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.txs) {\n      writer.uint32(10).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Data {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseData();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.txs.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Data {\n    return {\n      txs: Array.isArray(object?.txs)\n        ? object.txs.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Data): unknown {\n    const obj: any = {};\n    if (message.txs) {\n      obj.txs = message.txs.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.txs = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Data>, I>>(object: I): Data {\n    const message = createBaseData();\n    message.txs = object.txs?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseVote(): Vote {\n  return {\n    type: 0,\n    height: Long.ZERO,\n    round: 0,\n    blockId: undefined,\n    timestamp: undefined,\n    validatorAddress: new Uint8Array(),\n    validatorIndex: 0,\n    signature: new Uint8Array(),\n  };\n}\n\nexport const Vote = {\n  encode(message: Vote, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(16).int64(message.height);\n    }\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();\n    }\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.timestamp),\n        writer.uint32(42).fork()\n      ).ldelim();\n    }\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(50).bytes(message.validatorAddress);\n    }\n    if (message.validatorIndex !== 0) {\n      writer.uint32(56).int32(message.validatorIndex);\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(66).bytes(message.signature);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Vote {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseVote();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32() as any;\n          break;\n        case 2:\n          message.height = reader.int64() as Long;\n          break;\n        case 3:\n          message.round = reader.int32();\n          break;\n        case 4:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 5:\n          message.timestamp = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 6:\n          message.validatorAddress = reader.bytes();\n          break;\n        case 7:\n          message.validatorIndex = reader.int32();\n          break;\n        case 8:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Vote {\n    return {\n      type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,\n      height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,\n      round: isSet(object.round) ? Number(object.round) : 0,\n      blockId: isSet(object.blockId)\n        ? BlockID.fromJSON(object.blockId)\n        : undefined,\n      timestamp: isSet(object.timestamp)\n        ? fromJsonTimestamp(object.timestamp)\n        : undefined,\n      validatorAddress: isSet(object.validatorAddress)\n        ? bytesFromBase64(object.validatorAddress)\n        : new Uint8Array(),\n      validatorIndex: isSet(object.validatorIndex)\n        ? Number(object.validatorIndex)\n        : 0,\n      signature: isSet(object.signature)\n        ? bytesFromBase64(object.signature)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: Vote): unknown {\n    const obj: any = {};\n    message.type !== undefined &&\n      (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined &&\n      (obj.height = (message.height || Long.ZERO).toString());\n    message.round !== undefined && (obj.round = Math.round(message.round));\n    message.blockId !== undefined &&\n      (obj.blockId = message.blockId\n        ? BlockID.toJSON(message.blockId)\n        : undefined);\n    message.timestamp !== undefined &&\n      (obj.timestamp = message.timestamp.toISOString());\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = base64FromBytes(\n        message.validatorAddress !== undefined\n          ? message.validatorAddress\n          : new Uint8Array()\n      ));\n    message.validatorIndex !== undefined &&\n      (obj.validatorIndex = Math.round(message.validatorIndex));\n    message.signature !== undefined &&\n      (obj.signature = base64FromBytes(\n        message.signature !== undefined ? message.signature : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Vote>, I>>(object: I): Vote {\n    const message = createBaseVote();\n    message.type = object.type ?? 0;\n    message.height =\n      object.height !== undefined && object.height !== null\n        ? Long.fromValue(object.height)\n        : Long.ZERO;\n    message.round = object.round ?? 0;\n    message.blockId =\n      object.blockId !== undefined && object.blockId !== null\n        ? BlockID.fromPartial(object.blockId)\n        : undefined;\n    message.timestamp = object.timestamp ?? undefined;\n    message.validatorAddress = object.validatorAddress ?? new Uint8Array();\n    message.validatorIndex = object.validatorIndex ?? 0;\n    message.signature = object.signature ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseCommit(): Commit {\n  return { height: Long.ZERO, round: 0, blockId: undefined, signatures: [] };\n}\n\nexport const Commit = {\n  encode(\n    message: Commit,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n    if (message.round !== 0) {\n      writer.uint32(16).int32(message.round);\n    }\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.signatures) {\n      CommitSig.encode(v!, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Commit {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCommit();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64() as Long;\n          break;\n        case 2:\n          message.round = reader.int32();\n          break;\n        case 3:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.signatures.push(CommitSig.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Commit {\n    return {\n      height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,\n      round: isSet(object.round) ? Number(object.round) : 0,\n      blockId: isSet(object.blockId)\n        ? BlockID.fromJSON(object.blockId)\n        : undefined,\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => CommitSig.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Commit): unknown {\n    const obj: any = {};\n    message.height !== undefined &&\n      (obj.height = (message.height || Long.ZERO).toString());\n    message.round !== undefined && (obj.round = Math.round(message.round));\n    message.blockId !== undefined &&\n      (obj.blockId = message.blockId\n        ? BlockID.toJSON(message.blockId)\n        : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        e ? CommitSig.toJSON(e) : undefined\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Commit>, I>>(object: I): Commit {\n    const message = createBaseCommit();\n    message.height =\n      object.height !== undefined && object.height !== null\n        ? Long.fromValue(object.height)\n        : Long.ZERO;\n    message.round = object.round ?? 0;\n    message.blockId =\n      object.blockId !== undefined && object.blockId !== null\n        ? BlockID.fromPartial(object.blockId)\n        : undefined;\n    message.signatures =\n      object.signatures?.map((e) => CommitSig.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseCommitSig(): CommitSig {\n  return {\n    blockIdFlag: 0,\n    validatorAddress: new Uint8Array(),\n    timestamp: undefined,\n    signature: new Uint8Array(),\n  };\n}\n\nexport const CommitSig = {\n  encode(\n    message: CommitSig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.blockIdFlag !== 0) {\n      writer.uint32(8).int32(message.blockIdFlag);\n    }\n    if (message.validatorAddress.length !== 0) {\n      writer.uint32(18).bytes(message.validatorAddress);\n    }\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.timestamp),\n        writer.uint32(26).fork()\n      ).ldelim();\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(34).bytes(message.signature);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CommitSig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCommitSig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockIdFlag = reader.int32() as any;\n          break;\n        case 2:\n          message.validatorAddress = reader.bytes();\n          break;\n        case 3:\n          message.timestamp = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 4:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): CommitSig {\n    return {\n      blockIdFlag: isSet(object.blockIdFlag)\n        ? blockIDFlagFromJSON(object.blockIdFlag)\n        : 0,\n      validatorAddress: isSet(object.validatorAddress)\n        ? bytesFromBase64(object.validatorAddress)\n        : new Uint8Array(),\n      timestamp: isSet(object.timestamp)\n        ? fromJsonTimestamp(object.timestamp)\n        : undefined,\n      signature: isSet(object.signature)\n        ? bytesFromBase64(object.signature)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: CommitSig): unknown {\n    const obj: any = {};\n    message.blockIdFlag !== undefined &&\n      (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = base64FromBytes(\n        message.validatorAddress !== undefined\n          ? message.validatorAddress\n          : new Uint8Array()\n      ));\n    message.timestamp !== undefined &&\n      (obj.timestamp = message.timestamp.toISOString());\n    message.signature !== undefined &&\n      (obj.signature = base64FromBytes(\n        message.signature !== undefined ? message.signature : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<CommitSig>, I>>(\n    object: I\n  ): CommitSig {\n    const message = createBaseCommitSig();\n    message.blockIdFlag = object.blockIdFlag ?? 0;\n    message.validatorAddress = object.validatorAddress ?? new Uint8Array();\n    message.timestamp = object.timestamp ?? undefined;\n    message.signature = object.signature ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseProposal(): Proposal {\n  return {\n    type: 0,\n    height: Long.ZERO,\n    round: 0,\n    polRound: 0,\n    blockId: undefined,\n    timestamp: undefined,\n    signature: new Uint8Array(),\n  };\n}\n\nexport const Proposal = {\n  encode(\n    message: Proposal,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (!message.height.isZero()) {\n      writer.uint32(16).int64(message.height);\n    }\n    if (message.round !== 0) {\n      writer.uint32(24).int32(message.round);\n    }\n    if (message.polRound !== 0) {\n      writer.uint32(32).int32(message.polRound);\n    }\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();\n    }\n    if (message.timestamp !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.timestamp),\n        writer.uint32(50).fork()\n      ).ldelim();\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(58).bytes(message.signature);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Proposal {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProposal();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.int32() as any;\n          break;\n        case 2:\n          message.height = reader.int64() as Long;\n          break;\n        case 3:\n          message.round = reader.int32();\n          break;\n        case 4:\n          message.polRound = reader.int32();\n          break;\n        case 5:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.timestamp = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 7:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Proposal {\n    return {\n      type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,\n      height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,\n      round: isSet(object.round) ? Number(object.round) : 0,\n      polRound: isSet(object.polRound) ? Number(object.polRound) : 0,\n      blockId: isSet(object.blockId)\n        ? BlockID.fromJSON(object.blockId)\n        : undefined,\n      timestamp: isSet(object.timestamp)\n        ? fromJsonTimestamp(object.timestamp)\n        : undefined,\n      signature: isSet(object.signature)\n        ? bytesFromBase64(object.signature)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: Proposal): unknown {\n    const obj: any = {};\n    message.type !== undefined &&\n      (obj.type = signedMsgTypeToJSON(message.type));\n    message.height !== undefined &&\n      (obj.height = (message.height || Long.ZERO).toString());\n    message.round !== undefined && (obj.round = Math.round(message.round));\n    message.polRound !== undefined &&\n      (obj.polRound = Math.round(message.polRound));\n    message.blockId !== undefined &&\n      (obj.blockId = message.blockId\n        ? BlockID.toJSON(message.blockId)\n        : undefined);\n    message.timestamp !== undefined &&\n      (obj.timestamp = message.timestamp.toISOString());\n    message.signature !== undefined &&\n      (obj.signature = base64FromBytes(\n        message.signature !== undefined ? message.signature : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Proposal>, I>>(object: I): Proposal {\n    const message = createBaseProposal();\n    message.type = object.type ?? 0;\n    message.height =\n      object.height !== undefined && object.height !== null\n        ? Long.fromValue(object.height)\n        : Long.ZERO;\n    message.round = object.round ?? 0;\n    message.polRound = object.polRound ?? 0;\n    message.blockId =\n      object.blockId !== undefined && object.blockId !== null\n        ? BlockID.fromPartial(object.blockId)\n        : undefined;\n    message.timestamp = object.timestamp ?? undefined;\n    message.signature = object.signature ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseSignedHeader(): SignedHeader {\n  return { header: undefined, commit: undefined };\n}\n\nexport const SignedHeader = {\n  encode(\n    message: SignedHeader,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.header !== undefined) {\n      Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.commit !== undefined) {\n      Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SignedHeader {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignedHeader();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.header = Header.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.commit = Commit.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignedHeader {\n    return {\n      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,\n      commit: isSet(object.commit) ? Commit.fromJSON(object.commit) : undefined,\n    };\n  },\n\n  toJSON(message: SignedHeader): unknown {\n    const obj: any = {};\n    message.header !== undefined &&\n      (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n    message.commit !== undefined &&\n      (obj.commit = message.commit ? Commit.toJSON(message.commit) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignedHeader>, I>>(\n    object: I\n  ): SignedHeader {\n    const message = createBaseSignedHeader();\n    message.header =\n      object.header !== undefined && object.header !== null\n        ? Header.fromPartial(object.header)\n        : undefined;\n    message.commit =\n      object.commit !== undefined && object.commit !== null\n        ? Commit.fromPartial(object.commit)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseLightBlock(): LightBlock {\n  return { signedHeader: undefined, validatorSet: undefined };\n}\n\nexport const LightBlock = {\n  encode(\n    message: LightBlock,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.signedHeader !== undefined) {\n      SignedHeader.encode(\n        message.signedHeader,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.validatorSet !== undefined) {\n      ValidatorSet.encode(\n        message.validatorSet,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): LightBlock {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseLightBlock();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signedHeader = SignedHeader.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.validatorSet = ValidatorSet.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): LightBlock {\n    return {\n      signedHeader: isSet(object.signedHeader)\n        ? SignedHeader.fromJSON(object.signedHeader)\n        : undefined,\n      validatorSet: isSet(object.validatorSet)\n        ? ValidatorSet.fromJSON(object.validatorSet)\n        : undefined,\n    };\n  },\n\n  toJSON(message: LightBlock): unknown {\n    const obj: any = {};\n    message.signedHeader !== undefined &&\n      (obj.signedHeader = message.signedHeader\n        ? SignedHeader.toJSON(message.signedHeader)\n        : undefined);\n    message.validatorSet !== undefined &&\n      (obj.validatorSet = message.validatorSet\n        ? ValidatorSet.toJSON(message.validatorSet)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<LightBlock>, I>>(\n    object: I\n  ): LightBlock {\n    const message = createBaseLightBlock();\n    message.signedHeader =\n      object.signedHeader !== undefined && object.signedHeader !== null\n        ? SignedHeader.fromPartial(object.signedHeader)\n        : undefined;\n    message.validatorSet =\n      object.validatorSet !== undefined && object.validatorSet !== null\n        ? ValidatorSet.fromPartial(object.validatorSet)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseBlockMeta(): BlockMeta {\n  return {\n    blockId: undefined,\n    blockSize: Long.ZERO,\n    header: undefined,\n    numTxs: Long.ZERO,\n  };\n}\n\nexport const BlockMeta = {\n  encode(\n    message: BlockMeta,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.blockId !== undefined) {\n      BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.blockSize.isZero()) {\n      writer.uint32(16).int64(message.blockSize);\n    }\n    if (message.header !== undefined) {\n      Header.encode(message.header, writer.uint32(26).fork()).ldelim();\n    }\n    if (!message.numTxs.isZero()) {\n      writer.uint32(32).int64(message.numTxs);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): BlockMeta {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBlockMeta();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockId = BlockID.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.blockSize = reader.int64() as Long;\n          break;\n        case 3:\n          message.header = Header.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.numTxs = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BlockMeta {\n    return {\n      blockId: isSet(object.blockId)\n        ? BlockID.fromJSON(object.blockId)\n        : undefined,\n      blockSize: isSet(object.blockSize)\n        ? Long.fromValue(object.blockSize)\n        : Long.ZERO,\n      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,\n      numTxs: isSet(object.numTxs) ? Long.fromValue(object.numTxs) : Long.ZERO,\n    };\n  },\n\n  toJSON(message: BlockMeta): unknown {\n    const obj: any = {};\n    message.blockId !== undefined &&\n      (obj.blockId = message.blockId\n        ? BlockID.toJSON(message.blockId)\n        : undefined);\n    message.blockSize !== undefined &&\n      (obj.blockSize = (message.blockSize || Long.ZERO).toString());\n    message.header !== undefined &&\n      (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n    message.numTxs !== undefined &&\n      (obj.numTxs = (message.numTxs || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<BlockMeta>, I>>(\n    object: I\n  ): BlockMeta {\n    const message = createBaseBlockMeta();\n    message.blockId =\n      object.blockId !== undefined && object.blockId !== null\n        ? BlockID.fromPartial(object.blockId)\n        : undefined;\n    message.blockSize =\n      object.blockSize !== undefined && object.blockSize !== null\n        ? Long.fromValue(object.blockSize)\n        : Long.ZERO;\n    message.header =\n      object.header !== undefined && object.header !== null\n        ? Header.fromPartial(object.header)\n        : undefined;\n    message.numTxs =\n      object.numTxs !== undefined && object.numTxs !== null\n        ? Long.fromValue(object.numTxs)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseTxProof(): TxProof {\n  return {\n    rootHash: new Uint8Array(),\n    data: new Uint8Array(),\n    proof: undefined,\n  };\n}\n\nexport const TxProof = {\n  encode(\n    message: TxProof,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.rootHash.length !== 0) {\n      writer.uint32(10).bytes(message.rootHash);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TxProof {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxProof();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.rootHash = reader.bytes();\n          break;\n        case 2:\n          message.data = reader.bytes();\n          break;\n        case 3:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TxProof {\n    return {\n      rootHash: isSet(object.rootHash)\n        ? bytesFromBase64(object.rootHash)\n        : new Uint8Array(),\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n      proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined,\n    };\n  },\n\n  toJSON(message: TxProof): unknown {\n    const obj: any = {};\n    message.rootHash !== undefined &&\n      (obj.rootHash = base64FromBytes(\n        message.rootHash !== undefined ? message.rootHash : new Uint8Array()\n      ));\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    message.proof !== undefined &&\n      (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TxProof>, I>>(object: I): TxProof {\n    const message = createBaseTxProof();\n    message.rootHash = object.rootHash ?? new Uint8Array();\n    message.data = object.data ?? new Uint8Array();\n    message.proof =\n      object.proof !== undefined && object.proof !== null\n        ? Proof.fromPartial(object.proof)\n        : undefined;\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nfunction toTimestamp(date: Date): Timestamp {\n  const seconds = numberToLong(date.getTime() / 1_000);\n  const nanos = (date.getTime() % 1_000) * 1_000_000;\n  return { seconds, nanos };\n}\n\nfunction fromTimestamp(t: Timestamp): Date {\n  let millis = t.seconds.toNumber() * 1_000;\n  millis += t.nanos / 1_000_000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o: any): Date {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction numberToLong(number: number) {\n  return Long.fromNumber(number);\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Header } from \"../../../tendermint/types/types\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport { Duration } from \"../../../google/protobuf/duration\";\nimport { Coin } from \"../../base/v1beta1/coin\";\nimport { Timestamp } from \"../../../google/protobuf/timestamp\";\n\nexport const protobufPackage = \"cosmos.staking.v1beta1\";\n\n/** BondStatus is the status of a validator. */\nexport enum BondStatus {\n  /** BOND_STATUS_UNSPECIFIED - UNSPECIFIED defines an invalid validator status. */\n  BOND_STATUS_UNSPECIFIED = 0,\n  /** BOND_STATUS_UNBONDED - UNBONDED defines a validator that is not bonded. */\n  BOND_STATUS_UNBONDED = 1,\n  /** BOND_STATUS_UNBONDING - UNBONDING defines a validator that is unbonding. */\n  BOND_STATUS_UNBONDING = 2,\n  /** BOND_STATUS_BONDED - BONDED defines a validator that is bonded. */\n  BOND_STATUS_BONDED = 3,\n  UNRECOGNIZED = -1,\n}\n\nexport function bondStatusFromJSON(object: any): BondStatus {\n  switch (object) {\n    case 0:\n    case \"BOND_STATUS_UNSPECIFIED\":\n      return BondStatus.BOND_STATUS_UNSPECIFIED;\n    case 1:\n    case \"BOND_STATUS_UNBONDED\":\n      return BondStatus.BOND_STATUS_UNBONDED;\n    case 2:\n    case \"BOND_STATUS_UNBONDING\":\n      return BondStatus.BOND_STATUS_UNBONDING;\n    case 3:\n    case \"BOND_STATUS_BONDED\":\n      return BondStatus.BOND_STATUS_BONDED;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return BondStatus.UNRECOGNIZED;\n  }\n}\n\nexport function bondStatusToJSON(object: BondStatus): string {\n  switch (object) {\n    case BondStatus.BOND_STATUS_UNSPECIFIED:\n      return \"BOND_STATUS_UNSPECIFIED\";\n    case BondStatus.BOND_STATUS_UNBONDED:\n      return \"BOND_STATUS_UNBONDED\";\n    case BondStatus.BOND_STATUS_UNBONDING:\n      return \"BOND_STATUS_UNBONDING\";\n    case BondStatus.BOND_STATUS_BONDED:\n      return \"BOND_STATUS_BONDED\";\n    case BondStatus.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/**\n * HistoricalInfo contains header and validator information for a given block.\n * It is stored as part of staking module's state, which persists the `n` most\n * recent HistoricalInfo\n * (`n` is set by the staking module's `historical_entries` parameter).\n */\nexport interface HistoricalInfo {\n  header?: Header;\n  valset: Validator[];\n}\n\n/**\n * CommissionRates defines the initial commission rates to be used for creating\n * a validator.\n */\nexport interface CommissionRates {\n  /** rate is the commission rate charged to delegators, as a fraction. */\n  rate: string;\n  /** max_rate defines the maximum commission rate which validator can ever charge, as a fraction. */\n  maxRate: string;\n  /** max_change_rate defines the maximum daily increase of the validator commission, as a fraction. */\n  maxChangeRate: string;\n}\n\n/** Commission defines commission parameters for a given validator. */\nexport interface Commission {\n  /** commission_rates defines the initial commission rates to be used for creating a validator. */\n  commissionRates?: CommissionRates;\n  /** update_time is the last time the commission rate was changed. */\n  updateTime?: Date;\n}\n\n/** Description defines a validator description. */\nexport interface Description {\n  /** moniker defines a human-readable name for the validator. */\n  moniker: string;\n  /** identity defines an optional identity signature (ex. UPort or Keybase). */\n  identity: string;\n  /** website defines an optional website link. */\n  website: string;\n  /** security_contact defines an optional email for security contact. */\n  securityContact: string;\n  /** details define other optional details. */\n  details: string;\n}\n\n/**\n * Validator defines a validator, together with the total amount of the\n * Validator's bond shares and their exchange rate to coins. Slashing results in\n * a decrease in the exchange rate, allowing correct calculation of future\n * undelegations without iterating over delegators. When coins are delegated to\n * this validator, the validator is credited with a delegation whose number of\n * bond shares is based on the amount of coins delegated divided by the current\n * exchange rate. Voting power can be calculated as total bonded shares\n * multiplied by exchange rate.\n */\nexport interface Validator {\n  /** operator_address defines the address of the validator's operator; bech encoded in JSON. */\n  operatorAddress: string;\n  /** consensus_pubkey is the consensus public key of the validator, as a Protobuf Any. */\n  consensusPubkey?: Any;\n  /** jailed defined whether the validator has been jailed from bonded status or not. */\n  jailed: boolean;\n  /** status is the validator status (bonded/unbonding/unbonded). */\n  status: BondStatus;\n  /** tokens define the delegated tokens (incl. self-delegation). */\n  tokens: string;\n  /** delegator_shares defines total shares issued to a validator's delegators. */\n  delegatorShares: string;\n  /** description defines the description terms for the validator. */\n  description?: Description;\n  /** unbonding_height defines, if unbonding, the height at which this validator has begun unbonding. */\n  unbondingHeight: Long;\n  /** unbonding_time defines, if unbonding, the min time for the validator to complete unbonding. */\n  unbondingTime?: Date;\n  /** commission defines the commission parameters. */\n  commission?: Commission;\n  /** min_self_delegation is the validator's self declared minimum self delegation. */\n  minSelfDelegation: string;\n}\n\n/** ValAddresses defines a repeated set of validator addresses. */\nexport interface ValAddresses {\n  addresses: string[];\n}\n\n/**\n * DVPair is struct that just has a delegator-validator pair with no other data.\n * It is intended to be used as a marshalable pointer. For example, a DVPair can\n * be used to construct the key to getting an UnbondingDelegation from state.\n */\nexport interface DVPair {\n  delegatorAddress: string;\n  validatorAddress: string;\n}\n\n/** DVPairs defines an array of DVPair objects. */\nexport interface DVPairs {\n  pairs: DVPair[];\n}\n\n/**\n * DVVTriplet is struct that just has a delegator-validator-validator triplet\n * with no other data. It is intended to be used as a marshalable pointer. For\n * example, a DVVTriplet can be used to construct the key to getting a\n * Redelegation from state.\n */\nexport interface DVVTriplet {\n  delegatorAddress: string;\n  validatorSrcAddress: string;\n  validatorDstAddress: string;\n}\n\n/** DVVTriplets defines an array of DVVTriplet objects. */\nexport interface DVVTriplets {\n  triplets: DVVTriplet[];\n}\n\n/**\n * Delegation represents the bond with tokens held by an account. It is\n * owned by one delegator, and is associated with the voting power of one\n * validator.\n */\nexport interface Delegation {\n  /** delegator_address is the bech32-encoded address of the delegator. */\n  delegatorAddress: string;\n  /** validator_address is the bech32-encoded address of the validator. */\n  validatorAddress: string;\n  /** shares define the delegation shares received. */\n  shares: string;\n}\n\n/**\n * UnbondingDelegation stores all of a single delegator's unbonding bonds\n * for a single validator in an time-ordered list.\n */\nexport interface UnbondingDelegation {\n  /** delegator_address is the bech32-encoded address of the delegator. */\n  delegatorAddress: string;\n  /** validator_address is the bech32-encoded address of the validator. */\n  validatorAddress: string;\n  /** entries are the unbonding delegation entries. */\n  entries: UnbondingDelegationEntry[];\n}\n\n/** UnbondingDelegationEntry defines an unbonding object with relevant metadata. */\nexport interface UnbondingDelegationEntry {\n  /** creation_height is the height which the unbonding took place. */\n  creationHeight: Long;\n  /** completion_time is the unix time for unbonding completion. */\n  completionTime?: Date;\n  /** initial_balance defines the tokens initially scheduled to receive at completion. */\n  initialBalance: string;\n  /** balance defines the tokens to receive at completion. */\n  balance: string;\n}\n\n/** RedelegationEntry defines a redelegation object with relevant metadata. */\nexport interface RedelegationEntry {\n  /** creation_height  defines the height which the redelegation took place. */\n  creationHeight: Long;\n  /** completion_time defines the unix time for redelegation completion. */\n  completionTime?: Date;\n  /** initial_balance defines the initial balance when redelegation started. */\n  initialBalance: string;\n  /** shares_dst is the amount of destination-validator shares created by redelegation. */\n  sharesDst: string;\n}\n\n/**\n * Redelegation contains the list of a particular delegator's redelegating bonds\n * from a particular source validator to a particular destination validator.\n */\nexport interface Redelegation {\n  /** delegator_address is the bech32-encoded address of the delegator. */\n  delegatorAddress: string;\n  /** validator_src_address is the validator redelegation source operator address. */\n  validatorSrcAddress: string;\n  /** validator_dst_address is the validator redelegation destination operator address. */\n  validatorDstAddress: string;\n  /** entries are the redelegation entries. */\n  entries: RedelegationEntry[];\n}\n\n/** Params defines the parameters for the staking module. */\nexport interface Params {\n  /** unbonding_time is the time duration of unbonding. */\n  unbondingTime?: Duration;\n  /** max_validators is the maximum number of validators. */\n  maxValidators: number;\n  /** max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio). */\n  maxEntries: number;\n  /** historical_entries is the number of historical entries to persist. */\n  historicalEntries: number;\n  /** bond_denom defines the bondable coin denomination. */\n  bondDenom: string;\n}\n\n/**\n * DelegationResponse is equivalent to Delegation except that it contains a\n * balance in addition to shares which is more suitable for client responses.\n */\nexport interface DelegationResponse {\n  delegation?: Delegation;\n  balance?: Coin;\n}\n\n/**\n * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it\n * contains a balance in addition to shares which is more suitable for client\n * responses.\n */\nexport interface RedelegationEntryResponse {\n  redelegationEntry?: RedelegationEntry;\n  balance: string;\n}\n\n/**\n * RedelegationResponse is equivalent to a Redelegation except that its entries\n * contain a balance in addition to shares which is more suitable for client\n * responses.\n */\nexport interface RedelegationResponse {\n  redelegation?: Redelegation;\n  entries: RedelegationEntryResponse[];\n}\n\n/**\n * Pool is used for tracking bonded and not-bonded token supply of the bond\n * denomination.\n */\nexport interface Pool {\n  notBondedTokens: string;\n  bondedTokens: string;\n}\n\nfunction createBaseHistoricalInfo(): HistoricalInfo {\n  return { header: undefined, valset: [] };\n}\n\nexport const HistoricalInfo = {\n  encode(\n    message: HistoricalInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.header !== undefined) {\n      Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.valset) {\n      Validator.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): HistoricalInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseHistoricalInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.header = Header.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.valset.push(Validator.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): HistoricalInfo {\n    return {\n      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,\n      valset: Array.isArray(object?.valset)\n        ? object.valset.map((e: any) => Validator.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: HistoricalInfo): unknown {\n    const obj: any = {};\n    message.header !== undefined &&\n      (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n    if (message.valset) {\n      obj.valset = message.valset.map((e) =>\n        e ? Validator.toJSON(e) : undefined\n      );\n    } else {\n      obj.valset = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<HistoricalInfo>, I>>(\n    object: I\n  ): HistoricalInfo {\n    const message = createBaseHistoricalInfo();\n    message.header =\n      object.header !== undefined && object.header !== null\n        ? Header.fromPartial(object.header)\n        : undefined;\n    message.valset = object.valset?.map((e) => Validator.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseCommissionRates(): CommissionRates {\n  return { rate: \"\", maxRate: \"\", maxChangeRate: \"\" };\n}\n\nexport const CommissionRates = {\n  encode(\n    message: CommissionRates,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.rate !== \"\") {\n      writer.uint32(10).string(message.rate);\n    }\n    if (message.maxRate !== \"\") {\n      writer.uint32(18).string(message.maxRate);\n    }\n    if (message.maxChangeRate !== \"\") {\n      writer.uint32(26).string(message.maxChangeRate);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CommissionRates {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCommissionRates();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.rate = reader.string();\n          break;\n        case 2:\n          message.maxRate = reader.string();\n          break;\n        case 3:\n          message.maxChangeRate = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): CommissionRates {\n    return {\n      rate: isSet(object.rate) ? String(object.rate) : \"\",\n      maxRate: isSet(object.maxRate) ? String(object.maxRate) : \"\",\n      maxChangeRate: isSet(object.maxChangeRate)\n        ? String(object.maxChangeRate)\n        : \"\",\n    };\n  },\n\n  toJSON(message: CommissionRates): unknown {\n    const obj: any = {};\n    message.rate !== undefined && (obj.rate = message.rate);\n    message.maxRate !== undefined && (obj.maxRate = message.maxRate);\n    message.maxChangeRate !== undefined &&\n      (obj.maxChangeRate = message.maxChangeRate);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<CommissionRates>, I>>(\n    object: I\n  ): CommissionRates {\n    const message = createBaseCommissionRates();\n    message.rate = object.rate ?? \"\";\n    message.maxRate = object.maxRate ?? \"\";\n    message.maxChangeRate = object.maxChangeRate ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseCommission(): Commission {\n  return { commissionRates: undefined, updateTime: undefined };\n}\n\nexport const Commission = {\n  encode(\n    message: Commission,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.commissionRates !== undefined) {\n      CommissionRates.encode(\n        message.commissionRates,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.updateTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.updateTime),\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Commission {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCommission();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.commissionRates = CommissionRates.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 2:\n          message.updateTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Commission {\n    return {\n      commissionRates: isSet(object.commissionRates)\n        ? CommissionRates.fromJSON(object.commissionRates)\n        : undefined,\n      updateTime: isSet(object.updateTime)\n        ? fromJsonTimestamp(object.updateTime)\n        : undefined,\n    };\n  },\n\n  toJSON(message: Commission): unknown {\n    const obj: any = {};\n    message.commissionRates !== undefined &&\n      (obj.commissionRates = message.commissionRates\n        ? CommissionRates.toJSON(message.commissionRates)\n        : undefined);\n    message.updateTime !== undefined &&\n      (obj.updateTime = message.updateTime.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Commission>, I>>(\n    object: I\n  ): Commission {\n    const message = createBaseCommission();\n    message.commissionRates =\n      object.commissionRates !== undefined && object.commissionRates !== null\n        ? CommissionRates.fromPartial(object.commissionRates)\n        : undefined;\n    message.updateTime = object.updateTime ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseDescription(): Description {\n  return {\n    moniker: \"\",\n    identity: \"\",\n    website: \"\",\n    securityContact: \"\",\n    details: \"\",\n  };\n}\n\nexport const Description = {\n  encode(\n    message: Description,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.moniker !== \"\") {\n      writer.uint32(10).string(message.moniker);\n    }\n    if (message.identity !== \"\") {\n      writer.uint32(18).string(message.identity);\n    }\n    if (message.website !== \"\") {\n      writer.uint32(26).string(message.website);\n    }\n    if (message.securityContact !== \"\") {\n      writer.uint32(34).string(message.securityContact);\n    }\n    if (message.details !== \"\") {\n      writer.uint32(42).string(message.details);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Description {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDescription();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.moniker = reader.string();\n          break;\n        case 2:\n          message.identity = reader.string();\n          break;\n        case 3:\n          message.website = reader.string();\n          break;\n        case 4:\n          message.securityContact = reader.string();\n          break;\n        case 5:\n          message.details = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Description {\n    return {\n      moniker: isSet(object.moniker) ? String(object.moniker) : \"\",\n      identity: isSet(object.identity) ? String(object.identity) : \"\",\n      website: isSet(object.website) ? String(object.website) : \"\",\n      securityContact: isSet(object.securityContact)\n        ? String(object.securityContact)\n        : \"\",\n      details: isSet(object.details) ? String(object.details) : \"\",\n    };\n  },\n\n  toJSON(message: Description): unknown {\n    const obj: any = {};\n    message.moniker !== undefined && (obj.moniker = message.moniker);\n    message.identity !== undefined && (obj.identity = message.identity);\n    message.website !== undefined && (obj.website = message.website);\n    message.securityContact !== undefined &&\n      (obj.securityContact = message.securityContact);\n    message.details !== undefined && (obj.details = message.details);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Description>, I>>(\n    object: I\n  ): Description {\n    const message = createBaseDescription();\n    message.moniker = object.moniker ?? \"\";\n    message.identity = object.identity ?? \"\";\n    message.website = object.website ?? \"\";\n    message.securityContact = object.securityContact ?? \"\";\n    message.details = object.details ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseValidator(): Validator {\n  return {\n    operatorAddress: \"\",\n    consensusPubkey: undefined,\n    jailed: false,\n    status: 0,\n    tokens: \"\",\n    delegatorShares: \"\",\n    description: undefined,\n    unbondingHeight: Long.ZERO,\n    unbondingTime: undefined,\n    commission: undefined,\n    minSelfDelegation: \"\",\n  };\n}\n\nexport const Validator = {\n  encode(\n    message: Validator,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.operatorAddress !== \"\") {\n      writer.uint32(10).string(message.operatorAddress);\n    }\n    if (message.consensusPubkey !== undefined) {\n      Any.encode(message.consensusPubkey, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.jailed === true) {\n      writer.uint32(24).bool(message.jailed);\n    }\n    if (message.status !== 0) {\n      writer.uint32(32).int32(message.status);\n    }\n    if (message.tokens !== \"\") {\n      writer.uint32(42).string(message.tokens);\n    }\n    if (message.delegatorShares !== \"\") {\n      writer.uint32(50).string(message.delegatorShares);\n    }\n    if (message.description !== undefined) {\n      Description.encode(\n        message.description,\n        writer.uint32(58).fork()\n      ).ldelim();\n    }\n    if (!message.unbondingHeight.isZero()) {\n      writer.uint32(64).int64(message.unbondingHeight);\n    }\n    if (message.unbondingTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.unbondingTime),\n        writer.uint32(74).fork()\n      ).ldelim();\n    }\n    if (message.commission !== undefined) {\n      Commission.encode(message.commission, writer.uint32(82).fork()).ldelim();\n    }\n    if (message.minSelfDelegation !== \"\") {\n      writer.uint32(90).string(message.minSelfDelegation);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Validator {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValidator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.operatorAddress = reader.string();\n          break;\n        case 2:\n          message.consensusPubkey = Any.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.jailed = reader.bool();\n          break;\n        case 4:\n          message.status = reader.int32() as any;\n          break;\n        case 5:\n          message.tokens = reader.string();\n          break;\n        case 6:\n          message.delegatorShares = reader.string();\n          break;\n        case 7:\n          message.description = Description.decode(reader, reader.uint32());\n          break;\n        case 8:\n          message.unbondingHeight = reader.int64() as Long;\n          break;\n        case 9:\n          message.unbondingTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 10:\n          message.commission = Commission.decode(reader, reader.uint32());\n          break;\n        case 11:\n          message.minSelfDelegation = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Validator {\n    return {\n      operatorAddress: isSet(object.operatorAddress)\n        ? String(object.operatorAddress)\n        : \"\",\n      consensusPubkey: isSet(object.consensusPubkey)\n        ? Any.fromJSON(object.consensusPubkey)\n        : undefined,\n      jailed: isSet(object.jailed) ? Boolean(object.jailed) : false,\n      status: isSet(object.status) ? bondStatusFromJSON(object.status) : 0,\n      tokens: isSet(object.tokens) ? String(object.tokens) : \"\",\n      delegatorShares: isSet(object.delegatorShares)\n        ? String(object.delegatorShares)\n        : \"\",\n      description: isSet(object.description)\n        ? Description.fromJSON(object.description)\n        : undefined,\n      unbondingHeight: isSet(object.unbondingHeight)\n        ? Long.fromValue(object.unbondingHeight)\n        : Long.ZERO,\n      unbondingTime: isSet(object.unbondingTime)\n        ? fromJsonTimestamp(object.unbondingTime)\n        : undefined,\n      commission: isSet(object.commission)\n        ? Commission.fromJSON(object.commission)\n        : undefined,\n      minSelfDelegation: isSet(object.minSelfDelegation)\n        ? String(object.minSelfDelegation)\n        : \"\",\n    };\n  },\n\n  toJSON(message: Validator): unknown {\n    const obj: any = {};\n    message.operatorAddress !== undefined &&\n      (obj.operatorAddress = message.operatorAddress);\n    message.consensusPubkey !== undefined &&\n      (obj.consensusPubkey = message.consensusPubkey\n        ? Any.toJSON(message.consensusPubkey)\n        : undefined);\n    message.jailed !== undefined && (obj.jailed = message.jailed);\n    message.status !== undefined &&\n      (obj.status = bondStatusToJSON(message.status));\n    message.tokens !== undefined && (obj.tokens = message.tokens);\n    message.delegatorShares !== undefined &&\n      (obj.delegatorShares = message.delegatorShares);\n    message.description !== undefined &&\n      (obj.description = message.description\n        ? Description.toJSON(message.description)\n        : undefined);\n    message.unbondingHeight !== undefined &&\n      (obj.unbondingHeight = (message.unbondingHeight || Long.ZERO).toString());\n    message.unbondingTime !== undefined &&\n      (obj.unbondingTime = message.unbondingTime.toISOString());\n    message.commission !== undefined &&\n      (obj.commission = message.commission\n        ? Commission.toJSON(message.commission)\n        : undefined);\n    message.minSelfDelegation !== undefined &&\n      (obj.minSelfDelegation = message.minSelfDelegation);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Validator>, I>>(\n    object: I\n  ): Validator {\n    const message = createBaseValidator();\n    message.operatorAddress = object.operatorAddress ?? \"\";\n    message.consensusPubkey =\n      object.consensusPubkey !== undefined && object.consensusPubkey !== null\n        ? Any.fromPartial(object.consensusPubkey)\n        : undefined;\n    message.jailed = object.jailed ?? false;\n    message.status = object.status ?? 0;\n    message.tokens = object.tokens ?? \"\";\n    message.delegatorShares = object.delegatorShares ?? \"\";\n    message.description =\n      object.description !== undefined && object.description !== null\n        ? Description.fromPartial(object.description)\n        : undefined;\n    message.unbondingHeight =\n      object.unbondingHeight !== undefined && object.unbondingHeight !== null\n        ? Long.fromValue(object.unbondingHeight)\n        : Long.ZERO;\n    message.unbondingTime = object.unbondingTime ?? undefined;\n    message.commission =\n      object.commission !== undefined && object.commission !== null\n        ? Commission.fromPartial(object.commission)\n        : undefined;\n    message.minSelfDelegation = object.minSelfDelegation ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseValAddresses(): ValAddresses {\n  return { addresses: [] };\n}\n\nexport const ValAddresses = {\n  encode(\n    message: ValAddresses,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.addresses) {\n      writer.uint32(10).string(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ValAddresses {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValAddresses();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.addresses.push(reader.string());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ValAddresses {\n    return {\n      addresses: Array.isArray(object?.addresses)\n        ? object.addresses.map((e: any) => String(e))\n        : [],\n    };\n  },\n\n  toJSON(message: ValAddresses): unknown {\n    const obj: any = {};\n    if (message.addresses) {\n      obj.addresses = message.addresses.map((e) => e);\n    } else {\n      obj.addresses = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ValAddresses>, I>>(\n    object: I\n  ): ValAddresses {\n    const message = createBaseValAddresses();\n    message.addresses = object.addresses?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseDVPair(): DVPair {\n  return { delegatorAddress: \"\", validatorAddress: \"\" };\n}\n\nexport const DVPair = {\n  encode(\n    message: DVPair,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DVPair {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDVPair();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DVPair {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n    };\n  },\n\n  toJSON(message: DVPair): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DVPair>, I>>(object: I): DVPair {\n    const message = createBaseDVPair();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDVPairs(): DVPairs {\n  return { pairs: [] };\n}\n\nexport const DVPairs = {\n  encode(\n    message: DVPairs,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.pairs) {\n      DVPair.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DVPairs {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDVPairs();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.pairs.push(DVPair.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DVPairs {\n    return {\n      pairs: Array.isArray(object?.pairs)\n        ? object.pairs.map((e: any) => DVPair.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: DVPairs): unknown {\n    const obj: any = {};\n    if (message.pairs) {\n      obj.pairs = message.pairs.map((e) => (e ? DVPair.toJSON(e) : undefined));\n    } else {\n      obj.pairs = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DVPairs>, I>>(object: I): DVPairs {\n    const message = createBaseDVPairs();\n    message.pairs = object.pairs?.map((e) => DVPair.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseDVVTriplet(): DVVTriplet {\n  return {\n    delegatorAddress: \"\",\n    validatorSrcAddress: \"\",\n    validatorDstAddress: \"\",\n  };\n}\n\nexport const DVVTriplet = {\n  encode(\n    message: DVVTriplet,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorSrcAddress !== \"\") {\n      writer.uint32(18).string(message.validatorSrcAddress);\n    }\n    if (message.validatorDstAddress !== \"\") {\n      writer.uint32(26).string(message.validatorDstAddress);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DVVTriplet {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDVVTriplet();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorSrcAddress = reader.string();\n          break;\n        case 3:\n          message.validatorDstAddress = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DVVTriplet {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorSrcAddress: isSet(object.validatorSrcAddress)\n        ? String(object.validatorSrcAddress)\n        : \"\",\n      validatorDstAddress: isSet(object.validatorDstAddress)\n        ? String(object.validatorDstAddress)\n        : \"\",\n    };\n  },\n\n  toJSON(message: DVVTriplet): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorSrcAddress !== undefined &&\n      (obj.validatorSrcAddress = message.validatorSrcAddress);\n    message.validatorDstAddress !== undefined &&\n      (obj.validatorDstAddress = message.validatorDstAddress);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DVVTriplet>, I>>(\n    object: I\n  ): DVVTriplet {\n    const message = createBaseDVVTriplet();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorSrcAddress = object.validatorSrcAddress ?? \"\";\n    message.validatorDstAddress = object.validatorDstAddress ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDVVTriplets(): DVVTriplets {\n  return { triplets: [] };\n}\n\nexport const DVVTriplets = {\n  encode(\n    message: DVVTriplets,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.triplets) {\n      DVVTriplet.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DVVTriplets {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDVVTriplets();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.triplets.push(DVVTriplet.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DVVTriplets {\n    return {\n      triplets: Array.isArray(object?.triplets)\n        ? object.triplets.map((e: any) => DVVTriplet.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: DVVTriplets): unknown {\n    const obj: any = {};\n    if (message.triplets) {\n      obj.triplets = message.triplets.map((e) =>\n        e ? DVVTriplet.toJSON(e) : undefined\n      );\n    } else {\n      obj.triplets = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DVVTriplets>, I>>(\n    object: I\n  ): DVVTriplets {\n    const message = createBaseDVVTriplets();\n    message.triplets =\n      object.triplets?.map((e) => DVVTriplet.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseDelegation(): Delegation {\n  return { delegatorAddress: \"\", validatorAddress: \"\", shares: \"\" };\n}\n\nexport const Delegation = {\n  encode(\n    message: Delegation,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    if (message.shares !== \"\") {\n      writer.uint32(26).string(message.shares);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Delegation {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDelegation();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.shares = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Delegation {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n      shares: isSet(object.shares) ? String(object.shares) : \"\",\n    };\n  },\n\n  toJSON(message: Delegation): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    message.shares !== undefined && (obj.shares = message.shares);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Delegation>, I>>(\n    object: I\n  ): Delegation {\n    const message = createBaseDelegation();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    message.shares = object.shares ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseUnbondingDelegation(): UnbondingDelegation {\n  return { delegatorAddress: \"\", validatorAddress: \"\", entries: [] };\n}\n\nexport const UnbondingDelegation = {\n  encode(\n    message: UnbondingDelegation,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    for (const v of message.entries) {\n      UnbondingDelegationEntry.encode(v!, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): UnbondingDelegation {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseUnbondingDelegation();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.entries.push(\n            UnbondingDelegationEntry.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): UnbondingDelegation {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n      entries: Array.isArray(object?.entries)\n        ? object.entries.map((e: any) => UnbondingDelegationEntry.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: UnbondingDelegation): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    if (message.entries) {\n      obj.entries = message.entries.map((e) =>\n        e ? UnbondingDelegationEntry.toJSON(e) : undefined\n      );\n    } else {\n      obj.entries = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<UnbondingDelegation>, I>>(\n    object: I\n  ): UnbondingDelegation {\n    const message = createBaseUnbondingDelegation();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    message.entries =\n      object.entries?.map((e) => UnbondingDelegationEntry.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseUnbondingDelegationEntry(): UnbondingDelegationEntry {\n  return {\n    creationHeight: Long.ZERO,\n    completionTime: undefined,\n    initialBalance: \"\",\n    balance: \"\",\n  };\n}\n\nexport const UnbondingDelegationEntry = {\n  encode(\n    message: UnbondingDelegationEntry,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.creationHeight.isZero()) {\n      writer.uint32(8).int64(message.creationHeight);\n    }\n    if (message.completionTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.completionTime),\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    if (message.initialBalance !== \"\") {\n      writer.uint32(26).string(message.initialBalance);\n    }\n    if (message.balance !== \"\") {\n      writer.uint32(34).string(message.balance);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): UnbondingDelegationEntry {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseUnbondingDelegationEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creationHeight = reader.int64() as Long;\n          break;\n        case 2:\n          message.completionTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 3:\n          message.initialBalance = reader.string();\n          break;\n        case 4:\n          message.balance = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): UnbondingDelegationEntry {\n    return {\n      creationHeight: isSet(object.creationHeight)\n        ? Long.fromValue(object.creationHeight)\n        : Long.ZERO,\n      completionTime: isSet(object.completionTime)\n        ? fromJsonTimestamp(object.completionTime)\n        : undefined,\n      initialBalance: isSet(object.initialBalance)\n        ? String(object.initialBalance)\n        : \"\",\n      balance: isSet(object.balance) ? String(object.balance) : \"\",\n    };\n  },\n\n  toJSON(message: UnbondingDelegationEntry): unknown {\n    const obj: any = {};\n    message.creationHeight !== undefined &&\n      (obj.creationHeight = (message.creationHeight || Long.ZERO).toString());\n    message.completionTime !== undefined &&\n      (obj.completionTime = message.completionTime.toISOString());\n    message.initialBalance !== undefined &&\n      (obj.initialBalance = message.initialBalance);\n    message.balance !== undefined && (obj.balance = message.balance);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<UnbondingDelegationEntry>, I>>(\n    object: I\n  ): UnbondingDelegationEntry {\n    const message = createBaseUnbondingDelegationEntry();\n    message.creationHeight =\n      object.creationHeight !== undefined && object.creationHeight !== null\n        ? Long.fromValue(object.creationHeight)\n        : Long.ZERO;\n    message.completionTime = object.completionTime ?? undefined;\n    message.initialBalance = object.initialBalance ?? \"\";\n    message.balance = object.balance ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseRedelegationEntry(): RedelegationEntry {\n  return {\n    creationHeight: Long.ZERO,\n    completionTime: undefined,\n    initialBalance: \"\",\n    sharesDst: \"\",\n  };\n}\n\nexport const RedelegationEntry = {\n  encode(\n    message: RedelegationEntry,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.creationHeight.isZero()) {\n      writer.uint32(8).int64(message.creationHeight);\n    }\n    if (message.completionTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.completionTime),\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    if (message.initialBalance !== \"\") {\n      writer.uint32(26).string(message.initialBalance);\n    }\n    if (message.sharesDst !== \"\") {\n      writer.uint32(34).string(message.sharesDst);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): RedelegationEntry {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRedelegationEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creationHeight = reader.int64() as Long;\n          break;\n        case 2:\n          message.completionTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        case 3:\n          message.initialBalance = reader.string();\n          break;\n        case 4:\n          message.sharesDst = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RedelegationEntry {\n    return {\n      creationHeight: isSet(object.creationHeight)\n        ? Long.fromValue(object.creationHeight)\n        : Long.ZERO,\n      completionTime: isSet(object.completionTime)\n        ? fromJsonTimestamp(object.completionTime)\n        : undefined,\n      initialBalance: isSet(object.initialBalance)\n        ? String(object.initialBalance)\n        : \"\",\n      sharesDst: isSet(object.sharesDst) ? String(object.sharesDst) : \"\",\n    };\n  },\n\n  toJSON(message: RedelegationEntry): unknown {\n    const obj: any = {};\n    message.creationHeight !== undefined &&\n      (obj.creationHeight = (message.creationHeight || Long.ZERO).toString());\n    message.completionTime !== undefined &&\n      (obj.completionTime = message.completionTime.toISOString());\n    message.initialBalance !== undefined &&\n      (obj.initialBalance = message.initialBalance);\n    message.sharesDst !== undefined && (obj.sharesDst = message.sharesDst);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RedelegationEntry>, I>>(\n    object: I\n  ): RedelegationEntry {\n    const message = createBaseRedelegationEntry();\n    message.creationHeight =\n      object.creationHeight !== undefined && object.creationHeight !== null\n        ? Long.fromValue(object.creationHeight)\n        : Long.ZERO;\n    message.completionTime = object.completionTime ?? undefined;\n    message.initialBalance = object.initialBalance ?? \"\";\n    message.sharesDst = object.sharesDst ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseRedelegation(): Redelegation {\n  return {\n    delegatorAddress: \"\",\n    validatorSrcAddress: \"\",\n    validatorDstAddress: \"\",\n    entries: [],\n  };\n}\n\nexport const Redelegation = {\n  encode(\n    message: Redelegation,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorSrcAddress !== \"\") {\n      writer.uint32(18).string(message.validatorSrcAddress);\n    }\n    if (message.validatorDstAddress !== \"\") {\n      writer.uint32(26).string(message.validatorDstAddress);\n    }\n    for (const v of message.entries) {\n      RedelegationEntry.encode(v!, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Redelegation {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRedelegation();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorSrcAddress = reader.string();\n          break;\n        case 3:\n          message.validatorDstAddress = reader.string();\n          break;\n        case 4:\n          message.entries.push(\n            RedelegationEntry.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Redelegation {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorSrcAddress: isSet(object.validatorSrcAddress)\n        ? String(object.validatorSrcAddress)\n        : \"\",\n      validatorDstAddress: isSet(object.validatorDstAddress)\n        ? String(object.validatorDstAddress)\n        : \"\",\n      entries: Array.isArray(object?.entries)\n        ? object.entries.map((e: any) => RedelegationEntry.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Redelegation): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorSrcAddress !== undefined &&\n      (obj.validatorSrcAddress = message.validatorSrcAddress);\n    message.validatorDstAddress !== undefined &&\n      (obj.validatorDstAddress = message.validatorDstAddress);\n    if (message.entries) {\n      obj.entries = message.entries.map((e) =>\n        e ? RedelegationEntry.toJSON(e) : undefined\n      );\n    } else {\n      obj.entries = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Redelegation>, I>>(\n    object: I\n  ): Redelegation {\n    const message = createBaseRedelegation();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorSrcAddress = object.validatorSrcAddress ?? \"\";\n    message.validatorDstAddress = object.validatorDstAddress ?? \"\";\n    message.entries =\n      object.entries?.map((e) => RedelegationEntry.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseParams(): Params {\n  return {\n    unbondingTime: undefined,\n    maxValidators: 0,\n    maxEntries: 0,\n    historicalEntries: 0,\n    bondDenom: \"\",\n  };\n}\n\nexport const Params = {\n  encode(\n    message: Params,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.unbondingTime !== undefined) {\n      Duration.encode(message.unbondingTime, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.maxValidators !== 0) {\n      writer.uint32(16).uint32(message.maxValidators);\n    }\n    if (message.maxEntries !== 0) {\n      writer.uint32(24).uint32(message.maxEntries);\n    }\n    if (message.historicalEntries !== 0) {\n      writer.uint32(32).uint32(message.historicalEntries);\n    }\n    if (message.bondDenom !== \"\") {\n      writer.uint32(42).string(message.bondDenom);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Params {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.unbondingTime = Duration.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.maxValidators = reader.uint32();\n          break;\n        case 3:\n          message.maxEntries = reader.uint32();\n          break;\n        case 4:\n          message.historicalEntries = reader.uint32();\n          break;\n        case 5:\n          message.bondDenom = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Params {\n    return {\n      unbondingTime: isSet(object.unbondingTime)\n        ? Duration.fromJSON(object.unbondingTime)\n        : undefined,\n      maxValidators: isSet(object.maxValidators)\n        ? Number(object.maxValidators)\n        : 0,\n      maxEntries: isSet(object.maxEntries) ? Number(object.maxEntries) : 0,\n      historicalEntries: isSet(object.historicalEntries)\n        ? Number(object.historicalEntries)\n        : 0,\n      bondDenom: isSet(object.bondDenom) ? String(object.bondDenom) : \"\",\n    };\n  },\n\n  toJSON(message: Params): unknown {\n    const obj: any = {};\n    message.unbondingTime !== undefined &&\n      (obj.unbondingTime = message.unbondingTime\n        ? Duration.toJSON(message.unbondingTime)\n        : undefined);\n    message.maxValidators !== undefined &&\n      (obj.maxValidators = Math.round(message.maxValidators));\n    message.maxEntries !== undefined &&\n      (obj.maxEntries = Math.round(message.maxEntries));\n    message.historicalEntries !== undefined &&\n      (obj.historicalEntries = Math.round(message.historicalEntries));\n    message.bondDenom !== undefined && (obj.bondDenom = message.bondDenom);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {\n    const message = createBaseParams();\n    message.unbondingTime =\n      object.unbondingTime !== undefined && object.unbondingTime !== null\n        ? Duration.fromPartial(object.unbondingTime)\n        : undefined;\n    message.maxValidators = object.maxValidators ?? 0;\n    message.maxEntries = object.maxEntries ?? 0;\n    message.historicalEntries = object.historicalEntries ?? 0;\n    message.bondDenom = object.bondDenom ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseDelegationResponse(): DelegationResponse {\n  return { delegation: undefined, balance: undefined };\n}\n\nexport const DelegationResponse = {\n  encode(\n    message: DelegationResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegation !== undefined) {\n      Delegation.encode(message.delegation, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.balance !== undefined) {\n      Coin.encode(message.balance, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DelegationResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDelegationResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegation = Delegation.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.balance = Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DelegationResponse {\n    return {\n      delegation: isSet(object.delegation)\n        ? Delegation.fromJSON(object.delegation)\n        : undefined,\n      balance: isSet(object.balance)\n        ? Coin.fromJSON(object.balance)\n        : undefined,\n    };\n  },\n\n  toJSON(message: DelegationResponse): unknown {\n    const obj: any = {};\n    message.delegation !== undefined &&\n      (obj.delegation = message.delegation\n        ? Delegation.toJSON(message.delegation)\n        : undefined);\n    message.balance !== undefined &&\n      (obj.balance = message.balance\n        ? Coin.toJSON(message.balance)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DelegationResponse>, I>>(\n    object: I\n  ): DelegationResponse {\n    const message = createBaseDelegationResponse();\n    message.delegation =\n      object.delegation !== undefined && object.delegation !== null\n        ? Delegation.fromPartial(object.delegation)\n        : undefined;\n    message.balance =\n      object.balance !== undefined && object.balance !== null\n        ? Coin.fromPartial(object.balance)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseRedelegationEntryResponse(): RedelegationEntryResponse {\n  return { redelegationEntry: undefined, balance: \"\" };\n}\n\nexport const RedelegationEntryResponse = {\n  encode(\n    message: RedelegationEntryResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.redelegationEntry !== undefined) {\n      RedelegationEntry.encode(\n        message.redelegationEntry,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.balance !== \"\") {\n      writer.uint32(34).string(message.balance);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RedelegationEntryResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRedelegationEntryResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.redelegationEntry = RedelegationEntry.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 4:\n          message.balance = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RedelegationEntryResponse {\n    return {\n      redelegationEntry: isSet(object.redelegationEntry)\n        ? RedelegationEntry.fromJSON(object.redelegationEntry)\n        : undefined,\n      balance: isSet(object.balance) ? String(object.balance) : \"\",\n    };\n  },\n\n  toJSON(message: RedelegationEntryResponse): unknown {\n    const obj: any = {};\n    message.redelegationEntry !== undefined &&\n      (obj.redelegationEntry = message.redelegationEntry\n        ? RedelegationEntry.toJSON(message.redelegationEntry)\n        : undefined);\n    message.balance !== undefined && (obj.balance = message.balance);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RedelegationEntryResponse>, I>>(\n    object: I\n  ): RedelegationEntryResponse {\n    const message = createBaseRedelegationEntryResponse();\n    message.redelegationEntry =\n      object.redelegationEntry !== undefined &&\n      object.redelegationEntry !== null\n        ? RedelegationEntry.fromPartial(object.redelegationEntry)\n        : undefined;\n    message.balance = object.balance ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseRedelegationResponse(): RedelegationResponse {\n  return { redelegation: undefined, entries: [] };\n}\n\nexport const RedelegationResponse = {\n  encode(\n    message: RedelegationResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.redelegation !== undefined) {\n      Redelegation.encode(\n        message.redelegation,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    for (const v of message.entries) {\n      RedelegationEntryResponse.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): RedelegationResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseRedelegationResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.redelegation = Redelegation.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.entries.push(\n            RedelegationEntryResponse.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): RedelegationResponse {\n    return {\n      redelegation: isSet(object.redelegation)\n        ? Redelegation.fromJSON(object.redelegation)\n        : undefined,\n      entries: Array.isArray(object?.entries)\n        ? object.entries.map((e: any) => RedelegationEntryResponse.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: RedelegationResponse): unknown {\n    const obj: any = {};\n    message.redelegation !== undefined &&\n      (obj.redelegation = message.redelegation\n        ? Redelegation.toJSON(message.redelegation)\n        : undefined);\n    if (message.entries) {\n      obj.entries = message.entries.map((e) =>\n        e ? RedelegationEntryResponse.toJSON(e) : undefined\n      );\n    } else {\n      obj.entries = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<RedelegationResponse>, I>>(\n    object: I\n  ): RedelegationResponse {\n    const message = createBaseRedelegationResponse();\n    message.redelegation =\n      object.redelegation !== undefined && object.redelegation !== null\n        ? Redelegation.fromPartial(object.redelegation)\n        : undefined;\n    message.entries =\n      object.entries?.map((e) => RedelegationEntryResponse.fromPartial(e)) ||\n      [];\n    return message;\n  },\n};\n\nfunction createBasePool(): Pool {\n  return { notBondedTokens: \"\", bondedTokens: \"\" };\n}\n\nexport const Pool = {\n  encode(message: Pool, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.notBondedTokens !== \"\") {\n      writer.uint32(10).string(message.notBondedTokens);\n    }\n    if (message.bondedTokens !== \"\") {\n      writer.uint32(18).string(message.bondedTokens);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Pool {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePool();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.notBondedTokens = reader.string();\n          break;\n        case 2:\n          message.bondedTokens = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Pool {\n    return {\n      notBondedTokens: isSet(object.notBondedTokens)\n        ? String(object.notBondedTokens)\n        : \"\",\n      bondedTokens: isSet(object.bondedTokens)\n        ? String(object.bondedTokens)\n        : \"\",\n    };\n  },\n\n  toJSON(message: Pool): unknown {\n    const obj: any = {};\n    message.notBondedTokens !== undefined &&\n      (obj.notBondedTokens = message.notBondedTokens);\n    message.bondedTokens !== undefined &&\n      (obj.bondedTokens = message.bondedTokens);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Pool>, I>>(object: I): Pool {\n    const message = createBasePool();\n    message.notBondedTokens = object.notBondedTokens ?? \"\";\n    message.bondedTokens = object.bondedTokens ?? \"\";\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nfunction toTimestamp(date: Date): Timestamp {\n  const seconds = numberToLong(date.getTime() / 1_000);\n  const nanos = (date.getTime() % 1_000) * 1_000_000;\n  return { seconds, nanos };\n}\n\nfunction fromTimestamp(t: Timestamp): Date {\n  let millis = t.seconds.toNumber() * 1_000;\n  millis += t.nanos / 1_000_000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o: any): Date {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction numberToLong(number: number) {\n  return Long.fromNumber(number);\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"tendermint.crypto\";\n\nexport interface Proof {\n  total: Long;\n  index: Long;\n  leafHash: Uint8Array;\n  aunts: Uint8Array[];\n}\n\nexport interface ValueOp {\n  /** Encoded in ProofOp.Key. */\n  key: Uint8Array;\n  /** To encode in ProofOp.Data */\n  proof?: Proof;\n}\n\nexport interface DominoOp {\n  key: string;\n  input: string;\n  output: string;\n}\n\n/**\n * ProofOp defines an operation used for calculating Merkle root\n * The data could be arbitrary format, providing nessecary data\n * for example neighbouring node hash\n */\nexport interface ProofOp {\n  type: string;\n  key: Uint8Array;\n  data: Uint8Array;\n}\n\n/** ProofOps is Merkle proof defined by the list of ProofOps */\nexport interface ProofOps {\n  ops: ProofOp[];\n}\n\nfunction createBaseProof(): Proof {\n  return {\n    total: Long.ZERO,\n    index: Long.ZERO,\n    leafHash: new Uint8Array(),\n    aunts: [],\n  };\n}\n\nexport const Proof = {\n  encode(message: Proof, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.total.isZero()) {\n      writer.uint32(8).int64(message.total);\n    }\n    if (!message.index.isZero()) {\n      writer.uint32(16).int64(message.index);\n    }\n    if (message.leafHash.length !== 0) {\n      writer.uint32(26).bytes(message.leafHash);\n    }\n    for (const v of message.aunts) {\n      writer.uint32(34).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Proof {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProof();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.total = reader.int64() as Long;\n          break;\n        case 2:\n          message.index = reader.int64() as Long;\n          break;\n        case 3:\n          message.leafHash = reader.bytes();\n          break;\n        case 4:\n          message.aunts.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Proof {\n    return {\n      total: isSet(object.total) ? Long.fromValue(object.total) : Long.ZERO,\n      index: isSet(object.index) ? Long.fromValue(object.index) : Long.ZERO,\n      leafHash: isSet(object.leafHash)\n        ? bytesFromBase64(object.leafHash)\n        : new Uint8Array(),\n      aunts: Array.isArray(object?.aunts)\n        ? object.aunts.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Proof): unknown {\n    const obj: any = {};\n    message.total !== undefined &&\n      (obj.total = (message.total || Long.ZERO).toString());\n    message.index !== undefined &&\n      (obj.index = (message.index || Long.ZERO).toString());\n    message.leafHash !== undefined &&\n      (obj.leafHash = base64FromBytes(\n        message.leafHash !== undefined ? message.leafHash : new Uint8Array()\n      ));\n    if (message.aunts) {\n      obj.aunts = message.aunts.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.aunts = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Proof>, I>>(object: I): Proof {\n    const message = createBaseProof();\n    message.total =\n      object.total !== undefined && object.total !== null\n        ? Long.fromValue(object.total)\n        : Long.ZERO;\n    message.index =\n      object.index !== undefined && object.index !== null\n        ? Long.fromValue(object.index)\n        : Long.ZERO;\n    message.leafHash = object.leafHash ?? new Uint8Array();\n    message.aunts = object.aunts?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseValueOp(): ValueOp {\n  return { key: new Uint8Array(), proof: undefined };\n}\n\nexport const ValueOp = {\n  encode(\n    message: ValueOp,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.proof !== undefined) {\n      Proof.encode(message.proof, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ValueOp {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValueOp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.proof = Proof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ValueOp {\n    return {\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n      proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined,\n    };\n  },\n\n  toJSON(message: ValueOp): unknown {\n    const obj: any = {};\n    message.key !== undefined &&\n      (obj.key = base64FromBytes(\n        message.key !== undefined ? message.key : new Uint8Array()\n      ));\n    message.proof !== undefined &&\n      (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ValueOp>, I>>(object: I): ValueOp {\n    const message = createBaseValueOp();\n    message.key = object.key ?? new Uint8Array();\n    message.proof =\n      object.proof !== undefined && object.proof !== null\n        ? Proof.fromPartial(object.proof)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseDominoOp(): DominoOp {\n  return { key: \"\", input: \"\", output: \"\" };\n}\n\nexport const DominoOp = {\n  encode(\n    message: DominoOp,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.input !== \"\") {\n      writer.uint32(18).string(message.input);\n    }\n    if (message.output !== \"\") {\n      writer.uint32(26).string(message.output);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): DominoOp {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseDominoOp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n        case 2:\n          message.input = reader.string();\n          break;\n        case 3:\n          message.output = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): DominoOp {\n    return {\n      key: isSet(object.key) ? String(object.key) : \"\",\n      input: isSet(object.input) ? String(object.input) : \"\",\n      output: isSet(object.output) ? String(object.output) : \"\",\n    };\n  },\n\n  toJSON(message: DominoOp): unknown {\n    const obj: any = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.input !== undefined && (obj.input = message.input);\n    message.output !== undefined && (obj.output = message.output);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<DominoOp>, I>>(object: I): DominoOp {\n    const message = createBaseDominoOp();\n    message.key = object.key ?? \"\";\n    message.input = object.input ?? \"\";\n    message.output = object.output ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseProofOp(): ProofOp {\n  return { type: \"\", key: new Uint8Array(), data: new Uint8Array() };\n}\n\nexport const ProofOp = {\n  encode(\n    message: ProofOp,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.type !== \"\") {\n      writer.uint32(10).string(message.type);\n    }\n    if (message.key.length !== 0) {\n      writer.uint32(18).bytes(message.key);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(26).bytes(message.data);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ProofOp {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProofOp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n        case 2:\n          message.key = reader.bytes();\n          break;\n        case 3:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ProofOp {\n    return {\n      type: isSet(object.type) ? String(object.type) : \"\",\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: ProofOp): unknown {\n    const obj: any = {};\n    message.type !== undefined && (obj.type = message.type);\n    message.key !== undefined &&\n      (obj.key = base64FromBytes(\n        message.key !== undefined ? message.key : new Uint8Array()\n      ));\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ProofOp>, I>>(object: I): ProofOp {\n    const message = createBaseProofOp();\n    message.type = object.type ?? \"\";\n    message.key = object.key ?? new Uint8Array();\n    message.data = object.data ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseProofOps(): ProofOps {\n  return { ops: [] };\n}\n\nexport const ProofOps = {\n  encode(\n    message: ProofOps,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.ops) {\n      ProofOp.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ProofOps {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProofOps();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.ops.push(ProofOp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ProofOps {\n    return {\n      ops: Array.isArray(object?.ops)\n        ? object.ops.map((e: any) => ProofOp.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: ProofOps): unknown {\n    const obj: any = {};\n    if (message.ops) {\n      obj.ops = message.ops.map((e) => (e ? ProofOp.toJSON(e) : undefined));\n    } else {\n      obj.ops = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ProofOps>, I>>(object: I): ProofOps {\n    const message = createBaseProofOps();\n    message.ops = object.ops?.map((e) => ProofOp.fromPartial(e)) || [];\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"tendermint.version\";\n\n/**\n * App includes the protocol and software version for the application.\n * This information is included in ResponseInfo. The App.Protocol can be\n * updated in ResponseEndBlock.\n */\nexport interface App {\n  protocol: Long;\n  software: string;\n}\n\n/**\n * Consensus captures the consensus rules for processing a block in the\n * blockchain, including all blockchain data structures and the rules of the\n * application's state transition machine.\n */\nexport interface Consensus {\n  block: Long;\n  app: Long;\n}\n\nfunction createBaseApp(): App {\n  return { protocol: Long.UZERO, software: \"\" };\n}\n\nexport const App = {\n  encode(message: App, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (!message.protocol.isZero()) {\n      writer.uint32(8).uint64(message.protocol);\n    }\n    if (message.software !== \"\") {\n      writer.uint32(18).string(message.software);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): App {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseApp();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.protocol = reader.uint64() as Long;\n          break;\n        case 2:\n          message.software = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): App {\n    return {\n      protocol: isSet(object.protocol)\n        ? Long.fromValue(object.protocol)\n        : Long.UZERO,\n      software: isSet(object.software) ? String(object.software) : \"\",\n    };\n  },\n\n  toJSON(message: App): unknown {\n    const obj: any = {};\n    message.protocol !== undefined &&\n      (obj.protocol = (message.protocol || Long.UZERO).toString());\n    message.software !== undefined && (obj.software = message.software);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<App>, I>>(object: I): App {\n    const message = createBaseApp();\n    message.protocol =\n      object.protocol !== undefined && object.protocol !== null\n        ? Long.fromValue(object.protocol)\n        : Long.UZERO;\n    message.software = object.software ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseConsensus(): Consensus {\n  return { block: Long.UZERO, app: Long.UZERO };\n}\n\nexport const Consensus = {\n  encode(\n    message: Consensus,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.block.isZero()) {\n      writer.uint32(8).uint64(message.block);\n    }\n    if (!message.app.isZero()) {\n      writer.uint32(16).uint64(message.app);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Consensus {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseConsensus();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.block = reader.uint64() as Long;\n          break;\n        case 2:\n          message.app = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Consensus {\n    return {\n      block: isSet(object.block) ? Long.fromValue(object.block) : Long.UZERO,\n      app: isSet(object.app) ? Long.fromValue(object.app) : Long.UZERO,\n    };\n  },\n\n  toJSON(message: Consensus): unknown {\n    const obj: any = {};\n    message.block !== undefined &&\n      (obj.block = (message.block || Long.UZERO).toString());\n    message.app !== undefined &&\n      (obj.app = (message.app || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Consensus>, I>>(\n    object: I\n  ): Consensus {\n    const message = createBaseConsensus();\n    message.block =\n      object.block !== undefined && object.block !== null\n        ? Long.fromValue(object.block)\n        : Long.UZERO;\n    message.app =\n      object.app !== undefined && object.app !== null\n        ? Long.fromValue(object.app)\n        : Long.UZERO;\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"tendermint.crypto\";\n\n/** PublicKey defines the keys available for use with Tendermint Validators */\nexport interface PublicKey {\n  ed25519: Uint8Array | undefined;\n  secp256k1: Uint8Array | undefined;\n}\n\nfunction createBasePublicKey(): PublicKey {\n  return { ed25519: undefined, secp256k1: undefined };\n}\n\nexport const PublicKey = {\n  encode(\n    message: PublicKey,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.ed25519 !== undefined) {\n      writer.uint32(10).bytes(message.ed25519);\n    }\n    if (message.secp256k1 !== undefined) {\n      writer.uint32(18).bytes(message.secp256k1);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PublicKey {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePublicKey();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.ed25519 = reader.bytes();\n          break;\n        case 2:\n          message.secp256k1 = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): PublicKey {\n    return {\n      ed25519: isSet(object.ed25519)\n        ? bytesFromBase64(object.ed25519)\n        : undefined,\n      secp256k1: isSet(object.secp256k1)\n        ? bytesFromBase64(object.secp256k1)\n        : undefined,\n    };\n  },\n\n  toJSON(message: PublicKey): unknown {\n    const obj: any = {};\n    message.ed25519 !== undefined &&\n      (obj.ed25519 =\n        message.ed25519 !== undefined\n          ? base64FromBytes(message.ed25519)\n          : undefined);\n    message.secp256k1 !== undefined &&\n      (obj.secp256k1 =\n        message.secp256k1 !== undefined\n          ? base64FromBytes(message.secp256k1)\n          : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<PublicKey>, I>>(\n    object: I\n  ): PublicKey {\n    const message = createBasePublicKey();\n    message.ed25519 = object.ed25519 ?? undefined;\n    message.secp256k1 = object.secp256k1 ?? undefined;\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { PublicKey } from \"../crypto/keys\";\n\nexport const protobufPackage = \"tendermint.types\";\n\nexport interface ValidatorSet {\n  validators: Validator[];\n  proposer?: Validator;\n  totalVotingPower: Long;\n}\n\nexport interface Validator {\n  address: Uint8Array;\n  pubKey?: PublicKey;\n  votingPower: Long;\n  proposerPriority: Long;\n}\n\nexport interface SimpleValidator {\n  pubKey?: PublicKey;\n  votingPower: Long;\n}\n\nfunction createBaseValidatorSet(): ValidatorSet {\n  return { validators: [], proposer: undefined, totalVotingPower: Long.ZERO };\n}\n\nexport const ValidatorSet = {\n  encode(\n    message: ValidatorSet,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.validators) {\n      Validator.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.proposer !== undefined) {\n      Validator.encode(message.proposer, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.totalVotingPower.isZero()) {\n      writer.uint32(24).int64(message.totalVotingPower);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorSet {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValidatorSet();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.validators.push(Validator.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.proposer = Validator.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.totalVotingPower = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ValidatorSet {\n    return {\n      validators: Array.isArray(object?.validators)\n        ? object.validators.map((e: any) => Validator.fromJSON(e))\n        : [],\n      proposer: isSet(object.proposer)\n        ? Validator.fromJSON(object.proposer)\n        : undefined,\n      totalVotingPower: isSet(object.totalVotingPower)\n        ? Long.fromValue(object.totalVotingPower)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: ValidatorSet): unknown {\n    const obj: any = {};\n    if (message.validators) {\n      obj.validators = message.validators.map((e) =>\n        e ? Validator.toJSON(e) : undefined\n      );\n    } else {\n      obj.validators = [];\n    }\n    message.proposer !== undefined &&\n      (obj.proposer = message.proposer\n        ? Validator.toJSON(message.proposer)\n        : undefined);\n    message.totalVotingPower !== undefined &&\n      (obj.totalVotingPower = (\n        message.totalVotingPower || Long.ZERO\n      ).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ValidatorSet>, I>>(\n    object: I\n  ): ValidatorSet {\n    const message = createBaseValidatorSet();\n    message.validators =\n      object.validators?.map((e) => Validator.fromPartial(e)) || [];\n    message.proposer =\n      object.proposer !== undefined && object.proposer !== null\n        ? Validator.fromPartial(object.proposer)\n        : undefined;\n    message.totalVotingPower =\n      object.totalVotingPower !== undefined && object.totalVotingPower !== null\n        ? Long.fromValue(object.totalVotingPower)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseValidator(): Validator {\n  return {\n    address: new Uint8Array(),\n    pubKey: undefined,\n    votingPower: Long.ZERO,\n    proposerPriority: Long.ZERO,\n  };\n}\n\nexport const Validator = {\n  encode(\n    message: Validator,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.address.length !== 0) {\n      writer.uint32(10).bytes(message.address);\n    }\n    if (message.pubKey !== undefined) {\n      PublicKey.encode(message.pubKey, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.votingPower.isZero()) {\n      writer.uint32(24).int64(message.votingPower);\n    }\n    if (!message.proposerPriority.isZero()) {\n      writer.uint32(32).int64(message.proposerPriority);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Validator {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseValidator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.bytes();\n          break;\n        case 2:\n          message.pubKey = PublicKey.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.votingPower = reader.int64() as Long;\n          break;\n        case 4:\n          message.proposerPriority = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Validator {\n    return {\n      address: isSet(object.address)\n        ? bytesFromBase64(object.address)\n        : new Uint8Array(),\n      pubKey: isSet(object.pubKey)\n        ? PublicKey.fromJSON(object.pubKey)\n        : undefined,\n      votingPower: isSet(object.votingPower)\n        ? Long.fromValue(object.votingPower)\n        : Long.ZERO,\n      proposerPriority: isSet(object.proposerPriority)\n        ? Long.fromValue(object.proposerPriority)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: Validator): unknown {\n    const obj: any = {};\n    message.address !== undefined &&\n      (obj.address = base64FromBytes(\n        message.address !== undefined ? message.address : new Uint8Array()\n      ));\n    message.pubKey !== undefined &&\n      (obj.pubKey = message.pubKey\n        ? PublicKey.toJSON(message.pubKey)\n        : undefined);\n    message.votingPower !== undefined &&\n      (obj.votingPower = (message.votingPower || Long.ZERO).toString());\n    message.proposerPriority !== undefined &&\n      (obj.proposerPriority = (\n        message.proposerPriority || Long.ZERO\n      ).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Validator>, I>>(\n    object: I\n  ): Validator {\n    const message = createBaseValidator();\n    message.address = object.address ?? new Uint8Array();\n    message.pubKey =\n      object.pubKey !== undefined && object.pubKey !== null\n        ? PublicKey.fromPartial(object.pubKey)\n        : undefined;\n    message.votingPower =\n      object.votingPower !== undefined && object.votingPower !== null\n        ? Long.fromValue(object.votingPower)\n        : Long.ZERO;\n    message.proposerPriority =\n      object.proposerPriority !== undefined && object.proposerPriority !== null\n        ? Long.fromValue(object.proposerPriority)\n        : Long.ZERO;\n    return message;\n  },\n};\n\nfunction createBaseSimpleValidator(): SimpleValidator {\n  return { pubKey: undefined, votingPower: Long.ZERO };\n}\n\nexport const SimpleValidator = {\n  encode(\n    message: SimpleValidator,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.pubKey !== undefined) {\n      PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.votingPower.isZero()) {\n      writer.uint32(16).int64(message.votingPower);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SimpleValidator {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSimpleValidator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.pubKey = PublicKey.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.votingPower = reader.int64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SimpleValidator {\n    return {\n      pubKey: isSet(object.pubKey)\n        ? PublicKey.fromJSON(object.pubKey)\n        : undefined,\n      votingPower: isSet(object.votingPower)\n        ? Long.fromValue(object.votingPower)\n        : Long.ZERO,\n    };\n  },\n\n  toJSON(message: SimpleValidator): unknown {\n    const obj: any = {};\n    message.pubKey !== undefined &&\n      (obj.pubKey = message.pubKey\n        ? PublicKey.toJSON(message.pubKey)\n        : undefined);\n    message.votingPower !== undefined &&\n      (obj.votingPower = (message.votingPower || Long.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SimpleValidator>, I>>(\n    object: I\n  ): SimpleValidator {\n    const message = createBaseSimpleValidator();\n    message.pubKey =\n      object.pubKey !== undefined && object.pubKey !== null\n        ? PublicKey.fromPartial(object.pubKey)\n        : undefined;\n    message.votingPower =\n      object.votingPower !== undefined && object.votingPower !== null\n        ? Long.fromValue(object.votingPower)\n        : Long.ZERO;\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Description, CommissionRates } from \"./staking\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport { Coin } from \"../../base/v1beta1/coin\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Timestamp } from \"../../../google/protobuf/timestamp\";\n\nexport const protobufPackage = \"cosmos.staking.v1beta1\";\n\n/** MsgCreateValidator defines a SDK message for creating a new validator. */\nexport interface MsgCreateValidator {\n  description?: Description;\n  commission?: CommissionRates;\n  minSelfDelegation: string;\n  delegatorAddress: string;\n  validatorAddress: string;\n  pubkey?: Any;\n  value?: Coin;\n}\n\n/** MsgCreateValidatorResponse defines the Msg/CreateValidator response type. */\nexport interface MsgCreateValidatorResponse {}\n\n/** MsgEditValidator defines a SDK message for editing an existing validator. */\nexport interface MsgEditValidator {\n  description?: Description;\n  validatorAddress: string;\n  /**\n   * We pass a reference to the new commission rate and min self delegation as\n   * it's not mandatory to update. If not updated, the deserialized rate will be\n   * zero with no way to distinguish if an update was intended.\n   * REF: #2373\n   */\n  commissionRate: string;\n  minSelfDelegation: string;\n}\n\n/** MsgEditValidatorResponse defines the Msg/EditValidator response type. */\nexport interface MsgEditValidatorResponse {}\n\n/**\n * MsgDelegate defines a SDK message for performing a delegation of coins\n * from a delegator to a validator.\n */\nexport interface MsgDelegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount?: Coin;\n}\n\n/** MsgDelegateResponse defines the Msg/Delegate response type. */\nexport interface MsgDelegateResponse {}\n\n/**\n * MsgBeginRedelegate defines a SDK message for performing a redelegation\n * of coins from a delegator and source validator to a destination validator.\n */\nexport interface MsgBeginRedelegate {\n  delegatorAddress: string;\n  validatorSrcAddress: string;\n  validatorDstAddress: string;\n  amount?: Coin;\n}\n\n/** MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type. */\nexport interface MsgBeginRedelegateResponse {\n  completionTime?: Date;\n}\n\n/**\n * MsgUndelegate defines a SDK message for performing an undelegation from a\n * delegate and a validator.\n */\nexport interface MsgUndelegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount?: Coin;\n}\n\n/** MsgUndelegateResponse defines the Msg/Undelegate response type. */\nexport interface MsgUndelegateResponse {\n  completionTime?: Date;\n}\n\nfunction createBaseMsgCreateValidator(): MsgCreateValidator {\n  return {\n    description: undefined,\n    commission: undefined,\n    minSelfDelegation: \"\",\n    delegatorAddress: \"\",\n    validatorAddress: \"\",\n    pubkey: undefined,\n    value: undefined,\n  };\n}\n\nexport const MsgCreateValidator = {\n  encode(\n    message: MsgCreateValidator,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.description !== undefined) {\n      Description.encode(\n        message.description,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.commission !== undefined) {\n      CommissionRates.encode(\n        message.commission,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    if (message.minSelfDelegation !== \"\") {\n      writer.uint32(26).string(message.minSelfDelegation);\n    }\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(34).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(42).string(message.validatorAddress);\n    }\n    if (message.pubkey !== undefined) {\n      Any.encode(message.pubkey, writer.uint32(50).fork()).ldelim();\n    }\n    if (message.value !== undefined) {\n      Coin.encode(message.value, writer.uint32(58).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateValidator {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateValidator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.description = Description.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.commission = CommissionRates.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.minSelfDelegation = reader.string();\n          break;\n        case 4:\n          message.delegatorAddress = reader.string();\n          break;\n        case 5:\n          message.validatorAddress = reader.string();\n          break;\n        case 6:\n          message.pubkey = Any.decode(reader, reader.uint32());\n          break;\n        case 7:\n          message.value = Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreateValidator {\n    return {\n      description: isSet(object.description)\n        ? Description.fromJSON(object.description)\n        : undefined,\n      commission: isSet(object.commission)\n        ? CommissionRates.fromJSON(object.commission)\n        : undefined,\n      minSelfDelegation: isSet(object.minSelfDelegation)\n        ? String(object.minSelfDelegation)\n        : \"\",\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n      pubkey: isSet(object.pubkey) ? Any.fromJSON(object.pubkey) : undefined,\n      value: isSet(object.value) ? Coin.fromJSON(object.value) : undefined,\n    };\n  },\n\n  toJSON(message: MsgCreateValidator): unknown {\n    const obj: any = {};\n    message.description !== undefined &&\n      (obj.description = message.description\n        ? Description.toJSON(message.description)\n        : undefined);\n    message.commission !== undefined &&\n      (obj.commission = message.commission\n        ? CommissionRates.toJSON(message.commission)\n        : undefined);\n    message.minSelfDelegation !== undefined &&\n      (obj.minSelfDelegation = message.minSelfDelegation);\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    message.pubkey !== undefined &&\n      (obj.pubkey = message.pubkey ? Any.toJSON(message.pubkey) : undefined);\n    message.value !== undefined &&\n      (obj.value = message.value ? Coin.toJSON(message.value) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreateValidator>, I>>(\n    object: I\n  ): MsgCreateValidator {\n    const message = createBaseMsgCreateValidator();\n    message.description =\n      object.description !== undefined && object.description !== null\n        ? Description.fromPartial(object.description)\n        : undefined;\n    message.commission =\n      object.commission !== undefined && object.commission !== null\n        ? CommissionRates.fromPartial(object.commission)\n        : undefined;\n    message.minSelfDelegation = object.minSelfDelegation ?? \"\";\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    message.pubkey =\n      object.pubkey !== undefined && object.pubkey !== null\n        ? Any.fromPartial(object.pubkey)\n        : undefined;\n    message.value =\n      object.value !== undefined && object.value !== null\n        ? Coin.fromPartial(object.value)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgCreateValidatorResponse(): MsgCreateValidatorResponse {\n  return {};\n}\n\nexport const MsgCreateValidatorResponse = {\n  encode(\n    _: MsgCreateValidatorResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreateValidatorResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreateValidatorResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreateValidatorResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreateValidatorResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreateValidatorResponse>, I>>(\n    _: I\n  ): MsgCreateValidatorResponse {\n    const message = createBaseMsgCreateValidatorResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgEditValidator(): MsgEditValidator {\n  return {\n    description: undefined,\n    validatorAddress: \"\",\n    commissionRate: \"\",\n    minSelfDelegation: \"\",\n  };\n}\n\nexport const MsgEditValidator = {\n  encode(\n    message: MsgEditValidator,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.description !== undefined) {\n      Description.encode(\n        message.description,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    if (message.commissionRate !== \"\") {\n      writer.uint32(26).string(message.commissionRate);\n    }\n    if (message.minSelfDelegation !== \"\") {\n      writer.uint32(34).string(message.minSelfDelegation);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgEditValidator {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgEditValidator();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.description = Description.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.commissionRate = reader.string();\n          break;\n        case 4:\n          message.minSelfDelegation = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgEditValidator {\n    return {\n      description: isSet(object.description)\n        ? Description.fromJSON(object.description)\n        : undefined,\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n      commissionRate: isSet(object.commissionRate)\n        ? String(object.commissionRate)\n        : \"\",\n      minSelfDelegation: isSet(object.minSelfDelegation)\n        ? String(object.minSelfDelegation)\n        : \"\",\n    };\n  },\n\n  toJSON(message: MsgEditValidator): unknown {\n    const obj: any = {};\n    message.description !== undefined &&\n      (obj.description = message.description\n        ? Description.toJSON(message.description)\n        : undefined);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    message.commissionRate !== undefined &&\n      (obj.commissionRate = message.commissionRate);\n    message.minSelfDelegation !== undefined &&\n      (obj.minSelfDelegation = message.minSelfDelegation);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgEditValidator>, I>>(\n    object: I\n  ): MsgEditValidator {\n    const message = createBaseMsgEditValidator();\n    message.description =\n      object.description !== undefined && object.description !== null\n        ? Description.fromPartial(object.description)\n        : undefined;\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    message.commissionRate = object.commissionRate ?? \"\";\n    message.minSelfDelegation = object.minSelfDelegation ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgEditValidatorResponse(): MsgEditValidatorResponse {\n  return {};\n}\n\nexport const MsgEditValidatorResponse = {\n  encode(\n    _: MsgEditValidatorResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgEditValidatorResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgEditValidatorResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgEditValidatorResponse {\n    return {};\n  },\n\n  toJSON(_: MsgEditValidatorResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgEditValidatorResponse>, I>>(\n    _: I\n  ): MsgEditValidatorResponse {\n    const message = createBaseMsgEditValidatorResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgDelegate(): MsgDelegate {\n  return { delegatorAddress: \"\", validatorAddress: \"\", amount: undefined };\n}\n\nexport const MsgDelegate = {\n  encode(\n    message: MsgDelegate,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    if (message.amount !== undefined) {\n      Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDelegate {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDelegate();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.amount = Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgDelegate {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,\n    };\n  },\n\n  toJSON(message: MsgDelegate): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    message.amount !== undefined &&\n      (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDelegate>, I>>(\n    object: I\n  ): MsgDelegate {\n    const message = createBaseMsgDelegate();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    message.amount =\n      object.amount !== undefined && object.amount !== null\n        ? Coin.fromPartial(object.amount)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgDelegateResponse(): MsgDelegateResponse {\n  return {};\n}\n\nexport const MsgDelegateResponse = {\n  encode(\n    _: MsgDelegateResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDelegateResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDelegateResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgDelegateResponse {\n    return {};\n  },\n\n  toJSON(_: MsgDelegateResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDelegateResponse>, I>>(\n    _: I\n  ): MsgDelegateResponse {\n    const message = createBaseMsgDelegateResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgBeginRedelegate(): MsgBeginRedelegate {\n  return {\n    delegatorAddress: \"\",\n    validatorSrcAddress: \"\",\n    validatorDstAddress: \"\",\n    amount: undefined,\n  };\n}\n\nexport const MsgBeginRedelegate = {\n  encode(\n    message: MsgBeginRedelegate,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorSrcAddress !== \"\") {\n      writer.uint32(18).string(message.validatorSrcAddress);\n    }\n    if (message.validatorDstAddress !== \"\") {\n      writer.uint32(26).string(message.validatorDstAddress);\n    }\n    if (message.amount !== undefined) {\n      Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBeginRedelegate {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgBeginRedelegate();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorSrcAddress = reader.string();\n          break;\n        case 3:\n          message.validatorDstAddress = reader.string();\n          break;\n        case 4:\n          message.amount = Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgBeginRedelegate {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorSrcAddress: isSet(object.validatorSrcAddress)\n        ? String(object.validatorSrcAddress)\n        : \"\",\n      validatorDstAddress: isSet(object.validatorDstAddress)\n        ? String(object.validatorDstAddress)\n        : \"\",\n      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,\n    };\n  },\n\n  toJSON(message: MsgBeginRedelegate): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorSrcAddress !== undefined &&\n      (obj.validatorSrcAddress = message.validatorSrcAddress);\n    message.validatorDstAddress !== undefined &&\n      (obj.validatorDstAddress = message.validatorDstAddress);\n    message.amount !== undefined &&\n      (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgBeginRedelegate>, I>>(\n    object: I\n  ): MsgBeginRedelegate {\n    const message = createBaseMsgBeginRedelegate();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorSrcAddress = object.validatorSrcAddress ?? \"\";\n    message.validatorDstAddress = object.validatorDstAddress ?? \"\";\n    message.amount =\n      object.amount !== undefined && object.amount !== null\n        ? Coin.fromPartial(object.amount)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgBeginRedelegateResponse(): MsgBeginRedelegateResponse {\n  return { completionTime: undefined };\n}\n\nexport const MsgBeginRedelegateResponse = {\n  encode(\n    message: MsgBeginRedelegateResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.completionTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.completionTime),\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgBeginRedelegateResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgBeginRedelegateResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.completionTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgBeginRedelegateResponse {\n    return {\n      completionTime: isSet(object.completionTime)\n        ? fromJsonTimestamp(object.completionTime)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgBeginRedelegateResponse): unknown {\n    const obj: any = {};\n    message.completionTime !== undefined &&\n      (obj.completionTime = message.completionTime.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgBeginRedelegateResponse>, I>>(\n    object: I\n  ): MsgBeginRedelegateResponse {\n    const message = createBaseMsgBeginRedelegateResponse();\n    message.completionTime = object.completionTime ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgUndelegate(): MsgUndelegate {\n  return { delegatorAddress: \"\", validatorAddress: \"\", amount: undefined };\n}\n\nexport const MsgUndelegate = {\n  encode(\n    message: MsgUndelegate,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.delegatorAddress !== \"\") {\n      writer.uint32(10).string(message.delegatorAddress);\n    }\n    if (message.validatorAddress !== \"\") {\n      writer.uint32(18).string(message.validatorAddress);\n    }\n    if (message.amount !== undefined) {\n      Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUndelegate {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUndelegate();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddress = reader.string();\n          break;\n        case 2:\n          message.validatorAddress = reader.string();\n          break;\n        case 3:\n          message.amount = Coin.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgUndelegate {\n    return {\n      delegatorAddress: isSet(object.delegatorAddress)\n        ? String(object.delegatorAddress)\n        : \"\",\n      validatorAddress: isSet(object.validatorAddress)\n        ? String(object.validatorAddress)\n        : \"\",\n      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,\n    };\n  },\n\n  toJSON(message: MsgUndelegate): unknown {\n    const obj: any = {};\n    message.delegatorAddress !== undefined &&\n      (obj.delegatorAddress = message.delegatorAddress);\n    message.validatorAddress !== undefined &&\n      (obj.validatorAddress = message.validatorAddress);\n    message.amount !== undefined &&\n      (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgUndelegate>, I>>(\n    object: I\n  ): MsgUndelegate {\n    const message = createBaseMsgUndelegate();\n    message.delegatorAddress = object.delegatorAddress ?? \"\";\n    message.validatorAddress = object.validatorAddress ?? \"\";\n    message.amount =\n      object.amount !== undefined && object.amount !== null\n        ? Coin.fromPartial(object.amount)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgUndelegateResponse(): MsgUndelegateResponse {\n  return { completionTime: undefined };\n}\n\nexport const MsgUndelegateResponse = {\n  encode(\n    message: MsgUndelegateResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.completionTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.completionTime),\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgUndelegateResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUndelegateResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.completionTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgUndelegateResponse {\n    return {\n      completionTime: isSet(object.completionTime)\n        ? fromJsonTimestamp(object.completionTime)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgUndelegateResponse): unknown {\n    const obj: any = {};\n    message.completionTime !== undefined &&\n      (obj.completionTime = message.completionTime.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgUndelegateResponse>, I>>(\n    object: I\n  ): MsgUndelegateResponse {\n    const message = createBaseMsgUndelegateResponse();\n    message.completionTime = object.completionTime ?? undefined;\n    return message;\n  },\n};\n\n/** Msg defines the staking Msg service. */\nexport interface Msg {\n  /** CreateValidator defines a method for creating a new validator. */\n  CreateValidator(\n    request: DeepPartial<MsgCreateValidator>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateValidatorResponse>;\n  /** EditValidator defines a method for editing an existing validator. */\n  EditValidator(\n    request: DeepPartial<MsgEditValidator>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgEditValidatorResponse>;\n  /**\n   * Delegate defines a method for performing a delegation of coins\n   * from a delegator to a validator.\n   */\n  Delegate(\n    request: DeepPartial<MsgDelegate>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDelegateResponse>;\n  /**\n   * BeginRedelegate defines a method for performing a redelegation\n   * of coins from a delegator and source validator to a destination validator.\n   */\n  BeginRedelegate(\n    request: DeepPartial<MsgBeginRedelegate>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgBeginRedelegateResponse>;\n  /**\n   * Undelegate defines a method for performing an undelegation from a\n   * delegate and a validator.\n   */\n  Undelegate(\n    request: DeepPartial<MsgUndelegate>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUndelegateResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.CreateValidator = this.CreateValidator.bind(this);\n    this.EditValidator = this.EditValidator.bind(this);\n    this.Delegate = this.Delegate.bind(this);\n    this.BeginRedelegate = this.BeginRedelegate.bind(this);\n    this.Undelegate = this.Undelegate.bind(this);\n  }\n\n  CreateValidator(\n    request: DeepPartial<MsgCreateValidator>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreateValidatorResponse> {\n    return this.rpc.unary(\n      MsgCreateValidatorDesc,\n      MsgCreateValidator.fromPartial(request),\n      metadata\n    );\n  }\n\n  EditValidator(\n    request: DeepPartial<MsgEditValidator>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgEditValidatorResponse> {\n    return this.rpc.unary(\n      MsgEditValidatorDesc,\n      MsgEditValidator.fromPartial(request),\n      metadata\n    );\n  }\n\n  Delegate(\n    request: DeepPartial<MsgDelegate>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDelegateResponse> {\n    return this.rpc.unary(\n      MsgDelegateDesc,\n      MsgDelegate.fromPartial(request),\n      metadata\n    );\n  }\n\n  BeginRedelegate(\n    request: DeepPartial<MsgBeginRedelegate>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgBeginRedelegateResponse> {\n    return this.rpc.unary(\n      MsgBeginRedelegateDesc,\n      MsgBeginRedelegate.fromPartial(request),\n      metadata\n    );\n  }\n\n  Undelegate(\n    request: DeepPartial<MsgUndelegate>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUndelegateResponse> {\n    return this.rpc.unary(\n      MsgUndelegateDesc,\n      MsgUndelegate.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmos.staking.v1beta1.Msg\",\n};\n\nexport const MsgCreateValidatorDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreateValidator\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreateValidator.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreateValidatorResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgEditValidatorDesc: UnaryMethodDefinitionish = {\n  methodName: \"EditValidator\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgEditValidator.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgEditValidatorResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgDelegateDesc: UnaryMethodDefinitionish = {\n  methodName: \"Delegate\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgDelegate.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgDelegateResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgBeginRedelegateDesc: UnaryMethodDefinitionish = {\n  methodName: \"BeginRedelegate\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgBeginRedelegate.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgBeginRedelegateResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgUndelegateDesc: UnaryMethodDefinitionish = {\n  methodName: \"Undelegate\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgUndelegate.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgUndelegateResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nfunction toTimestamp(date: Date): Timestamp {\n  const seconds = numberToLong(date.getTime() / 1_000);\n  const nanos = (date.getTime() % 1_000) * 1_000_000;\n  return { seconds, nanos };\n}\n\nfunction fromTimestamp(t: Timestamp): Date {\n  let millis = t.seconds.toNumber() * 1_000;\n  millis += t.nanos / 1_000_000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o: any): Date {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction numberToLong(number: number) {\n  return Long.fromNumber(number);\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from './BaseMsg';\nimport {\n  protobufPackage,\n  MsgCreateValidator as MsgCreateValidator_pb,\n  MsgEditValidator as MsgEditValidator_pb,\n  MsgDelegate as MsgDelegate_pb,\n  MsgBeginRedelegate as MsgBeginRedelegate_pb,\n  MsgUndelegate as MsgUndelegate_pb\n} from \"../proto/cosmos/staking/v1beta1/tx\";\nimport {EncodeObject} from \"@cosmjs/proto-signing\";\n\nexport class MsgCreateValidator extends BaseMsg {\n  public protoMsg: MsgCreateValidator_pb;\n  constructor(msg: MsgCreateValidator_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreateValidator.typeUrl,\n      value: MsgCreateValidator_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreateValidator {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreateValidator`;\n  export const Proto = MsgCreateValidator_pb;\n  export interface Proto extends MsgCreateValidator_pb {}\n}\n\nexport class MsgEditValidator extends BaseMsg {\n  public protoMsg: MsgEditValidator_pb;\n  constructor(msg: MsgEditValidator_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgEditValidator.typeUrl,\n      value: MsgEditValidator_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgEditValidator {\n  export const typeUrl: string = `/${protobufPackage}.MsgEditValidator`;\n  export const Proto = MsgEditValidator_pb;\n  export interface Proto extends MsgEditValidator_pb {}\n}\n\nexport class MsgDelegate extends BaseMsg {\n  public protoMsg: MsgDelegate_pb;\n  constructor(msg: MsgDelegate_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgDelegate.typeUrl,\n      value: MsgDelegate_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgDelegate {\n  export const typeUrl: string = `/${protobufPackage}.MsgDelegate`;\n  export const Proto = MsgDelegate_pb;\n  export interface Proto extends MsgDelegate_pb {}\n}\n\nexport class MsgBeginRedelegate extends BaseMsg {\n  public protoMsg: MsgBeginRedelegate_pb;\n  constructor(msg: MsgBeginRedelegate_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgBeginRedelegate.typeUrl,\n      value: MsgBeginRedelegate_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgBeginRedelegate {\n  export const typeUrl: string = `/${protobufPackage}.MsgBeginRedelegate`;\n  export const Proto = MsgBeginRedelegate_pb;\n  export interface Proto extends MsgBeginRedelegate_pb {}\n}\n\nexport class MsgUndelegate extends BaseMsg {\n  public protoMsg: MsgUndelegate_pb;\n  constructor(msg: MsgUndelegate_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgUndelegate.typeUrl,\n      value: MsgUndelegate_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgUndelegate {\n  export const typeUrl: string = `/${protobufPackage}.MsgUndelegate`;\n  export const Proto = MsgUndelegate_pb;\n  export interface Proto extends MsgUndelegate_pb {}\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Timestamp } from \"../google/protobuf/timestamp\";\n\nexport const protobufPackage = \"metaoslabs.metaos.swap\";\n\nexport interface MsgCreatePool {\n  creator: string;\n  /** the denom of denom0 in the pool */\n  denom0: string;\n  /** the denom of denom1 in the pool */\n  denom1: string;\n  /** the fee rate for the pool */\n  fee: number;\n  /** the initial square root price of the poo */\n  sqrtPrice: string;\n}\n\nexport interface MsgCreatePoolResponse {}\n\nexport interface MsgCreatePosition {\n  creator: string;\n  /** the denom of token0 in the pool */\n  denom0: string;\n  /** the denom of token1 in the pool */\n  denom1: string;\n  /** the fee rate for the pool */\n  fee: number;\n  /** the price lower bound of the position */\n  tickLower: number;\n  /** the price higher bound of the position */\n  tickUpper: number;\n  /** the desired amount of denom0 in the position */\n  amount0Desired: string;\n  /** the desired amount of denom1 in the position */\n  amount1Desired: string;\n  /** the minimum amount that denom0 needs to add when slippage occurs */\n  amount0Min: string;\n  /** the minimum amount that denom1 needs to add when slippage occurs */\n  amount1Min: string;\n  /** the minted NFT holder address */\n  recipient: string;\n  /** the time by which the transaction must be included to effect the change */\n  deadline?: Date;\n}\n\nexport interface MsgCreatePositionResponse {}\n\nexport interface MsgIncreaseLiquidity {\n  /** the message creator, with tokens paid for the message */\n  creator: string;\n  /** then id of the NFT for which liquidity is being increased */\n  tokenId: string;\n  /** the desired amount of denom0 to be spent */\n  amount0Desired: string;\n  /** the desired amount of denom1 to be spent */\n  amount1Desired: string;\n  /** the minimum amount of denom0 to spend, which serves as a slippage check */\n  amount0Min: string;\n  /** the minimum amount of denom1 to spend, which serves as a slippage check */\n  amount1Min: string;\n  /** the time by which the transaction must be included to effect the change */\n  deadline?: Date;\n}\n\nexport interface MsgIncreaseLiquidityResponse {}\n\nexport interface MsgDecreaseLiquidity {\n  creator: string;\n  /** then id of the NFT for which liquidity is being decreased */\n  tokenId: string;\n  /** the amount by which liquidity will be decreased */\n  liquidity: string;\n  /** the minimum amount of denom0 that should be accounted for the burned liquidity */\n  amount0Min: string;\n  /** the minimum amount of denom1 that should be accounted for the burned liquidity */\n  amount1Min: string;\n  /** the time by which the transaction must be included to effect the change */\n  deadline?: Date;\n}\n\nexport interface MsgDecreaseLiquidityResponse {}\n\nexport interface MsgCollect {\n  creator: string;\n  /** the id of the NFT for which tokens are being collected */\n  tokenId: string;\n  /** the address that should receive the tokens */\n  recipient: string;\n  /** the maximum amount of denom0 to collect */\n  amount0Max: string;\n  /** the maximum amount of denom1 to collect */\n  amount1Max: string;\n  /** whether to get only owed tokens. True means only get the tokens that are owed(less gas), false means trigger settlement first, then collect(more gas) */\n  collectOnly: boolean;\n}\n\nexport interface MsgCollectResponse {}\n\nexport interface MsgSwapExactIn {\n  creator: string;\n  recipient: string;\n  amountIn: string;\n  amountOutMin: string;\n  denoms: string[];\n  fees: number[];\n  deadline?: Date;\n}\n\nexport interface MsgSwapExactInResponse {}\n\nexport interface MsgSwapExactOut {\n  creator: string;\n  recipient: string;\n  amountOut: string;\n  amountInMax: string;\n  denoms: string[];\n  fees: number[];\n  deadline?: Date;\n}\n\nexport interface MsgSwapExactOutResponse {}\n\nexport interface MsgCollectReward {\n  creator: string;\n  /** the id of the NFT for which tokens are being collected */\n  tokenId: string;\n  /** the address that should receive the tokens */\n  recipient: string;\n  /** whether to get only owed tokens. True means only get the tokens that are owed(less gas), false means trigger settlement first, then collect(more gas) */\n  collectOnly: boolean;\n}\n\nexport interface MsgCollectRewardResponse {}\n\nexport interface MsgCollectFeeProtocol {\n  creator: string;\n  /** the pool address */\n  address: string;\n}\n\nexport interface MsgCollectFeeProtocolResponse {}\n\nexport interface MsgGovCorePool {\n  creator: string;\n  address: string;\n  action: string;\n  triggerTime?: Date;\n}\n\nexport interface MsgGovCorePoolResponse {}\n\nfunction createBaseMsgCreatePool(): MsgCreatePool {\n  return { creator: \"\", denom0: \"\", denom1: \"\", fee: 0, sqrtPrice: \"\" };\n}\n\nexport const MsgCreatePool = {\n  encode(\n    message: MsgCreatePool,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.denom0 !== \"\") {\n      writer.uint32(18).string(message.denom0);\n    }\n    if (message.denom1 !== \"\") {\n      writer.uint32(26).string(message.denom1);\n    }\n    if (message.fee !== 0) {\n      writer.uint32(32).int32(message.fee);\n    }\n    if (message.sqrtPrice !== \"\") {\n      writer.uint32(42).string(message.sqrtPrice);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePool {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePool();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.denom0 = reader.string();\n          break;\n        case 3:\n          message.denom1 = reader.string();\n          break;\n        case 4:\n          message.fee = reader.int32();\n          break;\n        case 5:\n          message.sqrtPrice = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreatePool {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      denom0: isSet(object.denom0) ? String(object.denom0) : \"\",\n      denom1: isSet(object.denom1) ? String(object.denom1) : \"\",\n      fee: isSet(object.fee) ? Number(object.fee) : 0,\n      sqrtPrice: isSet(object.sqrtPrice) ? String(object.sqrtPrice) : \"\",\n    };\n  },\n\n  toJSON(message: MsgCreatePool): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.denom0 !== undefined && (obj.denom0 = message.denom0);\n    message.denom1 !== undefined && (obj.denom1 = message.denom1);\n    message.fee !== undefined && (obj.fee = Math.round(message.fee));\n    message.sqrtPrice !== undefined && (obj.sqrtPrice = message.sqrtPrice);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePool>, I>>(\n    object: I\n  ): MsgCreatePool {\n    const message = createBaseMsgCreatePool();\n    message.creator = object.creator ?? \"\";\n    message.denom0 = object.denom0 ?? \"\";\n    message.denom1 = object.denom1 ?? \"\";\n    message.fee = object.fee ?? 0;\n    message.sqrtPrice = object.sqrtPrice ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgCreatePoolResponse(): MsgCreatePoolResponse {\n  return {};\n}\n\nexport const MsgCreatePoolResponse = {\n  encode(\n    _: MsgCreatePoolResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreatePoolResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePoolResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreatePoolResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreatePoolResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePoolResponse>, I>>(\n    _: I\n  ): MsgCreatePoolResponse {\n    const message = createBaseMsgCreatePoolResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCreatePosition(): MsgCreatePosition {\n  return {\n    creator: \"\",\n    denom0: \"\",\n    denom1: \"\",\n    fee: 0,\n    tickLower: 0,\n    tickUpper: 0,\n    amount0Desired: \"\",\n    amount1Desired: \"\",\n    amount0Min: \"\",\n    amount1Min: \"\",\n    recipient: \"\",\n    deadline: undefined,\n  };\n}\n\nexport const MsgCreatePosition = {\n  encode(\n    message: MsgCreatePosition,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.denom0 !== \"\") {\n      writer.uint32(18).string(message.denom0);\n    }\n    if (message.denom1 !== \"\") {\n      writer.uint32(26).string(message.denom1);\n    }\n    if (message.fee !== 0) {\n      writer.uint32(32).int32(message.fee);\n    }\n    if (message.tickLower !== 0) {\n      writer.uint32(40).int32(message.tickLower);\n    }\n    if (message.tickUpper !== 0) {\n      writer.uint32(48).int32(message.tickUpper);\n    }\n    if (message.amount0Desired !== \"\") {\n      writer.uint32(58).string(message.amount0Desired);\n    }\n    if (message.amount1Desired !== \"\") {\n      writer.uint32(66).string(message.amount1Desired);\n    }\n    if (message.amount0Min !== \"\") {\n      writer.uint32(74).string(message.amount0Min);\n    }\n    if (message.amount1Min !== \"\") {\n      writer.uint32(82).string(message.amount1Min);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(90).string(message.recipient);\n    }\n    if (message.deadline !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.deadline),\n        writer.uint32(98).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePosition {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePosition();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.denom0 = reader.string();\n          break;\n        case 3:\n          message.denom1 = reader.string();\n          break;\n        case 4:\n          message.fee = reader.int32();\n          break;\n        case 5:\n          message.tickLower = reader.int32();\n          break;\n        case 6:\n          message.tickUpper = reader.int32();\n          break;\n        case 7:\n          message.amount0Desired = reader.string();\n          break;\n        case 8:\n          message.amount1Desired = reader.string();\n          break;\n        case 9:\n          message.amount0Min = reader.string();\n          break;\n        case 10:\n          message.amount1Min = reader.string();\n          break;\n        case 11:\n          message.recipient = reader.string();\n          break;\n        case 12:\n          message.deadline = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCreatePosition {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      denom0: isSet(object.denom0) ? String(object.denom0) : \"\",\n      denom1: isSet(object.denom1) ? String(object.denom1) : \"\",\n      fee: isSet(object.fee) ? Number(object.fee) : 0,\n      tickLower: isSet(object.tickLower) ? Number(object.tickLower) : 0,\n      tickUpper: isSet(object.tickUpper) ? Number(object.tickUpper) : 0,\n      amount0Desired: isSet(object.amount0Desired)\n        ? String(object.amount0Desired)\n        : \"\",\n      amount1Desired: isSet(object.amount1Desired)\n        ? String(object.amount1Desired)\n        : \"\",\n      amount0Min: isSet(object.amount0Min) ? String(object.amount0Min) : \"\",\n      amount1Min: isSet(object.amount1Min) ? String(object.amount1Min) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      deadline: isSet(object.deadline)\n        ? fromJsonTimestamp(object.deadline)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgCreatePosition): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.denom0 !== undefined && (obj.denom0 = message.denom0);\n    message.denom1 !== undefined && (obj.denom1 = message.denom1);\n    message.fee !== undefined && (obj.fee = Math.round(message.fee));\n    message.tickLower !== undefined &&\n      (obj.tickLower = Math.round(message.tickLower));\n    message.tickUpper !== undefined &&\n      (obj.tickUpper = Math.round(message.tickUpper));\n    message.amount0Desired !== undefined &&\n      (obj.amount0Desired = message.amount0Desired);\n    message.amount1Desired !== undefined &&\n      (obj.amount1Desired = message.amount1Desired);\n    message.amount0Min !== undefined && (obj.amount0Min = message.amount0Min);\n    message.amount1Min !== undefined && (obj.amount1Min = message.amount1Min);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.deadline !== undefined &&\n      (obj.deadline = message.deadline.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePosition>, I>>(\n    object: I\n  ): MsgCreatePosition {\n    const message = createBaseMsgCreatePosition();\n    message.creator = object.creator ?? \"\";\n    message.denom0 = object.denom0 ?? \"\";\n    message.denom1 = object.denom1 ?? \"\";\n    message.fee = object.fee ?? 0;\n    message.tickLower = object.tickLower ?? 0;\n    message.tickUpper = object.tickUpper ?? 0;\n    message.amount0Desired = object.amount0Desired ?? \"\";\n    message.amount1Desired = object.amount1Desired ?? \"\";\n    message.amount0Min = object.amount0Min ?? \"\";\n    message.amount1Min = object.amount1Min ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.deadline = object.deadline ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgCreatePositionResponse(): MsgCreatePositionResponse {\n  return {};\n}\n\nexport const MsgCreatePositionResponse = {\n  encode(\n    _: MsgCreatePositionResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCreatePositionResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCreatePositionResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCreatePositionResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCreatePositionResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCreatePositionResponse>, I>>(\n    _: I\n  ): MsgCreatePositionResponse {\n    const message = createBaseMsgCreatePositionResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgIncreaseLiquidity(): MsgIncreaseLiquidity {\n  return {\n    creator: \"\",\n    tokenId: \"\",\n    amount0Desired: \"\",\n    amount1Desired: \"\",\n    amount0Min: \"\",\n    amount1Min: \"\",\n    deadline: undefined,\n  };\n}\n\nexport const MsgIncreaseLiquidity = {\n  encode(\n    message: MsgIncreaseLiquidity,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.amount0Desired !== \"\") {\n      writer.uint32(26).string(message.amount0Desired);\n    }\n    if (message.amount1Desired !== \"\") {\n      writer.uint32(34).string(message.amount1Desired);\n    }\n    if (message.amount0Min !== \"\") {\n      writer.uint32(42).string(message.amount0Min);\n    }\n    if (message.amount1Min !== \"\") {\n      writer.uint32(50).string(message.amount1Min);\n    }\n    if (message.deadline !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.deadline),\n        writer.uint32(58).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgIncreaseLiquidity {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgIncreaseLiquidity();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.amount0Desired = reader.string();\n          break;\n        case 4:\n          message.amount1Desired = reader.string();\n          break;\n        case 5:\n          message.amount0Min = reader.string();\n          break;\n        case 6:\n          message.amount1Min = reader.string();\n          break;\n        case 7:\n          message.deadline = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgIncreaseLiquidity {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      amount0Desired: isSet(object.amount0Desired)\n        ? String(object.amount0Desired)\n        : \"\",\n      amount1Desired: isSet(object.amount1Desired)\n        ? String(object.amount1Desired)\n        : \"\",\n      amount0Min: isSet(object.amount0Min) ? String(object.amount0Min) : \"\",\n      amount1Min: isSet(object.amount1Min) ? String(object.amount1Min) : \"\",\n      deadline: isSet(object.deadline)\n        ? fromJsonTimestamp(object.deadline)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgIncreaseLiquidity): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.amount0Desired !== undefined &&\n      (obj.amount0Desired = message.amount0Desired);\n    message.amount1Desired !== undefined &&\n      (obj.amount1Desired = message.amount1Desired);\n    message.amount0Min !== undefined && (obj.amount0Min = message.amount0Min);\n    message.amount1Min !== undefined && (obj.amount1Min = message.amount1Min);\n    message.deadline !== undefined &&\n      (obj.deadline = message.deadline.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgIncreaseLiquidity>, I>>(\n    object: I\n  ): MsgIncreaseLiquidity {\n    const message = createBaseMsgIncreaseLiquidity();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.amount0Desired = object.amount0Desired ?? \"\";\n    message.amount1Desired = object.amount1Desired ?? \"\";\n    message.amount0Min = object.amount0Min ?? \"\";\n    message.amount1Min = object.amount1Min ?? \"\";\n    message.deadline = object.deadline ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgIncreaseLiquidityResponse(): MsgIncreaseLiquidityResponse {\n  return {};\n}\n\nexport const MsgIncreaseLiquidityResponse = {\n  encode(\n    _: MsgIncreaseLiquidityResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgIncreaseLiquidityResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgIncreaseLiquidityResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgIncreaseLiquidityResponse {\n    return {};\n  },\n\n  toJSON(_: MsgIncreaseLiquidityResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgIncreaseLiquidityResponse>, I>>(\n    _: I\n  ): MsgIncreaseLiquidityResponse {\n    const message = createBaseMsgIncreaseLiquidityResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgDecreaseLiquidity(): MsgDecreaseLiquidity {\n  return {\n    creator: \"\",\n    tokenId: \"\",\n    liquidity: \"\",\n    amount0Min: \"\",\n    amount1Min: \"\",\n    deadline: undefined,\n  };\n}\n\nexport const MsgDecreaseLiquidity = {\n  encode(\n    message: MsgDecreaseLiquidity,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.liquidity !== \"\") {\n      writer.uint32(26).string(message.liquidity);\n    }\n    if (message.amount0Min !== \"\") {\n      writer.uint32(34).string(message.amount0Min);\n    }\n    if (message.amount1Min !== \"\") {\n      writer.uint32(42).string(message.amount1Min);\n    }\n    if (message.deadline !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.deadline),\n        writer.uint32(50).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgDecreaseLiquidity {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDecreaseLiquidity();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.liquidity = reader.string();\n          break;\n        case 4:\n          message.amount0Min = reader.string();\n          break;\n        case 5:\n          message.amount1Min = reader.string();\n          break;\n        case 6:\n          message.deadline = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgDecreaseLiquidity {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      liquidity: isSet(object.liquidity) ? String(object.liquidity) : \"\",\n      amount0Min: isSet(object.amount0Min) ? String(object.amount0Min) : \"\",\n      amount1Min: isSet(object.amount1Min) ? String(object.amount1Min) : \"\",\n      deadline: isSet(object.deadline)\n        ? fromJsonTimestamp(object.deadline)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgDecreaseLiquidity): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.liquidity !== undefined && (obj.liquidity = message.liquidity);\n    message.amount0Min !== undefined && (obj.amount0Min = message.amount0Min);\n    message.amount1Min !== undefined && (obj.amount1Min = message.amount1Min);\n    message.deadline !== undefined &&\n      (obj.deadline = message.deadline.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDecreaseLiquidity>, I>>(\n    object: I\n  ): MsgDecreaseLiquidity {\n    const message = createBaseMsgDecreaseLiquidity();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.liquidity = object.liquidity ?? \"\";\n    message.amount0Min = object.amount0Min ?? \"\";\n    message.amount1Min = object.amount1Min ?? \"\";\n    message.deadline = object.deadline ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgDecreaseLiquidityResponse(): MsgDecreaseLiquidityResponse {\n  return {};\n}\n\nexport const MsgDecreaseLiquidityResponse = {\n  encode(\n    _: MsgDecreaseLiquidityResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgDecreaseLiquidityResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgDecreaseLiquidityResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgDecreaseLiquidityResponse {\n    return {};\n  },\n\n  toJSON(_: MsgDecreaseLiquidityResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgDecreaseLiquidityResponse>, I>>(\n    _: I\n  ): MsgDecreaseLiquidityResponse {\n    const message = createBaseMsgDecreaseLiquidityResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCollect(): MsgCollect {\n  return {\n    creator: \"\",\n    tokenId: \"\",\n    recipient: \"\",\n    amount0Max: \"\",\n    amount1Max: \"\",\n    collectOnly: false,\n  };\n}\n\nexport const MsgCollect = {\n  encode(\n    message: MsgCollect,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n    if (message.amount0Max !== \"\") {\n      writer.uint32(34).string(message.amount0Max);\n    }\n    if (message.amount1Max !== \"\") {\n      writer.uint32(42).string(message.amount1Max);\n    }\n    if (message.collectOnly === true) {\n      writer.uint32(48).bool(message.collectOnly);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCollect {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollect();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.recipient = reader.string();\n          break;\n        case 4:\n          message.amount0Max = reader.string();\n          break;\n        case 5:\n          message.amount1Max = reader.string();\n          break;\n        case 6:\n          message.collectOnly = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCollect {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      amount0Max: isSet(object.amount0Max) ? String(object.amount0Max) : \"\",\n      amount1Max: isSet(object.amount1Max) ? String(object.amount1Max) : \"\",\n      collectOnly: isSet(object.collectOnly)\n        ? Boolean(object.collectOnly)\n        : false,\n    };\n  },\n\n  toJSON(message: MsgCollect): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.amount0Max !== undefined && (obj.amount0Max = message.amount0Max);\n    message.amount1Max !== undefined && (obj.amount1Max = message.amount1Max);\n    message.collectOnly !== undefined &&\n      (obj.collectOnly = message.collectOnly);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollect>, I>>(\n    object: I\n  ): MsgCollect {\n    const message = createBaseMsgCollect();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.amount0Max = object.amount0Max ?? \"\";\n    message.amount1Max = object.amount1Max ?? \"\";\n    message.collectOnly = object.collectOnly ?? false;\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectResponse(): MsgCollectResponse {\n  return {};\n}\n\nexport const MsgCollectResponse = {\n  encode(\n    _: MsgCollectResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCollectResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCollectResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCollectResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectResponse>, I>>(\n    _: I\n  ): MsgCollectResponse {\n    const message = createBaseMsgCollectResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactIn(): MsgSwapExactIn {\n  return {\n    creator: \"\",\n    recipient: \"\",\n    amountIn: \"\",\n    amountOutMin: \"\",\n    denoms: [],\n    fees: [],\n    deadline: undefined,\n  };\n}\n\nexport const MsgSwapExactIn = {\n  encode(\n    message: MsgSwapExactIn,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(18).string(message.recipient);\n    }\n    if (message.amountIn !== \"\") {\n      writer.uint32(26).string(message.amountIn);\n    }\n    if (message.amountOutMin !== \"\") {\n      writer.uint32(34).string(message.amountOutMin);\n    }\n    for (const v of message.denoms) {\n      writer.uint32(42).string(v!);\n    }\n    writer.uint32(50).fork();\n    for (const v of message.fees) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    if (message.deadline !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.deadline),\n        writer.uint32(58).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSwapExactIn {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactIn();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.recipient = reader.string();\n          break;\n        case 3:\n          message.amountIn = reader.string();\n          break;\n        case 4:\n          message.amountOutMin = reader.string();\n          break;\n        case 5:\n          message.denoms.push(reader.string());\n          break;\n        case 6:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.fees.push(reader.int32());\n            }\n          } else {\n            message.fees.push(reader.int32());\n          }\n          break;\n        case 7:\n          message.deadline = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSwapExactIn {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      amountIn: isSet(object.amountIn) ? String(object.amountIn) : \"\",\n      amountOutMin: isSet(object.amountOutMin)\n        ? String(object.amountOutMin)\n        : \"\",\n      denoms: Array.isArray(object?.denoms)\n        ? object.denoms.map((e: any) => String(e))\n        : [],\n      fees: Array.isArray(object?.fees)\n        ? object.fees.map((e: any) => Number(e))\n        : [],\n      deadline: isSet(object.deadline)\n        ? fromJsonTimestamp(object.deadline)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgSwapExactIn): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.amountIn !== undefined && (obj.amountIn = message.amountIn);\n    message.amountOutMin !== undefined &&\n      (obj.amountOutMin = message.amountOutMin);\n    if (message.denoms) {\n      obj.denoms = message.denoms.map((e) => e);\n    } else {\n      obj.denoms = [];\n    }\n    if (message.fees) {\n      obj.fees = message.fees.map((e) => Math.round(e));\n    } else {\n      obj.fees = [];\n    }\n    message.deadline !== undefined &&\n      (obj.deadline = message.deadline.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactIn>, I>>(\n    object: I\n  ): MsgSwapExactIn {\n    const message = createBaseMsgSwapExactIn();\n    message.creator = object.creator ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.amountIn = object.amountIn ?? \"\";\n    message.amountOutMin = object.amountOutMin ?? \"\";\n    message.denoms = object.denoms?.map((e) => e) || [];\n    message.fees = object.fees?.map((e) => e) || [];\n    message.deadline = object.deadline ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactInResponse(): MsgSwapExactInResponse {\n  return {};\n}\n\nexport const MsgSwapExactInResponse = {\n  encode(\n    _: MsgSwapExactInResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSwapExactInResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactInResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSwapExactInResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSwapExactInResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactInResponse>, I>>(\n    _: I\n  ): MsgSwapExactInResponse {\n    const message = createBaseMsgSwapExactInResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactOut(): MsgSwapExactOut {\n  return {\n    creator: \"\",\n    recipient: \"\",\n    amountOut: \"\",\n    amountInMax: \"\",\n    denoms: [],\n    fees: [],\n    deadline: undefined,\n  };\n}\n\nexport const MsgSwapExactOut = {\n  encode(\n    message: MsgSwapExactOut,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(18).string(message.recipient);\n    }\n    if (message.amountOut !== \"\") {\n      writer.uint32(26).string(message.amountOut);\n    }\n    if (message.amountInMax !== \"\") {\n      writer.uint32(34).string(message.amountInMax);\n    }\n    for (const v of message.denoms) {\n      writer.uint32(42).string(v!);\n    }\n    writer.uint32(50).fork();\n    for (const v of message.fees) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    if (message.deadline !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.deadline),\n        writer.uint32(58).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSwapExactOut {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactOut();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.recipient = reader.string();\n          break;\n        case 3:\n          message.amountOut = reader.string();\n          break;\n        case 4:\n          message.amountInMax = reader.string();\n          break;\n        case 5:\n          message.denoms.push(reader.string());\n          break;\n        case 6:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.fees.push(reader.int32());\n            }\n          } else {\n            message.fees.push(reader.int32());\n          }\n          break;\n        case 7:\n          message.deadline = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgSwapExactOut {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      amountOut: isSet(object.amountOut) ? String(object.amountOut) : \"\",\n      amountInMax: isSet(object.amountInMax) ? String(object.amountInMax) : \"\",\n      denoms: Array.isArray(object?.denoms)\n        ? object.denoms.map((e: any) => String(e))\n        : [],\n      fees: Array.isArray(object?.fees)\n        ? object.fees.map((e: any) => Number(e))\n        : [],\n      deadline: isSet(object.deadline)\n        ? fromJsonTimestamp(object.deadline)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgSwapExactOut): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.amountOut !== undefined && (obj.amountOut = message.amountOut);\n    message.amountInMax !== undefined &&\n      (obj.amountInMax = message.amountInMax);\n    if (message.denoms) {\n      obj.denoms = message.denoms.map((e) => e);\n    } else {\n      obj.denoms = [];\n    }\n    if (message.fees) {\n      obj.fees = message.fees.map((e) => Math.round(e));\n    } else {\n      obj.fees = [];\n    }\n    message.deadline !== undefined &&\n      (obj.deadline = message.deadline.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactOut>, I>>(\n    object: I\n  ): MsgSwapExactOut {\n    const message = createBaseMsgSwapExactOut();\n    message.creator = object.creator ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.amountOut = object.amountOut ?? \"\";\n    message.amountInMax = object.amountInMax ?? \"\";\n    message.denoms = object.denoms?.map((e) => e) || [];\n    message.fees = object.fees?.map((e) => e) || [];\n    message.deadline = object.deadline ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgSwapExactOutResponse(): MsgSwapExactOutResponse {\n  return {};\n}\n\nexport const MsgSwapExactOutResponse = {\n  encode(\n    _: MsgSwapExactOutResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgSwapExactOutResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgSwapExactOutResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgSwapExactOutResponse {\n    return {};\n  },\n\n  toJSON(_: MsgSwapExactOutResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgSwapExactOutResponse>, I>>(\n    _: I\n  ): MsgSwapExactOutResponse {\n    const message = createBaseMsgSwapExactOutResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectReward(): MsgCollectReward {\n  return { creator: \"\", tokenId: \"\", recipient: \"\", collectOnly: false };\n}\n\nexport const MsgCollectReward = {\n  encode(\n    message: MsgCollectReward,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.tokenId !== \"\") {\n      writer.uint32(18).string(message.tokenId);\n    }\n    if (message.recipient !== \"\") {\n      writer.uint32(26).string(message.recipient);\n    }\n    if (message.collectOnly === true) {\n      writer.uint32(32).bool(message.collectOnly);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCollectReward {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectReward();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.tokenId = reader.string();\n          break;\n        case 3:\n          message.recipient = reader.string();\n          break;\n        case 4:\n          message.collectOnly = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCollectReward {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      tokenId: isSet(object.tokenId) ? String(object.tokenId) : \"\",\n      recipient: isSet(object.recipient) ? String(object.recipient) : \"\",\n      collectOnly: isSet(object.collectOnly)\n        ? Boolean(object.collectOnly)\n        : false,\n    };\n  },\n\n  toJSON(message: MsgCollectReward): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.tokenId !== undefined && (obj.tokenId = message.tokenId);\n    message.recipient !== undefined && (obj.recipient = message.recipient);\n    message.collectOnly !== undefined &&\n      (obj.collectOnly = message.collectOnly);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectReward>, I>>(\n    object: I\n  ): MsgCollectReward {\n    const message = createBaseMsgCollectReward();\n    message.creator = object.creator ?? \"\";\n    message.tokenId = object.tokenId ?? \"\";\n    message.recipient = object.recipient ?? \"\";\n    message.collectOnly = object.collectOnly ?? false;\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectRewardResponse(): MsgCollectRewardResponse {\n  return {};\n}\n\nexport const MsgCollectRewardResponse = {\n  encode(\n    _: MsgCollectRewardResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectRewardResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectRewardResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCollectRewardResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCollectRewardResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectRewardResponse>, I>>(\n    _: I\n  ): MsgCollectRewardResponse {\n    const message = createBaseMsgCollectRewardResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectFeeProtocol(): MsgCollectFeeProtocol {\n  return { creator: \"\", address: \"\" };\n}\n\nexport const MsgCollectFeeProtocol = {\n  encode(\n    message: MsgCollectFeeProtocol,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(18).string(message.address);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectFeeProtocol {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectFeeProtocol();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.address = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgCollectFeeProtocol {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      address: isSet(object.address) ? String(object.address) : \"\",\n    };\n  },\n\n  toJSON(message: MsgCollectFeeProtocol): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.address !== undefined && (obj.address = message.address);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectFeeProtocol>, I>>(\n    object: I\n  ): MsgCollectFeeProtocol {\n    const message = createBaseMsgCollectFeeProtocol();\n    message.creator = object.creator ?? \"\";\n    message.address = object.address ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgCollectFeeProtocolResponse(): MsgCollectFeeProtocolResponse {\n  return {};\n}\n\nexport const MsgCollectFeeProtocolResponse = {\n  encode(\n    _: MsgCollectFeeProtocolResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgCollectFeeProtocolResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgCollectFeeProtocolResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgCollectFeeProtocolResponse {\n    return {};\n  },\n\n  toJSON(_: MsgCollectFeeProtocolResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgCollectFeeProtocolResponse>, I>>(\n    _: I\n  ): MsgCollectFeeProtocolResponse {\n    const message = createBaseMsgCollectFeeProtocolResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgGovCorePool(): MsgGovCorePool {\n  return { creator: \"\", address: \"\", action: \"\", triggerTime: undefined };\n}\n\nexport const MsgGovCorePool = {\n  encode(\n    message: MsgGovCorePool,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(18).string(message.address);\n    }\n    if (message.action !== \"\") {\n      writer.uint32(26).string(message.action);\n    }\n    if (message.triggerTime !== undefined) {\n      Timestamp.encode(\n        toTimestamp(message.triggerTime),\n        writer.uint32(34).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGovCorePool {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovCorePool();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.address = reader.string();\n          break;\n        case 3:\n          message.action = reader.string();\n          break;\n        case 4:\n          message.triggerTime = fromTimestamp(\n            Timestamp.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgGovCorePool {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      address: isSet(object.address) ? String(object.address) : \"\",\n      action: isSet(object.action) ? String(object.action) : \"\",\n      triggerTime: isSet(object.triggerTime)\n        ? fromJsonTimestamp(object.triggerTime)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgGovCorePool): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.address !== undefined && (obj.address = message.address);\n    message.action !== undefined && (obj.action = message.action);\n    message.triggerTime !== undefined &&\n      (obj.triggerTime = message.triggerTime.toISOString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovCorePool>, I>>(\n    object: I\n  ): MsgGovCorePool {\n    const message = createBaseMsgGovCorePool();\n    message.creator = object.creator ?? \"\";\n    message.address = object.address ?? \"\";\n    message.action = object.action ?? \"\";\n    message.triggerTime = object.triggerTime ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgGovCorePoolResponse(): MsgGovCorePoolResponse {\n  return {};\n}\n\nexport const MsgGovCorePoolResponse = {\n  encode(\n    _: MsgGovCorePoolResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgGovCorePoolResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgGovCorePoolResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgGovCorePoolResponse {\n    return {};\n  },\n\n  toJSON(_: MsgGovCorePoolResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgGovCorePoolResponse>, I>>(\n    _: I\n  ): MsgGovCorePoolResponse {\n    const message = createBaseMsgGovCorePoolResponse();\n    return message;\n  },\n};\n\n/** Msg defines the Msg service. */\nexport interface Msg {\n  CreatePool(\n    request: DeepPartial<MsgCreatePool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePoolResponse>;\n  CreatePosition(\n    request: DeepPartial<MsgCreatePosition>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePositionResponse>;\n  IncreaseLiquidity(\n    request: DeepPartial<MsgIncreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgIncreaseLiquidityResponse>;\n  DecreaseLiquidity(\n    request: DeepPartial<MsgDecreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDecreaseLiquidityResponse>;\n  Collect(\n    request: DeepPartial<MsgCollect>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectResponse>;\n  SwapExactIn(\n    request: DeepPartial<MsgSwapExactIn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactInResponse>;\n  SwapExactOut(\n    request: DeepPartial<MsgSwapExactOut>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactOutResponse>;\n  CollectReward(\n    request: DeepPartial<MsgCollectReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectRewardResponse>;\n  CollectFeeProtocol(\n    request: DeepPartial<MsgCollectFeeProtocol>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectFeeProtocolResponse>;\n  /** this line is used by starport scaffolding # proto/tx/rpc */\n  GovCorePool(\n    request: DeepPartial<MsgGovCorePool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovCorePoolResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.CreatePool = this.CreatePool.bind(this);\n    this.CreatePosition = this.CreatePosition.bind(this);\n    this.IncreaseLiquidity = this.IncreaseLiquidity.bind(this);\n    this.DecreaseLiquidity = this.DecreaseLiquidity.bind(this);\n    this.Collect = this.Collect.bind(this);\n    this.SwapExactIn = this.SwapExactIn.bind(this);\n    this.SwapExactOut = this.SwapExactOut.bind(this);\n    this.CollectReward = this.CollectReward.bind(this);\n    this.CollectFeeProtocol = this.CollectFeeProtocol.bind(this);\n    this.GovCorePool = this.GovCorePool.bind(this);\n  }\n\n  CreatePool(\n    request: DeepPartial<MsgCreatePool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePoolResponse> {\n    return this.rpc.unary(\n      MsgCreatePoolDesc,\n      MsgCreatePool.fromPartial(request),\n      metadata\n    );\n  }\n\n  CreatePosition(\n    request: DeepPartial<MsgCreatePosition>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCreatePositionResponse> {\n    return this.rpc.unary(\n      MsgCreatePositionDesc,\n      MsgCreatePosition.fromPartial(request),\n      metadata\n    );\n  }\n\n  IncreaseLiquidity(\n    request: DeepPartial<MsgIncreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgIncreaseLiquidityResponse> {\n    return this.rpc.unary(\n      MsgIncreaseLiquidityDesc,\n      MsgIncreaseLiquidity.fromPartial(request),\n      metadata\n    );\n  }\n\n  DecreaseLiquidity(\n    request: DeepPartial<MsgDecreaseLiquidity>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgDecreaseLiquidityResponse> {\n    return this.rpc.unary(\n      MsgDecreaseLiquidityDesc,\n      MsgDecreaseLiquidity.fromPartial(request),\n      metadata\n    );\n  }\n\n  Collect(\n    request: DeepPartial<MsgCollect>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectResponse> {\n    return this.rpc.unary(\n      MsgCollectDesc,\n      MsgCollect.fromPartial(request),\n      metadata\n    );\n  }\n\n  SwapExactIn(\n    request: DeepPartial<MsgSwapExactIn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactInResponse> {\n    return this.rpc.unary(\n      MsgSwapExactInDesc,\n      MsgSwapExactIn.fromPartial(request),\n      metadata\n    );\n  }\n\n  SwapExactOut(\n    request: DeepPartial<MsgSwapExactOut>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgSwapExactOutResponse> {\n    return this.rpc.unary(\n      MsgSwapExactOutDesc,\n      MsgSwapExactOut.fromPartial(request),\n      metadata\n    );\n  }\n\n  CollectReward(\n    request: DeepPartial<MsgCollectReward>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectRewardResponse> {\n    return this.rpc.unary(\n      MsgCollectRewardDesc,\n      MsgCollectReward.fromPartial(request),\n      metadata\n    );\n  }\n\n  CollectFeeProtocol(\n    request: DeepPartial<MsgCollectFeeProtocol>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgCollectFeeProtocolResponse> {\n    return this.rpc.unary(\n      MsgCollectFeeProtocolDesc,\n      MsgCollectFeeProtocol.fromPartial(request),\n      metadata\n    );\n  }\n\n  GovCorePool(\n    request: DeepPartial<MsgGovCorePool>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgGovCorePoolResponse> {\n    return this.rpc.unary(\n      MsgGovCorePoolDesc,\n      MsgGovCorePool.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"metaoslabs.metaos.swap.Msg\",\n};\n\nexport const MsgCreatePoolDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreatePool\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreatePool.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreatePoolResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCreatePositionDesc: UnaryMethodDefinitionish = {\n  methodName: \"CreatePosition\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCreatePosition.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCreatePositionResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgIncreaseLiquidityDesc: UnaryMethodDefinitionish = {\n  methodName: \"IncreaseLiquidity\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgIncreaseLiquidity.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgIncreaseLiquidityResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgDecreaseLiquidityDesc: UnaryMethodDefinitionish = {\n  methodName: \"DecreaseLiquidity\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgDecreaseLiquidity.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgDecreaseLiquidityResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCollectDesc: UnaryMethodDefinitionish = {\n  methodName: \"Collect\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCollect.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCollectResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgSwapExactInDesc: UnaryMethodDefinitionish = {\n  methodName: \"SwapExactIn\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSwapExactIn.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSwapExactInResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgSwapExactOutDesc: UnaryMethodDefinitionish = {\n  methodName: \"SwapExactOut\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgSwapExactOut.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgSwapExactOutResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCollectRewardDesc: UnaryMethodDefinitionish = {\n  methodName: \"CollectReward\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCollectReward.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCollectRewardResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgCollectFeeProtocolDesc: UnaryMethodDefinitionish = {\n  methodName: \"CollectFeeProtocol\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgCollectFeeProtocol.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgCollectFeeProtocolResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgGovCorePoolDesc: UnaryMethodDefinitionish = {\n  methodName: \"GovCorePool\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgGovCorePool.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgGovCorePoolResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nfunction toTimestamp(date: Date): Timestamp {\n  const seconds = numberToLong(date.getTime() / 1_000);\n  const nanos = (date.getTime() % 1_000) * 1_000_000;\n  return { seconds, nanos };\n}\n\nfunction fromTimestamp(t: Timestamp): Date {\n  let millis = t.seconds.toNumber() * 1_000;\n  millis += t.nanos / 1_000_000;\n  return new Date(millis);\n}\n\nfunction fromJsonTimestamp(o: any): Date {\n  if (o instanceof Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction numberToLong(number: number) {\n  return Long.fromNumber(number);\n}\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import {\n  protobufPackage,\n  MsgCreatePool as MsgCreatePool_pb,\n  MsgCreatePosition as MsgCreatePosition_pb,\n  MsgIncreaseLiquidity as MsgIncreaseLiquidity_pb,\n  MsgDecreaseLiquidity as MsgDecreaseLiquidity_pb,\n  MsgCollect as MsgCollect_pb,\n  MsgCollectReward as MsgCollectReward_pb,\n  MsgSwapExactIn as MsgSwapExactIn_pb,\n  MsgSwapExactOut as MsgSwapExactOut_pb,\n  MsgCollectFeeProtocol as MsgCollectFeeProtocol_pb,\n  MsgGovCorePool as MsgGovCorePool_pb,\n} from \"../proto/swap/tx\";\nimport { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\n\nexport class MsgCollectReward extends BaseMsg {\n  public protoMsg: MsgCollectReward_pb;\n  constructor(msg: MsgCollectReward_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCollectReward.typeUrl,\n      value: MsgCollectReward_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCollectReward {\n  export const typeUrl: string = `/${protobufPackage}.MsgCollectReward`;\n  export const Proto = MsgCollectReward_pb;\n  export interface Proto extends MsgCollectReward_pb {}\n}\n\nexport class MsgSwapExactOut extends BaseMsg {\n  public protoMsg: MsgSwapExactOut_pb;\n  constructor(msg: MsgSwapExactOut_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSwapExactOut.typeUrl,\n      value: MsgSwapExactOut_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSwapExactOut {\n  export const typeUrl: string = `/${protobufPackage}.MsgSwapExactOut`;\n  export const Proto = MsgSwapExactOut_pb;\n  export interface Proto extends MsgSwapExactOut_pb {}\n}\n\nexport class MsgSwapExactIn extends BaseMsg {\n  public protoMsg: MsgSwapExactIn_pb;\n  constructor(msg: MsgSwapExactIn_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgSwapExactIn.typeUrl,\n      value: MsgSwapExactIn_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgSwapExactIn {\n  export const typeUrl: string = `/${protobufPackage}.MsgSwapExactIn`;\n  export const Proto = MsgSwapExactIn_pb;\n  export interface Proto extends MsgSwapExactIn_pb {}\n}\n\nexport class MsgCreatePool extends BaseMsg {\n  public protoMsg: MsgCreatePool_pb;\n  constructor(msg: MsgCreatePool_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreatePool.typeUrl,\n      value: MsgCreatePool_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreatePool {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreatePool`;\n  export const Proto = MsgCreatePool_pb;\n  export interface Proto extends MsgCreatePool_pb {}\n}\n\nexport class MsgCollect extends BaseMsg {\n  public protoMsg: MsgCollect_pb;\n  constructor(msg: MsgCollect_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCollect.typeUrl,\n      value: MsgCollect_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCollect {\n  export const typeUrl: string = `/${protobufPackage}.MsgCollect`;\n  export const Proto = MsgCollect_pb;\n  export interface Proto extends MsgCollect_pb {}\n}\n\nexport class MsgCreatePosition extends BaseMsg {\n  public protoMsg: MsgCreatePosition_pb;\n  constructor(msg: MsgCreatePosition_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCreatePosition.typeUrl,\n      value: MsgCreatePosition_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCreatePosition {\n  export const typeUrl: string = `/${protobufPackage}.MsgCreatePosition`;\n  export const Proto = MsgCreatePosition_pb;\n  export interface Proto extends MsgCreatePosition_pb {}\n}\n\nexport class MsgDecreaseLiquidity extends BaseMsg {\n  public protoMsg: MsgDecreaseLiquidity_pb;\n  constructor(msg: MsgDecreaseLiquidity_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgDecreaseLiquidity.typeUrl,\n      value: MsgDecreaseLiquidity_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgDecreaseLiquidity {\n  export const typeUrl: string = `/${protobufPackage}.MsgDecreaseLiquidity`;\n  export const Proto = MsgDecreaseLiquidity_pb;\n  export interface Proto extends MsgDecreaseLiquidity_pb {}\n}\n\nexport class MsgIncreaseLiquidity extends BaseMsg {\n  public protoMsg: MsgIncreaseLiquidity_pb;\n  constructor(msg: MsgIncreaseLiquidity_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgIncreaseLiquidity.typeUrl,\n      value: MsgIncreaseLiquidity_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgIncreaseLiquidity {\n  export const typeUrl: string = `/${protobufPackage}.MsgIncreaseLiquidity`;\n  export const Proto = MsgIncreaseLiquidity_pb;\n  export interface Proto extends MsgIncreaseLiquidity_pb {}\n}\n\nexport class MsgCollectFeeProtocol extends BaseMsg {\n  public protoMsg: MsgCollectFeeProtocol_pb;\n  constructor(msg: MsgCollectFeeProtocol_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgCollectFeeProtocol.typeUrl,\n      value: MsgCollectFeeProtocol_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgCollectFeeProtocol {\n  export const typeUrl: string = `/${protobufPackage}.MsgCollectFeeProtocol`;\n  export const Proto = MsgCollectFeeProtocol_pb;\n  export interface Proto extends MsgCollectFeeProtocol_pb {}\n}\n\nexport class MsgGovCorePool extends BaseMsg {\n  public protoMsg: MsgGovCorePool_pb;\n  constructor(msg: MsgGovCorePool_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgGovCorePool.typeUrl,\n      value: MsgGovCorePool_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgGovCorePool {\n  export const typeUrl: string = `/${protobufPackage}.MsgGovCorePool`;\n  export const Proto = MsgGovCorePool_pb;\n  export interface Proto extends MsgGovCorePool_pb {}\n}\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { BrowserHeaders } from \"browser-headers\";\n\nexport const protobufPackage = \"metaoslabs.metaos.token\";\n\nexport interface MsgIssue {\n  creator: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  initialSupply: string;\n  maxSupply: string;\n  description: string;\n}\n\nexport interface MsgIssueResponse {\n  denom: string;\n}\n\nexport interface MsgMint {\n  creator: string;\n  amount: string;\n}\n\nexport interface MsgMintResponse {}\n\nexport interface MsgBurn {\n  creator: string;\n  amount: string;\n}\n\nexport interface MsgBurnResponse {}\n\nexport interface MsgTransferOwnership {\n  creator: string;\n  denom: string;\n  address: string;\n}\n\nexport interface MsgTransferOwnershipResponse {}\n\nexport interface MsgConfirmOwnership {\n  creator: string;\n  denom: string;\n}\n\nexport interface MsgConfirmOwnershipResponse {}\n\nfunction createBaseMsgIssue(): MsgIssue {\n  return {\n    creator: \"\",\n    name: \"\",\n    symbol: \"\",\n    decimals: 0,\n    initialSupply: \"\",\n    maxSupply: \"\",\n    description: \"\",\n  };\n}\n\nexport const MsgIssue = {\n  encode(\n    message: MsgIssue,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.name !== \"\") {\n      writer.uint32(18).string(message.name);\n    }\n    if (message.symbol !== \"\") {\n      writer.uint32(26).string(message.symbol);\n    }\n    if (message.decimals !== 0) {\n      writer.uint32(32).int32(message.decimals);\n    }\n    if (message.initialSupply !== \"\") {\n      writer.uint32(42).string(message.initialSupply);\n    }\n    if (message.maxSupply !== \"\") {\n      writer.uint32(50).string(message.maxSupply);\n    }\n    if (message.description !== \"\") {\n      writer.uint32(58).string(message.description);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgIssue {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgIssue();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.name = reader.string();\n          break;\n        case 3:\n          message.symbol = reader.string();\n          break;\n        case 4:\n          message.decimals = reader.int32();\n          break;\n        case 5:\n          message.initialSupply = reader.string();\n          break;\n        case 6:\n          message.maxSupply = reader.string();\n          break;\n        case 7:\n          message.description = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgIssue {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      name: isSet(object.name) ? String(object.name) : \"\",\n      symbol: isSet(object.symbol) ? String(object.symbol) : \"\",\n      decimals: isSet(object.decimals) ? Number(object.decimals) : 0,\n      initialSupply: isSet(object.initialSupply)\n        ? String(object.initialSupply)\n        : \"\",\n      maxSupply: isSet(object.maxSupply) ? String(object.maxSupply) : \"\",\n      description: isSet(object.description) ? String(object.description) : \"\",\n    };\n  },\n\n  toJSON(message: MsgIssue): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.name !== undefined && (obj.name = message.name);\n    message.symbol !== undefined && (obj.symbol = message.symbol);\n    message.decimals !== undefined &&\n      (obj.decimals = Math.round(message.decimals));\n    message.initialSupply !== undefined &&\n      (obj.initialSupply = message.initialSupply);\n    message.maxSupply !== undefined && (obj.maxSupply = message.maxSupply);\n    message.description !== undefined &&\n      (obj.description = message.description);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgIssue>, I>>(object: I): MsgIssue {\n    const message = createBaseMsgIssue();\n    message.creator = object.creator ?? \"\";\n    message.name = object.name ?? \"\";\n    message.symbol = object.symbol ?? \"\";\n    message.decimals = object.decimals ?? 0;\n    message.initialSupply = object.initialSupply ?? \"\";\n    message.maxSupply = object.maxSupply ?? \"\";\n    message.description = object.description ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgIssueResponse(): MsgIssueResponse {\n  return { denom: \"\" };\n}\n\nexport const MsgIssueResponse = {\n  encode(\n    message: MsgIssueResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgIssueResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgIssueResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgIssueResponse {\n    return {\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n    };\n  },\n\n  toJSON(message: MsgIssueResponse): unknown {\n    const obj: any = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgIssueResponse>, I>>(\n    object: I\n  ): MsgIssueResponse {\n    const message = createBaseMsgIssueResponse();\n    message.denom = object.denom ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgMint(): MsgMint {\n  return { creator: \"\", amount: \"\" };\n}\n\nexport const MsgMint = {\n  encode(\n    message: MsgMint,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMint {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgMint();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgMint {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: MsgMint): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgMint>, I>>(object: I): MsgMint {\n    const message = createBaseMsgMint();\n    message.creator = object.creator ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgMintResponse(): MsgMintResponse {\n  return {};\n}\n\nexport const MsgMintResponse = {\n  encode(\n    _: MsgMintResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgMintResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgMintResponse {\n    return {};\n  },\n\n  toJSON(_: MsgMintResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgMintResponse>, I>>(\n    _: I\n  ): MsgMintResponse {\n    const message = createBaseMsgMintResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgBurn(): MsgBurn {\n  return { creator: \"\", amount: \"\" };\n}\n\nexport const MsgBurn = {\n  encode(\n    message: MsgBurn,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurn {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgBurn();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.amount = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgBurn {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      amount: isSet(object.amount) ? String(object.amount) : \"\",\n    };\n  },\n\n  toJSON(message: MsgBurn): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgBurn>, I>>(object: I): MsgBurn {\n    const message = createBaseMsgBurn();\n    message.creator = object.creator ?? \"\";\n    message.amount = object.amount ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgBurnResponse(): MsgBurnResponse {\n  return {};\n}\n\nexport const MsgBurnResponse = {\n  encode(\n    _: MsgBurnResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurnResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgBurnResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgBurnResponse {\n    return {};\n  },\n\n  toJSON(_: MsgBurnResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgBurnResponse>, I>>(\n    _: I\n  ): MsgBurnResponse {\n    const message = createBaseMsgBurnResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgTransferOwnership(): MsgTransferOwnership {\n  return { creator: \"\", denom: \"\", address: \"\" };\n}\n\nexport const MsgTransferOwnership = {\n  encode(\n    message: MsgTransferOwnership,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(18).string(message.denom);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(26).string(message.address);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgTransferOwnership {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgTransferOwnership();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.denom = reader.string();\n          break;\n        case 3:\n          message.address = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgTransferOwnership {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n      address: isSet(object.address) ? String(object.address) : \"\",\n    };\n  },\n\n  toJSON(message: MsgTransferOwnership): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.address !== undefined && (obj.address = message.address);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgTransferOwnership>, I>>(\n    object: I\n  ): MsgTransferOwnership {\n    const message = createBaseMsgTransferOwnership();\n    message.creator = object.creator ?? \"\";\n    message.denom = object.denom ?? \"\";\n    message.address = object.address ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgTransferOwnershipResponse(): MsgTransferOwnershipResponse {\n  return {};\n}\n\nexport const MsgTransferOwnershipResponse = {\n  encode(\n    _: MsgTransferOwnershipResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgTransferOwnershipResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgTransferOwnershipResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgTransferOwnershipResponse {\n    return {};\n  },\n\n  toJSON(_: MsgTransferOwnershipResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgTransferOwnershipResponse>, I>>(\n    _: I\n  ): MsgTransferOwnershipResponse {\n    const message = createBaseMsgTransferOwnershipResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgConfirmOwnership(): MsgConfirmOwnership {\n  return { creator: \"\", denom: \"\" };\n}\n\nexport const MsgConfirmOwnership = {\n  encode(\n    message: MsgConfirmOwnership,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.creator !== \"\") {\n      writer.uint32(10).string(message.creator);\n    }\n    if (message.denom !== \"\") {\n      writer.uint32(18).string(message.denom);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConfirmOwnership {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgConfirmOwnership();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.creator = reader.string();\n          break;\n        case 2:\n          message.denom = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgConfirmOwnership {\n    return {\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      denom: isSet(object.denom) ? String(object.denom) : \"\",\n    };\n  },\n\n  toJSON(message: MsgConfirmOwnership): unknown {\n    const obj: any = {};\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.denom !== undefined && (obj.denom = message.denom);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgConfirmOwnership>, I>>(\n    object: I\n  ): MsgConfirmOwnership {\n    const message = createBaseMsgConfirmOwnership();\n    message.creator = object.creator ?? \"\";\n    message.denom = object.denom ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgConfirmOwnershipResponse(): MsgConfirmOwnershipResponse {\n  return {};\n}\n\nexport const MsgConfirmOwnershipResponse = {\n  encode(\n    _: MsgConfirmOwnershipResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgConfirmOwnershipResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgConfirmOwnershipResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgConfirmOwnershipResponse {\n    return {};\n  },\n\n  toJSON(_: MsgConfirmOwnershipResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgConfirmOwnershipResponse>, I>>(\n    _: I\n  ): MsgConfirmOwnershipResponse {\n    const message = createBaseMsgConfirmOwnershipResponse();\n    return message;\n  },\n};\n\n/** Msg defines the Msg service. */\nexport interface Msg {\n  Issue(\n    request: DeepPartial<MsgIssue>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgIssueResponse>;\n  Mint(\n    request: DeepPartial<MsgMint>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgMintResponse>;\n  Burn(\n    request: DeepPartial<MsgBurn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgBurnResponse>;\n  TransferOwnership(\n    request: DeepPartial<MsgTransferOwnership>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgTransferOwnershipResponse>;\n  /** this line is used by starport scaffolding # proto/tx/rpc */\n  ConfirmOwnership(\n    request: DeepPartial<MsgConfirmOwnership>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgConfirmOwnershipResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.Issue = this.Issue.bind(this);\n    this.Mint = this.Mint.bind(this);\n    this.Burn = this.Burn.bind(this);\n    this.TransferOwnership = this.TransferOwnership.bind(this);\n    this.ConfirmOwnership = this.ConfirmOwnership.bind(this);\n  }\n\n  Issue(\n    request: DeepPartial<MsgIssue>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgIssueResponse> {\n    return this.rpc.unary(\n      MsgIssueDesc,\n      MsgIssue.fromPartial(request),\n      metadata\n    );\n  }\n\n  Mint(\n    request: DeepPartial<MsgMint>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgMintResponse> {\n    return this.rpc.unary(MsgMintDesc, MsgMint.fromPartial(request), metadata);\n  }\n\n  Burn(\n    request: DeepPartial<MsgBurn>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgBurnResponse> {\n    return this.rpc.unary(MsgBurnDesc, MsgBurn.fromPartial(request), metadata);\n  }\n\n  TransferOwnership(\n    request: DeepPartial<MsgTransferOwnership>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgTransferOwnershipResponse> {\n    return this.rpc.unary(\n      MsgTransferOwnershipDesc,\n      MsgTransferOwnership.fromPartial(request),\n      metadata\n    );\n  }\n\n  ConfirmOwnership(\n    request: DeepPartial<MsgConfirmOwnership>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgConfirmOwnershipResponse> {\n    return this.rpc.unary(\n      MsgConfirmOwnershipDesc,\n      MsgConfirmOwnership.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"metaoslabs.metaos.token.Msg\",\n};\n\nexport const MsgIssueDesc: UnaryMethodDefinitionish = {\n  methodName: \"Issue\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgIssue.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgIssueResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgMintDesc: UnaryMethodDefinitionish = {\n  methodName: \"Mint\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgMint.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgMintResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgBurnDesc: UnaryMethodDefinitionish = {\n  methodName: \"Burn\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgBurn.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgBurnResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgTransferOwnershipDesc: UnaryMethodDefinitionish = {\n  methodName: \"TransferOwnership\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgTransferOwnership.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgTransferOwnershipResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgConfirmOwnershipDesc: UnaryMethodDefinitionish = {\n  methodName: \"ConfirmOwnership\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgConfirmOwnership.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgConfirmOwnershipResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgIssue as MsgIssue_pb,\n  MsgMint as MsgMint_pb,\n  MsgBurn as MsgBurn_pb,\n  MsgTransferOwnership as MsgTransferOwnership_pb,\n  MsgConfirmOwnership as MsgConfirmOwnership_pb,\n} from \"../proto/token/tx\";\n\nexport class MsgIssue extends BaseMsg {\n  public protoMsg: MsgIssue_pb;\n  constructor(msg: MsgIssue_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgIssue.typeUrl,\n      value: MsgIssue_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgIssue {\n  export const typeUrl: string = `/${protobufPackage}.MsgIssue`;\n  export const Proto = MsgIssue_pb;\n  export interface Proto extends MsgIssue_pb {}\n}\n\nexport class MsgMint extends BaseMsg {\n  public protoMsg: MsgMint_pb;\n  constructor(msg: MsgMint_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgMint.typeUrl,\n      value: MsgMint_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgMint {\n  export const typeUrl: string = `/${protobufPackage}.MsgMint`;\n  export const Proto = MsgMint_pb;\n  export interface Proto extends MsgMint_pb {}\n}\n\nexport class MsgBurn extends BaseMsg {\n  public protoMsg: MsgBurn_pb;\n  constructor(msg: MsgBurn_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgBurn.typeUrl,\n      value: MsgBurn_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgBurn {\n  export const typeUrl: string = `/${protobufPackage}.MsgBurn`;\n  export const Proto = MsgBurn_pb;\n  export interface Proto extends MsgBurn_pb {}\n}\n\nexport class MsgTransferOwnership extends BaseMsg {\n  public protoMsg: MsgTransferOwnership_pb;\n  constructor(msg: MsgTransferOwnership_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgTransferOwnership.typeUrl,\n      value: MsgTransferOwnership_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgTransferOwnership {\n  export const typeUrl: string = `/${protobufPackage}.MsgTransferOwnership`;\n  export const Proto = MsgTransferOwnership_pb;\n  export interface Proto extends MsgTransferOwnership_pb {}\n}\n\nexport class MsgConfirmOwnership extends BaseMsg {\n  public protoMsg: MsgConfirmOwnership_pb;\n  constructor(msg: MsgConfirmOwnership_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgConfirmOwnership.typeUrl,\n      value: MsgConfirmOwnership_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgConfirmOwnership {\n  export const typeUrl: string = `/${protobufPackage}.MsgConfirmOwnership`;\n  export const Proto = MsgConfirmOwnership_pb;\n  export interface Proto extends MsgConfirmOwnership_pb {}\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\n\nexport const protobufPackage = \"cosmwasm.wasm.v1\";\n\n/** AccessType permission types */\nexport enum AccessType {\n  /** ACCESS_TYPE_UNSPECIFIED - AccessTypeUnspecified placeholder for empty value */\n  ACCESS_TYPE_UNSPECIFIED = 0,\n  /** ACCESS_TYPE_NOBODY - AccessTypeNobody forbidden */\n  ACCESS_TYPE_NOBODY = 1,\n  /** ACCESS_TYPE_ONLY_ADDRESS - AccessTypeOnlyAddress restricted to an address */\n  ACCESS_TYPE_ONLY_ADDRESS = 2,\n  /** ACCESS_TYPE_EVERYBODY - AccessTypeEverybody unrestricted */\n  ACCESS_TYPE_EVERYBODY = 3,\n  UNRECOGNIZED = -1,\n}\n\nexport function accessTypeFromJSON(object: any): AccessType {\n  switch (object) {\n    case 0:\n    case \"ACCESS_TYPE_UNSPECIFIED\":\n      return AccessType.ACCESS_TYPE_UNSPECIFIED;\n    case 1:\n    case \"ACCESS_TYPE_NOBODY\":\n      return AccessType.ACCESS_TYPE_NOBODY;\n    case 2:\n    case \"ACCESS_TYPE_ONLY_ADDRESS\":\n      return AccessType.ACCESS_TYPE_ONLY_ADDRESS;\n    case 3:\n    case \"ACCESS_TYPE_EVERYBODY\":\n      return AccessType.ACCESS_TYPE_EVERYBODY;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return AccessType.UNRECOGNIZED;\n  }\n}\n\nexport function accessTypeToJSON(object: AccessType): string {\n  switch (object) {\n    case AccessType.ACCESS_TYPE_UNSPECIFIED:\n      return \"ACCESS_TYPE_UNSPECIFIED\";\n    case AccessType.ACCESS_TYPE_NOBODY:\n      return \"ACCESS_TYPE_NOBODY\";\n    case AccessType.ACCESS_TYPE_ONLY_ADDRESS:\n      return \"ACCESS_TYPE_ONLY_ADDRESS\";\n    case AccessType.ACCESS_TYPE_EVERYBODY:\n      return \"ACCESS_TYPE_EVERYBODY\";\n    case AccessType.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/** ContractCodeHistoryOperationType actions that caused a code change */\nexport enum ContractCodeHistoryOperationType {\n  /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED - ContractCodeHistoryOperationTypeUnspecified placeholder for empty value */\n  CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED = 0,\n  /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT - ContractCodeHistoryOperationTypeInit on chain contract instantiation */\n  CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT = 1,\n  /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE - ContractCodeHistoryOperationTypeMigrate code migration */\n  CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE = 2,\n  /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS - ContractCodeHistoryOperationTypeGenesis based on genesis data */\n  CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS = 3,\n  UNRECOGNIZED = -1,\n}\n\nexport function contractCodeHistoryOperationTypeFromJSON(\n  object: any\n): ContractCodeHistoryOperationType {\n  switch (object) {\n    case 0:\n    case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\":\n      return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED;\n    case 1:\n    case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\":\n      return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT;\n    case 2:\n    case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\":\n      return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE;\n    case 3:\n    case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\":\n      return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return ContractCodeHistoryOperationType.UNRECOGNIZED;\n  }\n}\n\nexport function contractCodeHistoryOperationTypeToJSON(\n  object: ContractCodeHistoryOperationType\n): string {\n  switch (object) {\n    case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:\n      return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\";\n    case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT:\n      return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\";\n    case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE:\n      return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\";\n    case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS:\n      return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\";\n    case ContractCodeHistoryOperationType.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/** AccessTypeParam */\nexport interface AccessTypeParam {\n  value: AccessType;\n}\n\n/** AccessConfig access control type. */\nexport interface AccessConfig {\n  permission: AccessType;\n  address: string;\n}\n\n/** Params defines the set of wasm parameters. */\nexport interface Params {\n  codeUploadAccess?: AccessConfig;\n  instantiateDefaultPermission: AccessType;\n}\n\n/** CodeInfo is data for the uploaded contract WASM code */\nexport interface CodeInfo {\n  /** CodeHash is the unique identifier created by wasmvm */\n  codeHash: Uint8Array;\n  /** Creator address who initially stored the code */\n  creator: string;\n  /** InstantiateConfig access control to apply on contract creation, optional */\n  instantiateConfig?: AccessConfig;\n}\n\n/** ContractInfo stores a WASM contract instance */\nexport interface ContractInfo {\n  /** CodeID is the reference to the stored Wasm code */\n  codeId: Long;\n  /** Creator address who initially instantiated the contract */\n  creator: string;\n  /** Admin is an optional address that can execute migrations */\n  admin: string;\n  /** Label is optional metadata to be stored with a contract instance. */\n  label: string;\n  /**\n   * Created Tx position when the contract was instantiated.\n   * This data should kept internal and not be exposed via query results. Just\n   * use for sorting\n   */\n  created?: AbsoluteTxPosition;\n  ibcPortId: string;\n  /**\n   * Extension is an extension point to store custom metadata within the\n   * persistence model.\n   */\n  extension?: Any;\n}\n\n/** ContractCodeHistoryEntry metadata to a contract. */\nexport interface ContractCodeHistoryEntry {\n  operation: ContractCodeHistoryOperationType;\n  /** CodeID is the reference to the stored WASM code */\n  codeId: Long;\n  /** Updated Tx position when the operation was executed. */\n  updated?: AbsoluteTxPosition;\n  msg: Uint8Array;\n}\n\n/**\n * AbsoluteTxPosition is a unique transaction position that allows for global\n * ordering of transactions.\n */\nexport interface AbsoluteTxPosition {\n  /** BlockHeight is the block the contract was created at */\n  blockHeight: Long;\n  /**\n   * TxIndex is a monotonic counter within the block (actual transaction index,\n   * or gas consumed)\n   */\n  txIndex: Long;\n}\n\n/** Model is a struct that holds a KV pair */\nexport interface Model {\n  /** hex-encode key to read it better (this is often ascii) */\n  key: Uint8Array;\n  /** base64-encode raw value */\n  value: Uint8Array;\n}\n\nfunction createBaseAccessTypeParam(): AccessTypeParam {\n  return { value: 0 };\n}\n\nexport const AccessTypeParam = {\n  encode(\n    message: AccessTypeParam,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.value !== 0) {\n      writer.uint32(8).int32(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): AccessTypeParam {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAccessTypeParam();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.value = reader.int32() as any;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AccessTypeParam {\n    return {\n      value: isSet(object.value) ? accessTypeFromJSON(object.value) : 0,\n    };\n  },\n\n  toJSON(message: AccessTypeParam): unknown {\n    const obj: any = {};\n    message.value !== undefined &&\n      (obj.value = accessTypeToJSON(message.value));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<AccessTypeParam>, I>>(\n    object: I\n  ): AccessTypeParam {\n    const message = createBaseAccessTypeParam();\n    message.value = object.value ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseAccessConfig(): AccessConfig {\n  return { permission: 0, address: \"\" };\n}\n\nexport const AccessConfig = {\n  encode(\n    message: AccessConfig,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.permission !== 0) {\n      writer.uint32(8).int32(message.permission);\n    }\n    if (message.address !== \"\") {\n      writer.uint32(18).string(message.address);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): AccessConfig {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAccessConfig();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.permission = reader.int32() as any;\n          break;\n        case 2:\n          message.address = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AccessConfig {\n    return {\n      permission: isSet(object.permission)\n        ? accessTypeFromJSON(object.permission)\n        : 0,\n      address: isSet(object.address) ? String(object.address) : \"\",\n    };\n  },\n\n  toJSON(message: AccessConfig): unknown {\n    const obj: any = {};\n    message.permission !== undefined &&\n      (obj.permission = accessTypeToJSON(message.permission));\n    message.address !== undefined && (obj.address = message.address);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<AccessConfig>, I>>(\n    object: I\n  ): AccessConfig {\n    const message = createBaseAccessConfig();\n    message.permission = object.permission ?? 0;\n    message.address = object.address ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseParams(): Params {\n  return { codeUploadAccess: undefined, instantiateDefaultPermission: 0 };\n}\n\nexport const Params = {\n  encode(\n    message: Params,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.codeUploadAccess !== undefined) {\n      AccessConfig.encode(\n        message.codeUploadAccess,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.instantiateDefaultPermission !== 0) {\n      writer.uint32(16).int32(message.instantiateDefaultPermission);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Params {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseParams();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.codeUploadAccess = AccessConfig.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 2:\n          message.instantiateDefaultPermission = reader.int32() as any;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Params {\n    return {\n      codeUploadAccess: isSet(object.codeUploadAccess)\n        ? AccessConfig.fromJSON(object.codeUploadAccess)\n        : undefined,\n      instantiateDefaultPermission: isSet(object.instantiateDefaultPermission)\n        ? accessTypeFromJSON(object.instantiateDefaultPermission)\n        : 0,\n    };\n  },\n\n  toJSON(message: Params): unknown {\n    const obj: any = {};\n    message.codeUploadAccess !== undefined &&\n      (obj.codeUploadAccess = message.codeUploadAccess\n        ? AccessConfig.toJSON(message.codeUploadAccess)\n        : undefined);\n    message.instantiateDefaultPermission !== undefined &&\n      (obj.instantiateDefaultPermission = accessTypeToJSON(\n        message.instantiateDefaultPermission\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {\n    const message = createBaseParams();\n    message.codeUploadAccess =\n      object.codeUploadAccess !== undefined && object.codeUploadAccess !== null\n        ? AccessConfig.fromPartial(object.codeUploadAccess)\n        : undefined;\n    message.instantiateDefaultPermission =\n      object.instantiateDefaultPermission ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseCodeInfo(): CodeInfo {\n  return {\n    codeHash: new Uint8Array(),\n    creator: \"\",\n    instantiateConfig: undefined,\n  };\n}\n\nexport const CodeInfo = {\n  encode(\n    message: CodeInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.codeHash.length !== 0) {\n      writer.uint32(10).bytes(message.codeHash);\n    }\n    if (message.creator !== \"\") {\n      writer.uint32(18).string(message.creator);\n    }\n    if (message.instantiateConfig !== undefined) {\n      AccessConfig.encode(\n        message.instantiateConfig,\n        writer.uint32(42).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CodeInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCodeInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.codeHash = reader.bytes();\n          break;\n        case 2:\n          message.creator = reader.string();\n          break;\n        case 5:\n          message.instantiateConfig = AccessConfig.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): CodeInfo {\n    return {\n      codeHash: isSet(object.codeHash)\n        ? bytesFromBase64(object.codeHash)\n        : new Uint8Array(),\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      instantiateConfig: isSet(object.instantiateConfig)\n        ? AccessConfig.fromJSON(object.instantiateConfig)\n        : undefined,\n    };\n  },\n\n  toJSON(message: CodeInfo): unknown {\n    const obj: any = {};\n    message.codeHash !== undefined &&\n      (obj.codeHash = base64FromBytes(\n        message.codeHash !== undefined ? message.codeHash : new Uint8Array()\n      ));\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.instantiateConfig !== undefined &&\n      (obj.instantiateConfig = message.instantiateConfig\n        ? AccessConfig.toJSON(message.instantiateConfig)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<CodeInfo>, I>>(object: I): CodeInfo {\n    const message = createBaseCodeInfo();\n    message.codeHash = object.codeHash ?? new Uint8Array();\n    message.creator = object.creator ?? \"\";\n    message.instantiateConfig =\n      object.instantiateConfig !== undefined &&\n      object.instantiateConfig !== null\n        ? AccessConfig.fromPartial(object.instantiateConfig)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseContractInfo(): ContractInfo {\n  return {\n    codeId: Long.UZERO,\n    creator: \"\",\n    admin: \"\",\n    label: \"\",\n    created: undefined,\n    ibcPortId: \"\",\n    extension: undefined,\n  };\n}\n\nexport const ContractInfo = {\n  encode(\n    message: ContractInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.codeId.isZero()) {\n      writer.uint32(8).uint64(message.codeId);\n    }\n    if (message.creator !== \"\") {\n      writer.uint32(18).string(message.creator);\n    }\n    if (message.admin !== \"\") {\n      writer.uint32(26).string(message.admin);\n    }\n    if (message.label !== \"\") {\n      writer.uint32(34).string(message.label);\n    }\n    if (message.created !== undefined) {\n      AbsoluteTxPosition.encode(\n        message.created,\n        writer.uint32(42).fork()\n      ).ldelim();\n    }\n    if (message.ibcPortId !== \"\") {\n      writer.uint32(50).string(message.ibcPortId);\n    }\n    if (message.extension !== undefined) {\n      Any.encode(message.extension, writer.uint32(58).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ContractInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseContractInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.codeId = reader.uint64() as Long;\n          break;\n        case 2:\n          message.creator = reader.string();\n          break;\n        case 3:\n          message.admin = reader.string();\n          break;\n        case 4:\n          message.label = reader.string();\n          break;\n        case 5:\n          message.created = AbsoluteTxPosition.decode(reader, reader.uint32());\n          break;\n        case 6:\n          message.ibcPortId = reader.string();\n          break;\n        case 7:\n          message.extension = Any.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ContractInfo {\n    return {\n      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,\n      creator: isSet(object.creator) ? String(object.creator) : \"\",\n      admin: isSet(object.admin) ? String(object.admin) : \"\",\n      label: isSet(object.label) ? String(object.label) : \"\",\n      created: isSet(object.created)\n        ? AbsoluteTxPosition.fromJSON(object.created)\n        : undefined,\n      ibcPortId: isSet(object.ibcPortId) ? String(object.ibcPortId) : \"\",\n      extension: isSet(object.extension)\n        ? Any.fromJSON(object.extension)\n        : undefined,\n    };\n  },\n\n  toJSON(message: ContractInfo): unknown {\n    const obj: any = {};\n    message.codeId !== undefined &&\n      (obj.codeId = (message.codeId || Long.UZERO).toString());\n    message.creator !== undefined && (obj.creator = message.creator);\n    message.admin !== undefined && (obj.admin = message.admin);\n    message.label !== undefined && (obj.label = message.label);\n    message.created !== undefined &&\n      (obj.created = message.created\n        ? AbsoluteTxPosition.toJSON(message.created)\n        : undefined);\n    message.ibcPortId !== undefined && (obj.ibcPortId = message.ibcPortId);\n    message.extension !== undefined &&\n      (obj.extension = message.extension\n        ? Any.toJSON(message.extension)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ContractInfo>, I>>(\n    object: I\n  ): ContractInfo {\n    const message = createBaseContractInfo();\n    message.codeId =\n      object.codeId !== undefined && object.codeId !== null\n        ? Long.fromValue(object.codeId)\n        : Long.UZERO;\n    message.creator = object.creator ?? \"\";\n    message.admin = object.admin ?? \"\";\n    message.label = object.label ?? \"\";\n    message.created =\n      object.created !== undefined && object.created !== null\n        ? AbsoluteTxPosition.fromPartial(object.created)\n        : undefined;\n    message.ibcPortId = object.ibcPortId ?? \"\";\n    message.extension =\n      object.extension !== undefined && object.extension !== null\n        ? Any.fromPartial(object.extension)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseContractCodeHistoryEntry(): ContractCodeHistoryEntry {\n  return {\n    operation: 0,\n    codeId: Long.UZERO,\n    updated: undefined,\n    msg: new Uint8Array(),\n  };\n}\n\nexport const ContractCodeHistoryEntry = {\n  encode(\n    message: ContractCodeHistoryEntry,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.operation !== 0) {\n      writer.uint32(8).int32(message.operation);\n    }\n    if (!message.codeId.isZero()) {\n      writer.uint32(16).uint64(message.codeId);\n    }\n    if (message.updated !== undefined) {\n      AbsoluteTxPosition.encode(\n        message.updated,\n        writer.uint32(26).fork()\n      ).ldelim();\n    }\n    if (message.msg.length !== 0) {\n      writer.uint32(34).bytes(message.msg);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): ContractCodeHistoryEntry {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseContractCodeHistoryEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.operation = reader.int32() as any;\n          break;\n        case 2:\n          message.codeId = reader.uint64() as Long;\n          break;\n        case 3:\n          message.updated = AbsoluteTxPosition.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.msg = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ContractCodeHistoryEntry {\n    return {\n      operation: isSet(object.operation)\n        ? contractCodeHistoryOperationTypeFromJSON(object.operation)\n        : 0,\n      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,\n      updated: isSet(object.updated)\n        ? AbsoluteTxPosition.fromJSON(object.updated)\n        : undefined,\n      msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: ContractCodeHistoryEntry): unknown {\n    const obj: any = {};\n    message.operation !== undefined &&\n      (obj.operation = contractCodeHistoryOperationTypeToJSON(\n        message.operation\n      ));\n    message.codeId !== undefined &&\n      (obj.codeId = (message.codeId || Long.UZERO).toString());\n    message.updated !== undefined &&\n      (obj.updated = message.updated\n        ? AbsoluteTxPosition.toJSON(message.updated)\n        : undefined);\n    message.msg !== undefined &&\n      (obj.msg = base64FromBytes(\n        message.msg !== undefined ? message.msg : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ContractCodeHistoryEntry>, I>>(\n    object: I\n  ): ContractCodeHistoryEntry {\n    const message = createBaseContractCodeHistoryEntry();\n    message.operation = object.operation ?? 0;\n    message.codeId =\n      object.codeId !== undefined && object.codeId !== null\n        ? Long.fromValue(object.codeId)\n        : Long.UZERO;\n    message.updated =\n      object.updated !== undefined && object.updated !== null\n        ? AbsoluteTxPosition.fromPartial(object.updated)\n        : undefined;\n    message.msg = object.msg ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseAbsoluteTxPosition(): AbsoluteTxPosition {\n  return { blockHeight: Long.UZERO, txIndex: Long.UZERO };\n}\n\nexport const AbsoluteTxPosition = {\n  encode(\n    message: AbsoluteTxPosition,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.blockHeight.isZero()) {\n      writer.uint32(8).uint64(message.blockHeight);\n    }\n    if (!message.txIndex.isZero()) {\n      writer.uint32(16).uint64(message.txIndex);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): AbsoluteTxPosition {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAbsoluteTxPosition();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.blockHeight = reader.uint64() as Long;\n          break;\n        case 2:\n          message.txIndex = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AbsoluteTxPosition {\n    return {\n      blockHeight: isSet(object.blockHeight)\n        ? Long.fromValue(object.blockHeight)\n        : Long.UZERO,\n      txIndex: isSet(object.txIndex)\n        ? Long.fromValue(object.txIndex)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: AbsoluteTxPosition): unknown {\n    const obj: any = {};\n    message.blockHeight !== undefined &&\n      (obj.blockHeight = (message.blockHeight || Long.UZERO).toString());\n    message.txIndex !== undefined &&\n      (obj.txIndex = (message.txIndex || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<AbsoluteTxPosition>, I>>(\n    object: I\n  ): AbsoluteTxPosition {\n    const message = createBaseAbsoluteTxPosition();\n    message.blockHeight =\n      object.blockHeight !== undefined && object.blockHeight !== null\n        ? Long.fromValue(object.blockHeight)\n        : Long.UZERO;\n    message.txIndex =\n      object.txIndex !== undefined && object.txIndex !== null\n        ? Long.fromValue(object.txIndex)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseModel(): Model {\n  return { key: new Uint8Array(), value: new Uint8Array() };\n}\n\nexport const Model = {\n  encode(message: Model, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Model {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseModel();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.value = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Model {\n    return {\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n      value: isSet(object.value)\n        ? bytesFromBase64(object.value)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: Model): unknown {\n    const obj: any = {};\n    message.key !== undefined &&\n      (obj.key = base64FromBytes(\n        message.key !== undefined ? message.key : new Uint8Array()\n      ));\n    message.value !== undefined &&\n      (obj.value = base64FromBytes(\n        message.value !== undefined ? message.value : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Model>, I>>(object: I): Model {\n    const message = createBaseModel();\n    message.key = object.key ?? new Uint8Array();\n    message.value = object.value ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { AccessConfig } from \"./types\";\nimport { BrowserHeaders } from \"browser-headers\";\nimport { Coin } from \"../../../cosmos/base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmwasm.wasm.v1\";\n\n/** MsgStoreCode submit Wasm code to the system */\nexport interface MsgStoreCode {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** WASMByteCode can be raw or gzip compressed */\n  wasmByteCode: Uint8Array;\n  /**\n   * InstantiatePermission access control to apply on contract creation,\n   * optional\n   */\n  instantiatePermission?: AccessConfig;\n}\n\n/** MsgStoreCodeResponse returns store result data. */\nexport interface MsgStoreCodeResponse {\n  /** CodeID is the reference to the stored WASM code */\n  codeId: Long;\n}\n\n/**\n * MsgInstantiateContract create a new smart contract instance for the given\n * code id.\n */\nexport interface MsgInstantiateContract {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** Admin is an optional address that can execute migrations */\n  admin: string;\n  /** CodeID is the reference to the stored WASM code */\n  codeId: Long;\n  /** Label is optional metadata to be stored with a contract instance. */\n  label: string;\n  /** Msg json encoded message to be passed to the contract on instantiation */\n  msg: Uint8Array;\n  /** Funds coins that are transferred to the contract on instantiation */\n  funds: Coin[];\n}\n\n/** MsgInstantiateContractResponse return instantiation result data */\nexport interface MsgInstantiateContractResponse {\n  /** Address is the bech32 address of the new contract instance. */\n  address: string;\n  /** Data contains base64-encoded bytes to returned from the contract */\n  data: Uint8Array;\n}\n\n/** MsgExecuteContract submits the given message data to a smart contract */\nexport interface MsgExecuteContract {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** Contract is the address of the smart contract */\n  contract: string;\n  /** Msg json encoded message to be passed to the contract */\n  msg: Uint8Array;\n  /** Funds coins that are transferred to the contract on execution */\n  funds: Coin[];\n}\n\n/** MsgExecuteContractResponse returns execution result data. */\nexport interface MsgExecuteContractResponse {\n  /** Data contains base64-encoded bytes to returned from the contract */\n  data: Uint8Array;\n}\n\n/** MsgMigrateContract runs a code upgrade/ downgrade for a smart contract */\nexport interface MsgMigrateContract {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** Contract is the address of the smart contract */\n  contract: string;\n  /** CodeID references the new WASM code */\n  codeId: Long;\n  /** Msg json encoded message to be passed to the contract on migration */\n  msg: Uint8Array;\n}\n\n/** MsgMigrateContractResponse returns contract migration result data. */\nexport interface MsgMigrateContractResponse {\n  /**\n   * Data contains same raw bytes returned as data from the wasm contract.\n   * (May be empty)\n   */\n  data: Uint8Array;\n}\n\n/** MsgUpdateAdmin sets a new admin for a smart contract */\nexport interface MsgUpdateAdmin {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** NewAdmin address to be set */\n  newAdmin: string;\n  /** Contract is the address of the smart contract */\n  contract: string;\n}\n\n/** MsgUpdateAdminResponse returns empty data */\nexport interface MsgUpdateAdminResponse {}\n\n/** MsgClearAdmin removes any admin stored for a smart contract */\nexport interface MsgClearAdmin {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** Contract is the address of the smart contract */\n  contract: string;\n}\n\n/** MsgClearAdminResponse returns empty data */\nexport interface MsgClearAdminResponse {}\n\nfunction createBaseMsgStoreCode(): MsgStoreCode {\n  return {\n    sender: \"\",\n    wasmByteCode: new Uint8Array(),\n    instantiatePermission: undefined,\n  };\n}\n\nexport const MsgStoreCode = {\n  encode(\n    message: MsgStoreCode,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n    if (message.wasmByteCode.length !== 0) {\n      writer.uint32(18).bytes(message.wasmByteCode);\n    }\n    if (message.instantiatePermission !== undefined) {\n      AccessConfig.encode(\n        message.instantiatePermission,\n        writer.uint32(42).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgStoreCode {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgStoreCode();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n        case 2:\n          message.wasmByteCode = reader.bytes();\n          break;\n        case 5:\n          message.instantiatePermission = AccessConfig.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgStoreCode {\n    return {\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      wasmByteCode: isSet(object.wasmByteCode)\n        ? bytesFromBase64(object.wasmByteCode)\n        : new Uint8Array(),\n      instantiatePermission: isSet(object.instantiatePermission)\n        ? AccessConfig.fromJSON(object.instantiatePermission)\n        : undefined,\n    };\n  },\n\n  toJSON(message: MsgStoreCode): unknown {\n    const obj: any = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.wasmByteCode !== undefined &&\n      (obj.wasmByteCode = base64FromBytes(\n        message.wasmByteCode !== undefined\n          ? message.wasmByteCode\n          : new Uint8Array()\n      ));\n    message.instantiatePermission !== undefined &&\n      (obj.instantiatePermission = message.instantiatePermission\n        ? AccessConfig.toJSON(message.instantiatePermission)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgStoreCode>, I>>(\n    object: I\n  ): MsgStoreCode {\n    const message = createBaseMsgStoreCode();\n    message.sender = object.sender ?? \"\";\n    message.wasmByteCode = object.wasmByteCode ?? new Uint8Array();\n    message.instantiatePermission =\n      object.instantiatePermission !== undefined &&\n      object.instantiatePermission !== null\n        ? AccessConfig.fromPartial(object.instantiatePermission)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseMsgStoreCodeResponse(): MsgStoreCodeResponse {\n  return { codeId: Long.UZERO };\n}\n\nexport const MsgStoreCodeResponse = {\n  encode(\n    message: MsgStoreCodeResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (!message.codeId.isZero()) {\n      writer.uint32(8).uint64(message.codeId);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgStoreCodeResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgStoreCodeResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.codeId = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgStoreCodeResponse {\n    return {\n      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,\n    };\n  },\n\n  toJSON(message: MsgStoreCodeResponse): unknown {\n    const obj: any = {};\n    message.codeId !== undefined &&\n      (obj.codeId = (message.codeId || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgStoreCodeResponse>, I>>(\n    object: I\n  ): MsgStoreCodeResponse {\n    const message = createBaseMsgStoreCodeResponse();\n    message.codeId =\n      object.codeId !== undefined && object.codeId !== null\n        ? Long.fromValue(object.codeId)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseMsgInstantiateContract(): MsgInstantiateContract {\n  return {\n    sender: \"\",\n    admin: \"\",\n    codeId: Long.UZERO,\n    label: \"\",\n    msg: new Uint8Array(),\n    funds: [],\n  };\n}\n\nexport const MsgInstantiateContract = {\n  encode(\n    message: MsgInstantiateContract,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n    if (message.admin !== \"\") {\n      writer.uint32(18).string(message.admin);\n    }\n    if (!message.codeId.isZero()) {\n      writer.uint32(24).uint64(message.codeId);\n    }\n    if (message.label !== \"\") {\n      writer.uint32(34).string(message.label);\n    }\n    if (message.msg.length !== 0) {\n      writer.uint32(42).bytes(message.msg);\n    }\n    for (const v of message.funds) {\n      Coin.encode(v!, writer.uint32(50).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgInstantiateContract {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgInstantiateContract();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n        case 2:\n          message.admin = reader.string();\n          break;\n        case 3:\n          message.codeId = reader.uint64() as Long;\n          break;\n        case 4:\n          message.label = reader.string();\n          break;\n        case 5:\n          message.msg = reader.bytes();\n          break;\n        case 6:\n          message.funds.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgInstantiateContract {\n    return {\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      admin: isSet(object.admin) ? String(object.admin) : \"\",\n      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,\n      label: isSet(object.label) ? String(object.label) : \"\",\n      msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n      funds: Array.isArray(object?.funds)\n        ? object.funds.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgInstantiateContract): unknown {\n    const obj: any = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.admin !== undefined && (obj.admin = message.admin);\n    message.codeId !== undefined &&\n      (obj.codeId = (message.codeId || Long.UZERO).toString());\n    message.label !== undefined && (obj.label = message.label);\n    message.msg !== undefined &&\n      (obj.msg = base64FromBytes(\n        message.msg !== undefined ? message.msg : new Uint8Array()\n      ));\n    if (message.funds) {\n      obj.funds = message.funds.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.funds = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgInstantiateContract>, I>>(\n    object: I\n  ): MsgInstantiateContract {\n    const message = createBaseMsgInstantiateContract();\n    message.sender = object.sender ?? \"\";\n    message.admin = object.admin ?? \"\";\n    message.codeId =\n      object.codeId !== undefined && object.codeId !== null\n        ? Long.fromValue(object.codeId)\n        : Long.UZERO;\n    message.label = object.label ?? \"\";\n    message.msg = object.msg ?? new Uint8Array();\n    message.funds = object.funds?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgInstantiateContractResponse(): MsgInstantiateContractResponse {\n  return { address: \"\", data: new Uint8Array() };\n}\n\nexport const MsgInstantiateContractResponse = {\n  encode(\n    message: MsgInstantiateContractResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n    if (message.data.length !== 0) {\n      writer.uint32(18).bytes(message.data);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgInstantiateContractResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgInstantiateContractResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n        case 2:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgInstantiateContractResponse {\n    return {\n      address: isSet(object.address) ? String(object.address) : \"\",\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: MsgInstantiateContractResponse): unknown {\n    const obj: any = {};\n    message.address !== undefined && (obj.address = message.address);\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgInstantiateContractResponse>, I>>(\n    object: I\n  ): MsgInstantiateContractResponse {\n    const message = createBaseMsgInstantiateContractResponse();\n    message.address = object.address ?? \"\";\n    message.data = object.data ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseMsgExecuteContract(): MsgExecuteContract {\n  return { sender: \"\", contract: \"\", msg: new Uint8Array(), funds: [] };\n}\n\nexport const MsgExecuteContract = {\n  encode(\n    message: MsgExecuteContract,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n    if (message.contract !== \"\") {\n      writer.uint32(18).string(message.contract);\n    }\n    if (message.msg.length !== 0) {\n      writer.uint32(26).bytes(message.msg);\n    }\n    for (const v of message.funds) {\n      Coin.encode(v!, writer.uint32(42).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteContract {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgExecuteContract();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n        case 2:\n          message.contract = reader.string();\n          break;\n        case 3:\n          message.msg = reader.bytes();\n          break;\n        case 5:\n          message.funds.push(Coin.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgExecuteContract {\n    return {\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      contract: isSet(object.contract) ? String(object.contract) : \"\",\n      msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n      funds: Array.isArray(object?.funds)\n        ? object.funds.map((e: any) => Coin.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MsgExecuteContract): unknown {\n    const obj: any = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.contract !== undefined && (obj.contract = message.contract);\n    message.msg !== undefined &&\n      (obj.msg = base64FromBytes(\n        message.msg !== undefined ? message.msg : new Uint8Array()\n      ));\n    if (message.funds) {\n      obj.funds = message.funds.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.funds = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgExecuteContract>, I>>(\n    object: I\n  ): MsgExecuteContract {\n    const message = createBaseMsgExecuteContract();\n    message.sender = object.sender ?? \"\";\n    message.contract = object.contract ?? \"\";\n    message.msg = object.msg ?? new Uint8Array();\n    message.funds = object.funds?.map((e) => Coin.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseMsgExecuteContractResponse(): MsgExecuteContractResponse {\n  return { data: new Uint8Array() };\n}\n\nexport const MsgExecuteContractResponse = {\n  encode(\n    message: MsgExecuteContractResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgExecuteContractResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgExecuteContractResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgExecuteContractResponse {\n    return {\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: MsgExecuteContractResponse): unknown {\n    const obj: any = {};\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgExecuteContractResponse>, I>>(\n    object: I\n  ): MsgExecuteContractResponse {\n    const message = createBaseMsgExecuteContractResponse();\n    message.data = object.data ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseMsgMigrateContract(): MsgMigrateContract {\n  return {\n    sender: \"\",\n    contract: \"\",\n    codeId: Long.UZERO,\n    msg: new Uint8Array(),\n  };\n}\n\nexport const MsgMigrateContract = {\n  encode(\n    message: MsgMigrateContract,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n    if (message.contract !== \"\") {\n      writer.uint32(18).string(message.contract);\n    }\n    if (!message.codeId.isZero()) {\n      writer.uint32(24).uint64(message.codeId);\n    }\n    if (message.msg.length !== 0) {\n      writer.uint32(34).bytes(message.msg);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgMigrateContract {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgMigrateContract();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n        case 2:\n          message.contract = reader.string();\n          break;\n        case 3:\n          message.codeId = reader.uint64() as Long;\n          break;\n        case 4:\n          message.msg = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgMigrateContract {\n    return {\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      contract: isSet(object.contract) ? String(object.contract) : \"\",\n      codeId: isSet(object.codeId) ? Long.fromValue(object.codeId) : Long.UZERO,\n      msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: MsgMigrateContract): unknown {\n    const obj: any = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.contract !== undefined && (obj.contract = message.contract);\n    message.codeId !== undefined &&\n      (obj.codeId = (message.codeId || Long.UZERO).toString());\n    message.msg !== undefined &&\n      (obj.msg = base64FromBytes(\n        message.msg !== undefined ? message.msg : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgMigrateContract>, I>>(\n    object: I\n  ): MsgMigrateContract {\n    const message = createBaseMsgMigrateContract();\n    message.sender = object.sender ?? \"\";\n    message.contract = object.contract ?? \"\";\n    message.codeId =\n      object.codeId !== undefined && object.codeId !== null\n        ? Long.fromValue(object.codeId)\n        : Long.UZERO;\n    message.msg = object.msg ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseMsgMigrateContractResponse(): MsgMigrateContractResponse {\n  return { data: new Uint8Array() };\n}\n\nexport const MsgMigrateContractResponse = {\n  encode(\n    message: MsgMigrateContractResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.data.length !== 0) {\n      writer.uint32(10).bytes(message.data);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgMigrateContractResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgMigrateContractResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgMigrateContractResponse {\n    return {\n      data: isSet(object.data)\n        ? bytesFromBase64(object.data)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: MsgMigrateContractResponse): unknown {\n    const obj: any = {};\n    message.data !== undefined &&\n      (obj.data = base64FromBytes(\n        message.data !== undefined ? message.data : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgMigrateContractResponse>, I>>(\n    object: I\n  ): MsgMigrateContractResponse {\n    const message = createBaseMsgMigrateContractResponse();\n    message.data = object.data ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseMsgUpdateAdmin(): MsgUpdateAdmin {\n  return { sender: \"\", newAdmin: \"\", contract: \"\" };\n}\n\nexport const MsgUpdateAdmin = {\n  encode(\n    message: MsgUpdateAdmin,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n    if (message.newAdmin !== \"\") {\n      writer.uint32(18).string(message.newAdmin);\n    }\n    if (message.contract !== \"\") {\n      writer.uint32(26).string(message.contract);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateAdmin {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUpdateAdmin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n        case 2:\n          message.newAdmin = reader.string();\n          break;\n        case 3:\n          message.contract = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgUpdateAdmin {\n    return {\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      newAdmin: isSet(object.newAdmin) ? String(object.newAdmin) : \"\",\n      contract: isSet(object.contract) ? String(object.contract) : \"\",\n    };\n  },\n\n  toJSON(message: MsgUpdateAdmin): unknown {\n    const obj: any = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.newAdmin !== undefined && (obj.newAdmin = message.newAdmin);\n    message.contract !== undefined && (obj.contract = message.contract);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgUpdateAdmin>, I>>(\n    object: I\n  ): MsgUpdateAdmin {\n    const message = createBaseMsgUpdateAdmin();\n    message.sender = object.sender ?? \"\";\n    message.newAdmin = object.newAdmin ?? \"\";\n    message.contract = object.contract ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgUpdateAdminResponse(): MsgUpdateAdminResponse {\n  return {};\n}\n\nexport const MsgUpdateAdminResponse = {\n  encode(\n    _: MsgUpdateAdminResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgUpdateAdminResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgUpdateAdminResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgUpdateAdminResponse {\n    return {};\n  },\n\n  toJSON(_: MsgUpdateAdminResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgUpdateAdminResponse>, I>>(\n    _: I\n  ): MsgUpdateAdminResponse {\n    const message = createBaseMsgUpdateAdminResponse();\n    return message;\n  },\n};\n\nfunction createBaseMsgClearAdmin(): MsgClearAdmin {\n  return { sender: \"\", contract: \"\" };\n}\n\nexport const MsgClearAdmin = {\n  encode(\n    message: MsgClearAdmin,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.sender !== \"\") {\n      writer.uint32(10).string(message.sender);\n    }\n    if (message.contract !== \"\") {\n      writer.uint32(26).string(message.contract);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClearAdmin {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgClearAdmin();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.sender = reader.string();\n          break;\n        case 3:\n          message.contract = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MsgClearAdmin {\n    return {\n      sender: isSet(object.sender) ? String(object.sender) : \"\",\n      contract: isSet(object.contract) ? String(object.contract) : \"\",\n    };\n  },\n\n  toJSON(message: MsgClearAdmin): unknown {\n    const obj: any = {};\n    message.sender !== undefined && (obj.sender = message.sender);\n    message.contract !== undefined && (obj.contract = message.contract);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgClearAdmin>, I>>(\n    object: I\n  ): MsgClearAdmin {\n    const message = createBaseMsgClearAdmin();\n    message.sender = object.sender ?? \"\";\n    message.contract = object.contract ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseMsgClearAdminResponse(): MsgClearAdminResponse {\n  return {};\n}\n\nexport const MsgClearAdminResponse = {\n  encode(\n    _: MsgClearAdminResponse,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): MsgClearAdminResponse {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMsgClearAdminResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(_: any): MsgClearAdminResponse {\n    return {};\n  },\n\n  toJSON(_: MsgClearAdminResponse): unknown {\n    const obj: any = {};\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MsgClearAdminResponse>, I>>(\n    _: I\n  ): MsgClearAdminResponse {\n    const message = createBaseMsgClearAdminResponse();\n    return message;\n  },\n};\n\n/** Msg defines the wasm Msg service. */\nexport interface Msg {\n  /** StoreCode to submit Wasm code to the system */\n  StoreCode(\n    request: DeepPartial<MsgStoreCode>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgStoreCodeResponse>;\n  /** Instantiate creates a new smart contract instance for the given code id. */\n  InstantiateContract(\n    request: DeepPartial<MsgInstantiateContract>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgInstantiateContractResponse>;\n  /** Execute submits the given message data to a smart contract */\n  ExecuteContract(\n    request: DeepPartial<MsgExecuteContract>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgExecuteContractResponse>;\n  /** Migrate runs a code upgrade/ downgrade for a smart contract */\n  MigrateContract(\n    request: DeepPartial<MsgMigrateContract>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgMigrateContractResponse>;\n  /** UpdateAdmin sets a new   admin for a smart contract */\n  UpdateAdmin(\n    request: DeepPartial<MsgUpdateAdmin>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUpdateAdminResponse>;\n  /** ClearAdmin removes any admin stored for a smart contract */\n  ClearAdmin(\n    request: DeepPartial<MsgClearAdmin>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgClearAdminResponse>;\n}\n\nexport class MsgClientImpl implements Msg {\n  private readonly rpc: Rpc;\n\n  constructor(rpc: Rpc) {\n    this.rpc = rpc;\n    this.StoreCode = this.StoreCode.bind(this);\n    this.InstantiateContract = this.InstantiateContract.bind(this);\n    this.ExecuteContract = this.ExecuteContract.bind(this);\n    this.MigrateContract = this.MigrateContract.bind(this);\n    this.UpdateAdmin = this.UpdateAdmin.bind(this);\n    this.ClearAdmin = this.ClearAdmin.bind(this);\n  }\n\n  StoreCode(\n    request: DeepPartial<MsgStoreCode>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgStoreCodeResponse> {\n    return this.rpc.unary(\n      MsgStoreCodeDesc,\n      MsgStoreCode.fromPartial(request),\n      metadata\n    );\n  }\n\n  InstantiateContract(\n    request: DeepPartial<MsgInstantiateContract>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgInstantiateContractResponse> {\n    return this.rpc.unary(\n      MsgInstantiateContractDesc,\n      MsgInstantiateContract.fromPartial(request),\n      metadata\n    );\n  }\n\n  ExecuteContract(\n    request: DeepPartial<MsgExecuteContract>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgExecuteContractResponse> {\n    return this.rpc.unary(\n      MsgExecuteContractDesc,\n      MsgExecuteContract.fromPartial(request),\n      metadata\n    );\n  }\n\n  MigrateContract(\n    request: DeepPartial<MsgMigrateContract>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgMigrateContractResponse> {\n    return this.rpc.unary(\n      MsgMigrateContractDesc,\n      MsgMigrateContract.fromPartial(request),\n      metadata\n    );\n  }\n\n  UpdateAdmin(\n    request: DeepPartial<MsgUpdateAdmin>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgUpdateAdminResponse> {\n    return this.rpc.unary(\n      MsgUpdateAdminDesc,\n      MsgUpdateAdmin.fromPartial(request),\n      metadata\n    );\n  }\n\n  ClearAdmin(\n    request: DeepPartial<MsgClearAdmin>,\n    metadata?: grpc.Metadata\n  ): Promise<MsgClearAdminResponse> {\n    return this.rpc.unary(\n      MsgClearAdminDesc,\n      MsgClearAdmin.fromPartial(request),\n      metadata\n    );\n  }\n}\n\nexport const MsgDesc = {\n  serviceName: \"cosmwasm.wasm.v1.Msg\",\n};\n\nexport const MsgStoreCodeDesc: UnaryMethodDefinitionish = {\n  methodName: \"StoreCode\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgStoreCode.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgStoreCodeResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgInstantiateContractDesc: UnaryMethodDefinitionish = {\n  methodName: \"InstantiateContract\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgInstantiateContract.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgInstantiateContractResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgExecuteContractDesc: UnaryMethodDefinitionish = {\n  methodName: \"ExecuteContract\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgExecuteContract.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgExecuteContractResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgMigrateContractDesc: UnaryMethodDefinitionish = {\n  methodName: \"MigrateContract\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgMigrateContract.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgMigrateContractResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgUpdateAdminDesc: UnaryMethodDefinitionish = {\n  methodName: \"UpdateAdmin\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgUpdateAdmin.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgUpdateAdminResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\nexport const MsgClearAdminDesc: UnaryMethodDefinitionish = {\n  methodName: \"ClearAdmin\",\n  service: MsgDesc,\n  requestStream: false,\n  responseStream: false,\n  requestType: {\n    serializeBinary() {\n      return MsgClearAdmin.encode(this).finish();\n    },\n  } as any,\n  responseType: {\n    deserializeBinary(data: Uint8Array) {\n      return {\n        ...MsgClearAdminResponse.decode(data),\n        toObject() {\n          return this;\n        },\n      };\n    },\n  } as any,\n};\n\ninterface UnaryMethodDefinitionishR\n  extends grpc.UnaryMethodDefinition<any, any> {\n  requestStream: any;\n  responseStream: any;\n}\n\ntype UnaryMethodDefinitionish = UnaryMethodDefinitionishR;\n\ninterface Rpc {\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any>;\n}\n\nexport class GrpcWebImpl {\n  private host: string;\n  private options: {\n    transport?: grpc.TransportFactory;\n\n    debug?: boolean;\n    metadata?: grpc.Metadata;\n  };\n\n  constructor(\n    host: string,\n    options: {\n      transport?: grpc.TransportFactory;\n\n      debug?: boolean;\n      metadata?: grpc.Metadata;\n    }\n  ) {\n    this.host = host;\n    this.options = options;\n  }\n\n  unary<T extends UnaryMethodDefinitionish>(\n    methodDesc: T,\n    _request: any,\n    metadata: grpc.Metadata | undefined\n  ): Promise<any> {\n    const request = { ..._request, ...methodDesc.requestType };\n    const maybeCombinedMetadata =\n      metadata && this.options.metadata\n        ? new BrowserHeaders({\n            ...this.options?.metadata.headersMap,\n            ...metadata?.headersMap,\n          })\n        : metadata || this.options.metadata;\n    return new Promise((resolve, reject) => {\n      grpc.unary(methodDesc, {\n        request,\n        host: this.host,\n        metadata: maybeCombinedMetadata,\n        transport: this.options.transport,\n        debug: this.options.debug,\n        onEnd: function (response) {\n          if (response.status === grpc.Code.OK) {\n            resolve(response.message);\n          } else {\n            const err = new Error(response.statusMessage) as any;\n            err.code = response.status;\n            err.metadata = response.trailers;\n            reject(err);\n          }\n        },\n      });\n    });\n  }\n}\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import { BaseMsg } from \"./BaseMsg\";\nimport { EncodeObject } from \"@cosmjs/proto-signing\";\nimport {\n  protobufPackage,\n  MsgStoreCode as MsgStoreCode_pb,\n} from \"../proto/cosmwasm/wasm/v1/tx\";\n\nexport class MsgStoreCode extends BaseMsg {\n  public protoMsg: MsgStoreCode_pb;\n  constructor(msg: MsgStoreCode_pb) {\n    super();\n    this.protoMsg = msg;\n  }\n  generateMessage(): EncodeObject {\n    return {\n      typeUrl: MsgStoreCode.typeUrl,\n      value: MsgStoreCode_pb.fromPartial(this.protoMsg),\n    };\n  }\n}\n\nexport namespace MsgStoreCode {\n  export const typeUrl: string = `/${protobufPackage}.MsgStoreCode`;\n  export const Proto = MsgStoreCode_pb;\n  export interface Proto extends MsgStoreCode_pb {}\n}\n\n\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"cosmos.crypto.multisig.v1beta1\";\n\n/**\n * MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.\n * See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers\n * signed and with which modes.\n */\nexport interface MultiSignature {\n  signatures: Uint8Array[];\n}\n\n/**\n * CompactBitArray is an implementation of a space efficient bit array.\n * This is used to ensure that the encoded data takes up a minimal amount of\n * space after proto encoding.\n * This is not thread safe, and is not intended for concurrent usage.\n */\nexport interface CompactBitArray {\n  extraBitsStored: number;\n  elems: Uint8Array;\n}\n\nfunction createBaseMultiSignature(): MultiSignature {\n  return { signatures: [] };\n}\n\nexport const MultiSignature = {\n  encode(\n    message: MultiSignature,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.signatures) {\n      writer.uint32(10).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): MultiSignature {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMultiSignature();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): MultiSignature {\n    return {\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: MultiSignature): unknown {\n    const obj: any = {};\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<MultiSignature>, I>>(\n    object: I\n  ): MultiSignature {\n    const message = createBaseMultiSignature();\n    message.signatures = object.signatures?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseCompactBitArray(): CompactBitArray {\n  return { extraBitsStored: 0, elems: new Uint8Array() };\n}\n\nexport const CompactBitArray = {\n  encode(\n    message: CompactBitArray,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.extraBitsStored !== 0) {\n      writer.uint32(8).uint32(message.extraBitsStored);\n    }\n    if (message.elems.length !== 0) {\n      writer.uint32(18).bytes(message.elems);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): CompactBitArray {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCompactBitArray();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.extraBitsStored = reader.uint32();\n          break;\n        case 2:\n          message.elems = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): CompactBitArray {\n    return {\n      extraBitsStored: isSet(object.extraBitsStored)\n        ? Number(object.extraBitsStored)\n        : 0,\n      elems: isSet(object.elems)\n        ? bytesFromBase64(object.elems)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: CompactBitArray): unknown {\n    const obj: any = {};\n    message.extraBitsStored !== undefined &&\n      (obj.extraBitsStored = Math.round(message.extraBitsStored));\n    message.elems !== undefined &&\n      (obj.elems = base64FromBytes(\n        message.elems !== undefined ? message.elems : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<CompactBitArray>, I>>(\n    object: I\n  ): CompactBitArray {\n    const message = createBaseCompactBitArray();\n    message.extraBitsStored = object.extraBitsStored ?? 0;\n    message.elems = object.elems ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\n\nexport const protobufPackage = \"cosmos.crypto.secp256k1\";\n\n/**\n * PubKey defines a secp256k1 public key\n * Key is the compressed form of the pubkey. The first byte depends is a 0x02 byte\n * if the y-coordinate is the lexicographically largest of the two associated with\n * the x-coordinate. Otherwise the first byte is a 0x03.\n * This prefix is followed with the x-coordinate.\n */\nexport interface PubKey {\n  key: Uint8Array;\n}\n\n/** PrivKey defines a secp256k1 private key. */\nexport interface PrivKey {\n  key: Uint8Array;\n}\n\nfunction createBasePubKey(): PubKey {\n  return { key: new Uint8Array() };\n}\n\nexport const PubKey = {\n  encode(\n    message: PubKey,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PubKey {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePubKey();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): PubKey {\n    return {\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: PubKey): unknown {\n    const obj: any = {};\n    message.key !== undefined &&\n      (obj.key = base64FromBytes(\n        message.key !== undefined ? message.key : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<PubKey>, I>>(object: I): PubKey {\n    const message = createBasePubKey();\n    message.key = object.key ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBasePrivKey(): PrivKey {\n  return { key: new Uint8Array() };\n}\n\nexport const PrivKey = {\n  encode(\n    message: PrivKey,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): PrivKey {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBasePrivKey();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): PrivKey {\n    return {\n      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: PrivKey): unknown {\n    const obj: any = {};\n    message.key !== undefined &&\n      (obj.key = base64FromBytes(\n        message.key !== undefined ? message.key : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<PrivKey>, I>>(object: I): PrivKey {\n    const message = createBasePrivKey();\n    message.key = object.key ?? new Uint8Array();\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../../google/protobuf/any\";\nimport { CompactBitArray } from \"../../../crypto/multisig/v1beta1/multisig\";\n\nexport const protobufPackage = \"cosmos.tx.signing.v1beta1\";\n\n/** SignMode represents a signing mode with its own security guarantees. */\nexport enum SignMode {\n  /**\n   * SIGN_MODE_UNSPECIFIED - SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\n   * rejected\n   */\n  SIGN_MODE_UNSPECIFIED = 0,\n  /**\n   * SIGN_MODE_DIRECT - SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\n   * verified with raw bytes from Tx\n   */\n  SIGN_MODE_DIRECT = 1,\n  /**\n   * SIGN_MODE_TEXTUAL - SIGN_MODE_TEXTUAL is a future signing mode that will verify some\n   * human-readable textual representation on top of the binary representation\n   * from SIGN_MODE_DIRECT\n   */\n  SIGN_MODE_TEXTUAL = 2,\n  /**\n   * SIGN_MODE_LEGACY_AMINO_JSON - SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\n   * Amino JSON and will be removed in the future\n   */\n  SIGN_MODE_LEGACY_AMINO_JSON = 127,\n  /**\n   * SIGN_MODE_EIP_191 - SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\n   * SDK. Ref: https://eips.ethereum.org/EIPS/eip-191\n   *\n   * Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\n   * but is not implemented on the SDK by default. To enable EIP-191, you need\n   * to pass a custom `TxConfig` that has an implementation of\n   * `SignModeHandler` for EIP-191. The SDK may decide to fully support\n   * EIP-191 in the future.\n   *\n   * Since: cosmos-sdk 0.45.2\n   */\n  SIGN_MODE_EIP_191 = 191,\n  UNRECOGNIZED = -1,\n}\n\nexport function signModeFromJSON(object: any): SignMode {\n  switch (object) {\n    case 0:\n    case \"SIGN_MODE_UNSPECIFIED\":\n      return SignMode.SIGN_MODE_UNSPECIFIED;\n    case 1:\n    case \"SIGN_MODE_DIRECT\":\n      return SignMode.SIGN_MODE_DIRECT;\n    case 2:\n    case \"SIGN_MODE_TEXTUAL\":\n      return SignMode.SIGN_MODE_TEXTUAL;\n    case 127:\n    case \"SIGN_MODE_LEGACY_AMINO_JSON\":\n      return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    case 191:\n    case \"SIGN_MODE_EIP_191\":\n      return SignMode.SIGN_MODE_EIP_191;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return SignMode.UNRECOGNIZED;\n  }\n}\n\nexport function signModeToJSON(object: SignMode): string {\n  switch (object) {\n    case SignMode.SIGN_MODE_UNSPECIFIED:\n      return \"SIGN_MODE_UNSPECIFIED\";\n    case SignMode.SIGN_MODE_DIRECT:\n      return \"SIGN_MODE_DIRECT\";\n    case SignMode.SIGN_MODE_TEXTUAL:\n      return \"SIGN_MODE_TEXTUAL\";\n    case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:\n      return \"SIGN_MODE_LEGACY_AMINO_JSON\";\n    case SignMode.SIGN_MODE_EIP_191:\n      return \"SIGN_MODE_EIP_191\";\n    case SignMode.UNRECOGNIZED:\n    default:\n      return \"UNRECOGNIZED\";\n  }\n}\n\n/** SignatureDescriptors wraps multiple SignatureDescriptor's. */\nexport interface SignatureDescriptors {\n  /** signatures are the signature descriptors */\n  signatures: SignatureDescriptor[];\n}\n\n/**\n * SignatureDescriptor is a convenience type which represents the full data for\n * a signature including the public key of the signer, signing modes and the\n * signature itself. It is primarily used for coordinating signatures between\n * clients.\n */\nexport interface SignatureDescriptor {\n  /** public_key is the public key of the signer */\n  publicKey?: Any;\n  data?: SignatureDescriptor_Data;\n  /**\n   * sequence is the sequence of the account, which describes the\n   * number of committed transactions signed by a given address. It is used to prevent\n   * replay attacks.\n   */\n  sequence: Long;\n}\n\n/** Data represents signature data */\nexport interface SignatureDescriptor_Data {\n  /** single represents a single signer */\n  single?: SignatureDescriptor_Data_Single | undefined;\n  /** multi represents a multisig signer */\n  multi?: SignatureDescriptor_Data_Multi | undefined;\n}\n\n/** Single is the signature data for a single signer */\nexport interface SignatureDescriptor_Data_Single {\n  /** mode is the signing mode of the single signer */\n  mode: SignMode;\n  /** signature is the raw signature bytes */\n  signature: Uint8Array;\n}\n\n/** Multi is the signature data for a multisig public key */\nexport interface SignatureDescriptor_Data_Multi {\n  /** bitarray specifies which keys within the multisig are signing */\n  bitarray?: CompactBitArray;\n  /** signatures is the signatures of the multi-signature */\n  signatures: SignatureDescriptor_Data[];\n}\n\nfunction createBaseSignatureDescriptors(): SignatureDescriptors {\n  return { signatures: [] };\n}\n\nexport const SignatureDescriptors = {\n  encode(\n    message: SignatureDescriptors,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.signatures) {\n      SignatureDescriptor.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptors {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptors();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(\n            SignatureDescriptor.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptors {\n    return {\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => SignatureDescriptor.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: SignatureDescriptors): unknown {\n    const obj: any = {};\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        e ? SignatureDescriptor.toJSON(e) : undefined\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptors>, I>>(\n    object: I\n  ): SignatureDescriptors {\n    const message = createBaseSignatureDescriptors();\n    message.signatures =\n      object.signatures?.map((e) => SignatureDescriptor.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor(): SignatureDescriptor {\n  return { publicKey: undefined, data: undefined, sequence: Long.UZERO };\n}\n\nexport const SignatureDescriptor = {\n  encode(\n    message: SignatureDescriptor,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.publicKey !== undefined) {\n      Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.data !== undefined) {\n      SignatureDescriptor_Data.encode(\n        message.data,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SignatureDescriptor {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.publicKey = Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.data = SignatureDescriptor_Data.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 3:\n          message.sequence = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor {\n    return {\n      publicKey: isSet(object.publicKey)\n        ? Any.fromJSON(object.publicKey)\n        : undefined,\n      data: isSet(object.data)\n        ? SignatureDescriptor_Data.fromJSON(object.data)\n        : undefined,\n      sequence: isSet(object.sequence)\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: SignatureDescriptor): unknown {\n    const obj: any = {};\n    message.publicKey !== undefined &&\n      (obj.publicKey = message.publicKey\n        ? Any.toJSON(message.publicKey)\n        : undefined);\n    message.data !== undefined &&\n      (obj.data = message.data\n        ? SignatureDescriptor_Data.toJSON(message.data)\n        : undefined);\n    message.sequence !== undefined &&\n      (obj.sequence = (message.sequence || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor>, I>>(\n    object: I\n  ): SignatureDescriptor {\n    const message = createBaseSignatureDescriptor();\n    message.publicKey =\n      object.publicKey !== undefined && object.publicKey !== null\n        ? Any.fromPartial(object.publicKey)\n        : undefined;\n    message.data =\n      object.data !== undefined && object.data !== null\n        ? SignatureDescriptor_Data.fromPartial(object.data)\n        : undefined;\n    message.sequence =\n      object.sequence !== undefined && object.sequence !== null\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor_Data(): SignatureDescriptor_Data {\n  return { single: undefined, multi: undefined };\n}\n\nexport const SignatureDescriptor_Data = {\n  encode(\n    message: SignatureDescriptor_Data,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.single !== undefined) {\n      SignatureDescriptor_Data_Single.encode(\n        message.single,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    if (message.multi !== undefined) {\n      SignatureDescriptor_Data_Multi.encode(\n        message.multi,\n        writer.uint32(18).fork()\n      ).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptor_Data {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor_Data();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.single = SignatureDescriptor_Data_Single.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        case 2:\n          message.multi = SignatureDescriptor_Data_Multi.decode(\n            reader,\n            reader.uint32()\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor_Data {\n    return {\n      single: isSet(object.single)\n        ? SignatureDescriptor_Data_Single.fromJSON(object.single)\n        : undefined,\n      multi: isSet(object.multi)\n        ? SignatureDescriptor_Data_Multi.fromJSON(object.multi)\n        : undefined,\n    };\n  },\n\n  toJSON(message: SignatureDescriptor_Data): unknown {\n    const obj: any = {};\n    message.single !== undefined &&\n      (obj.single = message.single\n        ? SignatureDescriptor_Data_Single.toJSON(message.single)\n        : undefined);\n    message.multi !== undefined &&\n      (obj.multi = message.multi\n        ? SignatureDescriptor_Data_Multi.toJSON(message.multi)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor_Data>, I>>(\n    object: I\n  ): SignatureDescriptor_Data {\n    const message = createBaseSignatureDescriptor_Data();\n    message.single =\n      object.single !== undefined && object.single !== null\n        ? SignatureDescriptor_Data_Single.fromPartial(object.single)\n        : undefined;\n    message.multi =\n      object.multi !== undefined && object.multi !== null\n        ? SignatureDescriptor_Data_Multi.fromPartial(object.multi)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor_Data_Single(): SignatureDescriptor_Data_Single {\n  return { mode: 0, signature: new Uint8Array() };\n}\n\nexport const SignatureDescriptor_Data_Single = {\n  encode(\n    message: SignatureDescriptor_Data_Single,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.mode !== 0) {\n      writer.uint32(8).int32(message.mode);\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(18).bytes(message.signature);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptor_Data_Single {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor_Data_Single();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.mode = reader.int32() as any;\n          break;\n        case 2:\n          message.signature = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor_Data_Single {\n    return {\n      mode: isSet(object.mode) ? signModeFromJSON(object.mode) : 0,\n      signature: isSet(object.signature)\n        ? bytesFromBase64(object.signature)\n        : new Uint8Array(),\n    };\n  },\n\n  toJSON(message: SignatureDescriptor_Data_Single): unknown {\n    const obj: any = {};\n    message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n    message.signature !== undefined &&\n      (obj.signature = base64FromBytes(\n        message.signature !== undefined ? message.signature : new Uint8Array()\n      ));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor_Data_Single>, I>>(\n    object: I\n  ): SignatureDescriptor_Data_Single {\n    const message = createBaseSignatureDescriptor_Data_Single();\n    message.mode = object.mode ?? 0;\n    message.signature = object.signature ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseSignatureDescriptor_Data_Multi(): SignatureDescriptor_Data_Multi {\n  return { bitarray: undefined, signatures: [] };\n}\n\nexport const SignatureDescriptor_Data_Multi = {\n  encode(\n    message: SignatureDescriptor_Data_Multi,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.bitarray !== undefined) {\n      CompactBitArray.encode(\n        message.bitarray,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    for (const v of message.signatures) {\n      SignatureDescriptor_Data.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number\n  ): SignatureDescriptor_Data_Multi {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignatureDescriptor_Data_Multi();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bitarray = CompactBitArray.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.signatures.push(\n            SignatureDescriptor_Data.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignatureDescriptor_Data_Multi {\n    return {\n      bitarray: isSet(object.bitarray)\n        ? CompactBitArray.fromJSON(object.bitarray)\n        : undefined,\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) =>\n            SignatureDescriptor_Data.fromJSON(e)\n          )\n        : [],\n    };\n  },\n\n  toJSON(message: SignatureDescriptor_Data_Multi): unknown {\n    const obj: any = {};\n    message.bitarray !== undefined &&\n      (obj.bitarray = message.bitarray\n        ? CompactBitArray.toJSON(message.bitarray)\n        : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        e ? SignatureDescriptor_Data.toJSON(e) : undefined\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignatureDescriptor_Data_Multi>, I>>(\n    object: I\n  ): SignatureDescriptor_Data_Multi {\n    const message = createBaseSignatureDescriptor_Data_Multi();\n    message.bitarray =\n      object.bitarray !== undefined && object.bitarray !== null\n        ? CompactBitArray.fromPartial(object.bitarray)\n        : undefined;\n    message.signatures =\n      object.signatures?.map((e) => SignatureDescriptor_Data.fromPartial(e)) ||\n      [];\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","/* eslint-disable */\nimport Long from \"long\";\nimport * as _m0 from \"protobufjs/minimal\";\nimport { Any } from \"../../../google/protobuf/any\";\nimport {\n  SignMode,\n  signModeFromJSON,\n  signModeToJSON,\n} from \"../signing/v1beta1/signing\";\nimport { CompactBitArray } from \"../../crypto/multisig/v1beta1/multisig\";\nimport { Coin } from \"../../base/v1beta1/coin\";\n\nexport const protobufPackage = \"cosmos.tx.v1beta1\";\n\n/** Tx is the standard type used for broadcasting transactions. */\nexport interface Tx {\n  /** body is the processable content of the transaction */\n  body?: TxBody;\n  /**\n   * auth_info is the authorization related content of the transaction,\n   * specifically signers, signer modes and fee\n   */\n  authInfo?: AuthInfo;\n  /**\n   * signatures is a list of signatures that matches the length and order of\n   * AuthInfo's signer_infos to allow connecting signature meta information like\n   * public key and signing mode by position.\n   */\n  signatures: Uint8Array[];\n}\n\n/**\n * TxRaw is a variant of Tx that pins the signer's exact binary representation\n * of body and auth_info. This is used for signing, broadcasting and\n * verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and\n * the hash `sha256(serialize(tx: TxRaw))` becomes the \"txhash\", commonly used\n * as the transaction ID.\n */\nexport interface TxRaw {\n  /**\n   * body_bytes is a protobuf serialization of a TxBody that matches the\n   * representation in SignDoc.\n   */\n  bodyBytes: Uint8Array;\n  /**\n   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the\n   * representation in SignDoc.\n   */\n  authInfoBytes: Uint8Array;\n  /**\n   * signatures is a list of signatures that matches the length and order of\n   * AuthInfo's signer_infos to allow connecting signature meta information like\n   * public key and signing mode by position.\n   */\n  signatures: Uint8Array[];\n}\n\n/** SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT. */\nexport interface SignDoc {\n  /**\n   * body_bytes is protobuf serialization of a TxBody that matches the\n   * representation in TxRaw.\n   */\n  bodyBytes: Uint8Array;\n  /**\n   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the\n   * representation in TxRaw.\n   */\n  authInfoBytes: Uint8Array;\n  /**\n   * chain_id is the unique identifier of the chain this transaction targets.\n   * It prevents signed transactions from being used on another chain by an\n   * attacker\n   */\n  chainId: string;\n  /** account_number is the account number of the account in state */\n  accountNumber: Long;\n}\n\n/** TxBody is the body of a transaction that all signers sign over. */\nexport interface TxBody {\n  /**\n   * messages is a list of messages to be executed. The required signers of\n   * those messages define the number and order of elements in AuthInfo's\n   * signer_infos and Tx's signatures. Each required signer address is added to\n   * the list only the first time it occurs.\n   * By convention, the first required signer (usually from the first message)\n   * is referred to as the primary signer and pays the fee for the whole\n   * transaction.\n   */\n  messages: Any[];\n  /**\n   * memo is any arbitrary note/comment to be added to the transaction.\n   * WARNING: in clients, any publicly exposed text should not be called memo,\n   * but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).\n   */\n  memo: string;\n  /**\n   * timeout is the block height after which this transaction will not\n   * be processed by the chain\n   */\n  timeoutHeight: Long;\n  /**\n   * extension_options are arbitrary options that can be added by chains\n   * when the default options are not sufficient. If any of these are present\n   * and can't be handled, the transaction will be rejected\n   */\n  extensionOptions: Any[];\n  /**\n   * extension_options are arbitrary options that can be added by chains\n   * when the default options are not sufficient. If any of these are present\n   * and can't be handled, they will be ignored\n   */\n  nonCriticalExtensionOptions: Any[];\n}\n\n/**\n * AuthInfo describes the fee and signer modes that are used to sign a\n * transaction.\n */\nexport interface AuthInfo {\n  /**\n   * signer_infos defines the signing modes for the required signers. The number\n   * and order of elements must match the required signers from TxBody's\n   * messages. The first element is the primary signer and the one which pays\n   * the fee.\n   */\n  signerInfos: SignerInfo[];\n  /**\n   * Fee is the fee and gas limit for the transaction. The first signer is the\n   * primary signer and the one which pays the fee. The fee can be calculated\n   * based on the cost of evaluating the body and doing signature verification\n   * of the signers. This can be estimated via simulation.\n   */\n  fee?: Fee;\n}\n\n/**\n * SignerInfo describes the public key and signing mode of a single top-level\n * signer.\n */\nexport interface SignerInfo {\n  /**\n   * public_key is the public key of the signer. It is optional for accounts\n   * that already exist in state. If unset, the verifier can use the required \\\n   * signer address for this position and lookup the public key.\n   */\n  publicKey?: Any;\n  /**\n   * mode_info describes the signing mode of the signer and is a nested\n   * structure to support nested multisig pubkey's\n   */\n  modeInfo?: ModeInfo;\n  /**\n   * sequence is the sequence of the account, which describes the\n   * number of committed transactions signed by a given address. It is used to\n   * prevent replay attacks.\n   */\n  sequence: Long;\n}\n\n/** ModeInfo describes the signing mode of a single or nested multisig signer. */\nexport interface ModeInfo {\n  /** single represents a single signer */\n  single?: ModeInfo_Single | undefined;\n  /** multi represents a nested multisig signer */\n  multi?: ModeInfo_Multi | undefined;\n}\n\n/**\n * Single is the mode info for a single signer. It is structured as a message\n * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the\n * future\n */\nexport interface ModeInfo_Single {\n  /** mode is the signing mode of the single signer */\n  mode: SignMode;\n}\n\n/** Multi is the mode info for a multisig public key */\nexport interface ModeInfo_Multi {\n  /** bitarray specifies which keys within the multisig are signing */\n  bitarray?: CompactBitArray;\n  /**\n   * mode_infos is the corresponding modes of the signers of the multisig\n   * which could include nested multisig public keys\n   */\n  modeInfos: ModeInfo[];\n}\n\n/**\n * Fee includes the amount of coins paid in fees and the maximum\n * gas to be used by the transaction. The ratio yields an effective \"gasprice\",\n * which must be above some miminum to be accepted into the mempool.\n */\nexport interface Fee {\n  /** amount is the amount of coins to be paid as a fee */\n  amount: Coin[];\n  /**\n   * gas_limit is the maximum gas that can be used in transaction processing\n   * before an out of gas error occurs\n   */\n  gasLimit: Long;\n  /**\n   * if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.\n   * the payer must be a tx signer (and thus have signed this field in AuthInfo).\n   * setting this field does *not* change the ordering of required signers for the transaction.\n   */\n  payer: string;\n  /**\n   * if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used\n   * to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does\n   * not support fee grants, this will fail\n   */\n  granter: string;\n}\n\nfunction createBaseTx(): Tx {\n  return { body: undefined, authInfo: undefined, signatures: [] };\n}\n\nexport const Tx = {\n  encode(message: Tx, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.body !== undefined) {\n      TxBody.encode(message.body, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.authInfo !== undefined) {\n      AuthInfo.encode(message.authInfo, writer.uint32(18).fork()).ldelim();\n    }\n    for (const v of message.signatures) {\n      writer.uint32(26).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Tx {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTx();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.body = TxBody.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.authInfo = AuthInfo.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Tx {\n    return {\n      body: isSet(object.body) ? TxBody.fromJSON(object.body) : undefined,\n      authInfo: isSet(object.authInfo)\n        ? AuthInfo.fromJSON(object.authInfo)\n        : undefined,\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: Tx): unknown {\n    const obj: any = {};\n    message.body !== undefined &&\n      (obj.body = message.body ? TxBody.toJSON(message.body) : undefined);\n    message.authInfo !== undefined &&\n      (obj.authInfo = message.authInfo\n        ? AuthInfo.toJSON(message.authInfo)\n        : undefined);\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Tx>, I>>(object: I): Tx {\n    const message = createBaseTx();\n    message.body =\n      object.body !== undefined && object.body !== null\n        ? TxBody.fromPartial(object.body)\n        : undefined;\n    message.authInfo =\n      object.authInfo !== undefined && object.authInfo !== null\n        ? AuthInfo.fromPartial(object.authInfo)\n        : undefined;\n    message.signatures = object.signatures?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseTxRaw(): TxRaw {\n  return {\n    bodyBytes: new Uint8Array(),\n    authInfoBytes: new Uint8Array(),\n    signatures: [],\n  };\n}\n\nexport const TxRaw = {\n  encode(message: TxRaw, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    if (message.bodyBytes.length !== 0) {\n      writer.uint32(10).bytes(message.bodyBytes);\n    }\n    if (message.authInfoBytes.length !== 0) {\n      writer.uint32(18).bytes(message.authInfoBytes);\n    }\n    for (const v of message.signatures) {\n      writer.uint32(26).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TxRaw {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxRaw();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bodyBytes = reader.bytes();\n          break;\n        case 2:\n          message.authInfoBytes = reader.bytes();\n          break;\n        case 3:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TxRaw {\n    return {\n      bodyBytes: isSet(object.bodyBytes)\n        ? bytesFromBase64(object.bodyBytes)\n        : new Uint8Array(),\n      authInfoBytes: isSet(object.authInfoBytes)\n        ? bytesFromBase64(object.authInfoBytes)\n        : new Uint8Array(),\n      signatures: Array.isArray(object?.signatures)\n        ? object.signatures.map((e: any) => bytesFromBase64(e))\n        : [],\n    };\n  },\n\n  toJSON(message: TxRaw): unknown {\n    const obj: any = {};\n    message.bodyBytes !== undefined &&\n      (obj.bodyBytes = base64FromBytes(\n        message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()\n      ));\n    message.authInfoBytes !== undefined &&\n      (obj.authInfoBytes = base64FromBytes(\n        message.authInfoBytes !== undefined\n          ? message.authInfoBytes\n          : new Uint8Array()\n      ));\n    if (message.signatures) {\n      obj.signatures = message.signatures.map((e) =>\n        base64FromBytes(e !== undefined ? e : new Uint8Array())\n      );\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TxRaw>, I>>(object: I): TxRaw {\n    const message = createBaseTxRaw();\n    message.bodyBytes = object.bodyBytes ?? new Uint8Array();\n    message.authInfoBytes = object.authInfoBytes ?? new Uint8Array();\n    message.signatures = object.signatures?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseSignDoc(): SignDoc {\n  return {\n    bodyBytes: new Uint8Array(),\n    authInfoBytes: new Uint8Array(),\n    chainId: \"\",\n    accountNumber: Long.UZERO,\n  };\n}\n\nexport const SignDoc = {\n  encode(\n    message: SignDoc,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.bodyBytes.length !== 0) {\n      writer.uint32(10).bytes(message.bodyBytes);\n    }\n    if (message.authInfoBytes.length !== 0) {\n      writer.uint32(18).bytes(message.authInfoBytes);\n    }\n    if (message.chainId !== \"\") {\n      writer.uint32(26).string(message.chainId);\n    }\n    if (!message.accountNumber.isZero()) {\n      writer.uint32(32).uint64(message.accountNumber);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SignDoc {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignDoc();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bodyBytes = reader.bytes();\n          break;\n        case 2:\n          message.authInfoBytes = reader.bytes();\n          break;\n        case 3:\n          message.chainId = reader.string();\n          break;\n        case 4:\n          message.accountNumber = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignDoc {\n    return {\n      bodyBytes: isSet(object.bodyBytes)\n        ? bytesFromBase64(object.bodyBytes)\n        : new Uint8Array(),\n      authInfoBytes: isSet(object.authInfoBytes)\n        ? bytesFromBase64(object.authInfoBytes)\n        : new Uint8Array(),\n      chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n      accountNumber: isSet(object.accountNumber)\n        ? Long.fromValue(object.accountNumber)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: SignDoc): unknown {\n    const obj: any = {};\n    message.bodyBytes !== undefined &&\n      (obj.bodyBytes = base64FromBytes(\n        message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()\n      ));\n    message.authInfoBytes !== undefined &&\n      (obj.authInfoBytes = base64FromBytes(\n        message.authInfoBytes !== undefined\n          ? message.authInfoBytes\n          : new Uint8Array()\n      ));\n    message.chainId !== undefined && (obj.chainId = message.chainId);\n    message.accountNumber !== undefined &&\n      (obj.accountNumber = (message.accountNumber || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignDoc>, I>>(object: I): SignDoc {\n    const message = createBaseSignDoc();\n    message.bodyBytes = object.bodyBytes ?? new Uint8Array();\n    message.authInfoBytes = object.authInfoBytes ?? new Uint8Array();\n    message.chainId = object.chainId ?? \"\";\n    message.accountNumber =\n      object.accountNumber !== undefined && object.accountNumber !== null\n        ? Long.fromValue(object.accountNumber)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseTxBody(): TxBody {\n  return {\n    messages: [],\n    memo: \"\",\n    timeoutHeight: Long.UZERO,\n    extensionOptions: [],\n    nonCriticalExtensionOptions: [],\n  };\n}\n\nexport const TxBody = {\n  encode(\n    message: TxBody,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.messages) {\n      Any.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.memo !== \"\") {\n      writer.uint32(18).string(message.memo);\n    }\n    if (!message.timeoutHeight.isZero()) {\n      writer.uint32(24).uint64(message.timeoutHeight);\n    }\n    for (const v of message.extensionOptions) {\n      Any.encode(v!, writer.uint32(8186).fork()).ldelim();\n    }\n    for (const v of message.nonCriticalExtensionOptions) {\n      Any.encode(v!, writer.uint32(16378).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): TxBody {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTxBody();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.messages.push(Any.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.memo = reader.string();\n          break;\n        case 3:\n          message.timeoutHeight = reader.uint64() as Long;\n          break;\n        case 1023:\n          message.extensionOptions.push(Any.decode(reader, reader.uint32()));\n          break;\n        case 2047:\n          message.nonCriticalExtensionOptions.push(\n            Any.decode(reader, reader.uint32())\n          );\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TxBody {\n    return {\n      messages: Array.isArray(object?.messages)\n        ? object.messages.map((e: any) => Any.fromJSON(e))\n        : [],\n      memo: isSet(object.memo) ? String(object.memo) : \"\",\n      timeoutHeight: isSet(object.timeoutHeight)\n        ? Long.fromValue(object.timeoutHeight)\n        : Long.UZERO,\n      extensionOptions: Array.isArray(object?.extensionOptions)\n        ? object.extensionOptions.map((e: any) => Any.fromJSON(e))\n        : [],\n      nonCriticalExtensionOptions: Array.isArray(\n        object?.nonCriticalExtensionOptions\n      )\n        ? object.nonCriticalExtensionOptions.map((e: any) => Any.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: TxBody): unknown {\n    const obj: any = {};\n    if (message.messages) {\n      obj.messages = message.messages.map((e) =>\n        e ? Any.toJSON(e) : undefined\n      );\n    } else {\n      obj.messages = [];\n    }\n    message.memo !== undefined && (obj.memo = message.memo);\n    message.timeoutHeight !== undefined &&\n      (obj.timeoutHeight = (message.timeoutHeight || Long.UZERO).toString());\n    if (message.extensionOptions) {\n      obj.extensionOptions = message.extensionOptions.map((e) =>\n        e ? Any.toJSON(e) : undefined\n      );\n    } else {\n      obj.extensionOptions = [];\n    }\n    if (message.nonCriticalExtensionOptions) {\n      obj.nonCriticalExtensionOptions = message.nonCriticalExtensionOptions.map(\n        (e) => (e ? Any.toJSON(e) : undefined)\n      );\n    } else {\n      obj.nonCriticalExtensionOptions = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<TxBody>, I>>(object: I): TxBody {\n    const message = createBaseTxBody();\n    message.messages = object.messages?.map((e) => Any.fromPartial(e)) || [];\n    message.memo = object.memo ?? \"\";\n    message.timeoutHeight =\n      object.timeoutHeight !== undefined && object.timeoutHeight !== null\n        ? Long.fromValue(object.timeoutHeight)\n        : Long.UZERO;\n    message.extensionOptions =\n      object.extensionOptions?.map((e) => Any.fromPartial(e)) || [];\n    message.nonCriticalExtensionOptions =\n      object.nonCriticalExtensionOptions?.map((e) => Any.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseAuthInfo(): AuthInfo {\n  return { signerInfos: [], fee: undefined };\n}\n\nexport const AuthInfo = {\n  encode(\n    message: AuthInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    for (const v of message.signerInfos) {\n      SignerInfo.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.fee !== undefined) {\n      Fee.encode(message.fee, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): AuthInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAuthInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signerInfos.push(SignerInfo.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.fee = Fee.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AuthInfo {\n    return {\n      signerInfos: Array.isArray(object?.signerInfos)\n        ? object.signerInfos.map((e: any) => SignerInfo.fromJSON(e))\n        : [],\n      fee: isSet(object.fee) ? Fee.fromJSON(object.fee) : undefined,\n    };\n  },\n\n  toJSON(message: AuthInfo): unknown {\n    const obj: any = {};\n    if (message.signerInfos) {\n      obj.signerInfos = message.signerInfos.map((e) =>\n        e ? SignerInfo.toJSON(e) : undefined\n      );\n    } else {\n      obj.signerInfos = [];\n    }\n    message.fee !== undefined &&\n      (obj.fee = message.fee ? Fee.toJSON(message.fee) : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<AuthInfo>, I>>(object: I): AuthInfo {\n    const message = createBaseAuthInfo();\n    message.signerInfos =\n      object.signerInfos?.map((e) => SignerInfo.fromPartial(e)) || [];\n    message.fee =\n      object.fee !== undefined && object.fee !== null\n        ? Fee.fromPartial(object.fee)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseSignerInfo(): SignerInfo {\n  return { publicKey: undefined, modeInfo: undefined, sequence: Long.UZERO };\n}\n\nexport const SignerInfo = {\n  encode(\n    message: SignerInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.publicKey !== undefined) {\n      Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.modeInfo !== undefined) {\n      ModeInfo.encode(message.modeInfo, writer.uint32(18).fork()).ldelim();\n    }\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): SignerInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseSignerInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.publicKey = Any.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.modeInfo = ModeInfo.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.sequence = reader.uint64() as Long;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): SignerInfo {\n    return {\n      publicKey: isSet(object.publicKey)\n        ? Any.fromJSON(object.publicKey)\n        : undefined,\n      modeInfo: isSet(object.modeInfo)\n        ? ModeInfo.fromJSON(object.modeInfo)\n        : undefined,\n      sequence: isSet(object.sequence)\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO,\n    };\n  },\n\n  toJSON(message: SignerInfo): unknown {\n    const obj: any = {};\n    message.publicKey !== undefined &&\n      (obj.publicKey = message.publicKey\n        ? Any.toJSON(message.publicKey)\n        : undefined);\n    message.modeInfo !== undefined &&\n      (obj.modeInfo = message.modeInfo\n        ? ModeInfo.toJSON(message.modeInfo)\n        : undefined);\n    message.sequence !== undefined &&\n      (obj.sequence = (message.sequence || Long.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<SignerInfo>, I>>(\n    object: I\n  ): SignerInfo {\n    const message = createBaseSignerInfo();\n    message.publicKey =\n      object.publicKey !== undefined && object.publicKey !== null\n        ? Any.fromPartial(object.publicKey)\n        : undefined;\n    message.modeInfo =\n      object.modeInfo !== undefined && object.modeInfo !== null\n        ? ModeInfo.fromPartial(object.modeInfo)\n        : undefined;\n    message.sequence =\n      object.sequence !== undefined && object.sequence !== null\n        ? Long.fromValue(object.sequence)\n        : Long.UZERO;\n    return message;\n  },\n};\n\nfunction createBaseModeInfo(): ModeInfo {\n  return { single: undefined, multi: undefined };\n}\n\nexport const ModeInfo = {\n  encode(\n    message: ModeInfo,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.single !== undefined) {\n      ModeInfo_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.multi !== undefined) {\n      ModeInfo_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ModeInfo {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseModeInfo();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.single = ModeInfo_Single.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.multi = ModeInfo_Multi.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ModeInfo {\n    return {\n      single: isSet(object.single)\n        ? ModeInfo_Single.fromJSON(object.single)\n        : undefined,\n      multi: isSet(object.multi)\n        ? ModeInfo_Multi.fromJSON(object.multi)\n        : undefined,\n    };\n  },\n\n  toJSON(message: ModeInfo): unknown {\n    const obj: any = {};\n    message.single !== undefined &&\n      (obj.single = message.single\n        ? ModeInfo_Single.toJSON(message.single)\n        : undefined);\n    message.multi !== undefined &&\n      (obj.multi = message.multi\n        ? ModeInfo_Multi.toJSON(message.multi)\n        : undefined);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ModeInfo>, I>>(object: I): ModeInfo {\n    const message = createBaseModeInfo();\n    message.single =\n      object.single !== undefined && object.single !== null\n        ? ModeInfo_Single.fromPartial(object.single)\n        : undefined;\n    message.multi =\n      object.multi !== undefined && object.multi !== null\n        ? ModeInfo_Multi.fromPartial(object.multi)\n        : undefined;\n    return message;\n  },\n};\n\nfunction createBaseModeInfo_Single(): ModeInfo_Single {\n  return { mode: 0 };\n}\n\nexport const ModeInfo_Single = {\n  encode(\n    message: ModeInfo_Single,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.mode !== 0) {\n      writer.uint32(8).int32(message.mode);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ModeInfo_Single {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseModeInfo_Single();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.mode = reader.int32() as any;\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ModeInfo_Single {\n    return {\n      mode: isSet(object.mode) ? signModeFromJSON(object.mode) : 0,\n    };\n  },\n\n  toJSON(message: ModeInfo_Single): unknown {\n    const obj: any = {};\n    message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ModeInfo_Single>, I>>(\n    object: I\n  ): ModeInfo_Single {\n    const message = createBaseModeInfo_Single();\n    message.mode = object.mode ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseModeInfo_Multi(): ModeInfo_Multi {\n  return { bitarray: undefined, modeInfos: [] };\n}\n\nexport const ModeInfo_Multi = {\n  encode(\n    message: ModeInfo_Multi,\n    writer: _m0.Writer = _m0.Writer.create()\n  ): _m0.Writer {\n    if (message.bitarray !== undefined) {\n      CompactBitArray.encode(\n        message.bitarray,\n        writer.uint32(10).fork()\n      ).ldelim();\n    }\n    for (const v of message.modeInfos) {\n      ModeInfo.encode(v!, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ModeInfo_Multi {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseModeInfo_Multi();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.bitarray = CompactBitArray.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.modeInfos.push(ModeInfo.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ModeInfo_Multi {\n    return {\n      bitarray: isSet(object.bitarray)\n        ? CompactBitArray.fromJSON(object.bitarray)\n        : undefined,\n      modeInfos: Array.isArray(object?.modeInfos)\n        ? object.modeInfos.map((e: any) => ModeInfo.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: ModeInfo_Multi): unknown {\n    const obj: any = {};\n    message.bitarray !== undefined &&\n      (obj.bitarray = message.bitarray\n        ? CompactBitArray.toJSON(message.bitarray)\n        : undefined);\n    if (message.modeInfos) {\n      obj.modeInfos = message.modeInfos.map((e) =>\n        e ? ModeInfo.toJSON(e) : undefined\n      );\n    } else {\n      obj.modeInfos = [];\n    }\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ModeInfo_Multi>, I>>(\n    object: I\n  ): ModeInfo_Multi {\n    const message = createBaseModeInfo_Multi();\n    message.bitarray =\n      object.bitarray !== undefined && object.bitarray !== null\n        ? CompactBitArray.fromPartial(object.bitarray)\n        : undefined;\n    message.modeInfos =\n      object.modeInfos?.map((e) => ModeInfo.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseFee(): Fee {\n  return { amount: [], gasLimit: Long.UZERO, payer: \"\", granter: \"\" };\n}\n\nexport const Fee = {\n  encode(message: Fee, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {\n    for (const v of message.amount) {\n      Coin.encode(v!, writer.uint32(10).fork()).ldelim();\n    }\n    if (!message.gasLimit.isZero()) {\n      writer.uint32(16).uint64(message.gasLimit);\n    }\n    if (message.payer !== \"\") {\n      writer.uint32(26).string(message.payer);\n    }\n    if (message.granter !== \"\") {\n      writer.uint32(34).string(message.granter);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): Fee {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseFee();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.amount.push(Coin.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.gasLimit = reader.uint64() as Long;\n          break;\n        case 3:\n          message.payer = reader.string();\n          break;\n        case 4:\n          message.granter = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromJSON(object: any): Fee {\n    return {\n      amount: Array.isArray(object?.amount)\n        ? object.amount.map((e: any) => Coin.fromJSON(e))\n        : [],\n      gasLimit: isSet(object.gasLimit)\n        ? Long.fromValue(object.gasLimit)\n        : Long.UZERO,\n      payer: isSet(object.payer) ? String(object.payer) : \"\",\n      granter: isSet(object.granter) ? String(object.granter) : \"\",\n    };\n  },\n\n  toJSON(message: Fee): unknown {\n    const obj: any = {};\n    if (message.amount) {\n      obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n    } else {\n      obj.amount = [];\n    }\n    message.gasLimit !== undefined &&\n      (obj.gasLimit = (message.gasLimit || Long.UZERO).toString());\n    message.payer !== undefined && (obj.payer = message.payer);\n    message.granter !== undefined && (obj.granter = message.granter);\n    return obj;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<Fee>, I>>(object: I): Fee {\n    const message = createBaseFee();\n    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];\n    message.gasLimit =\n      object.gasLimit !== undefined && object.gasLimit !== null\n        ? Long.fromValue(object.gasLimit)\n        : Long.UZERO;\n    message.payer = object.payer ?? \"\";\n    message.granter = object.granter ?? \"\";\n    return message;\n  },\n};\n\ndeclare var self: any | undefined;\ndeclare var window: any | undefined;\ndeclare var global: any | undefined;\nvar globalThis: any = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob: (b64: string) => string =\n  globalThis.atob ||\n  ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64: string): Uint8Array {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\n\nconst btoa: (bin: string) => string =\n  globalThis.btoa ||\n  ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr: Uint8Array): string {\n  const bin: string[] = [];\n  arr.forEach((byte) => {\n    bin.push(String.fromCharCode(byte));\n  });\n  return btoa(bin.join(\"\"));\n}\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Long\n  ? string | number | Long\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import invariant from \"tiny-invariant\";\nimport {APIClient} from \"./APIClient\";\nimport {\n  GeneratedType,\n  OfflineSigner,\n  Registry,\n  TxBodyEncodeObject,\n} from \"@cosmjs/proto-signing\";\nimport { Any } from \"cosmjs-types/google/protobuf/any\";\nimport {\n  BaseMsg,\n\n  MsgGrant,\n  MsgExec,\n  MsgRevoke,\n  MsgSend,\n  MsgMultiSend,\n  MsgVerifyInvariant,\n  MsgFundCommunityPool,\n  MsgSetWithdrawAddress,\n  MsgWithdrawDelegatorReward,\n  MsgWithdrawValidatorCommission,\n  MsgSubmitEvidence,\n  MsgGrantAllowance,\n  MsgRevokeAllowance,\n  MsgCreateVestingAccount,\n  MsgGovRepurchase,\n  MsgEthereumTx,\n  MsgSendNft,\n  MsgCreateRandSwapRewardConfig,\n  MsgOpenRandSwapReward,\n  MsgCloseRandSwapReward,\n  MsgUpdateRandSwapRewardConfig,\n  MsgCreateLiquidityRewardConfig,\n  MsgUpdateLiquidityRewardConfig,\n  MsgOpenLiquidityReward,\n  MsgCloseLiquidityReward,\n  MsgCollectFeeProtocol,\n  MsgGovCorePool,\n  MsgIssue,\n  MsgMint,\n  MsgBurn,\n  MsgTransferOwnership,\n  MsgConfirmOwnership,\n  MsgStoreCode,\n\n  MsgCollect,\n  MsgCollectReward,\n  MsgCreatePool,\n  MsgCreatePosition,\n  MsgDecreaseLiquidity,\n  MsgIncreaseLiquidity,\n  MsgSwapExactIn,\n  MsgSwapExactOut,\n  MsgSubmitProposal,\n  MsgDeposit,\n  MsgVote,\n  MsgVoteWeighted,\n  MsgCreateValidator,\n  MsgEditValidator,\n  MsgDelegate,\n  MsgBeginRedelegate,\n  MsgUndelegate,\n  MsgCollectRandSwapReward\n} from \"../msgs\";\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { PubKey } from \"../proto/cosmos/crypto/secp256k1/keys\";\nimport {\n  SignerInfo,\n  ModeInfo,\n  ModeInfo_Single,\n  Fee,\n  AuthInfo,\n  SignDoc,\n  TxRaw,\n} from \"../proto/cosmos/tx/v1beta1/tx\";\nimport { SignMode } from \"../proto/cosmos/tx/signing/v1beta1/signing\";\nimport { Coin } from \"../proto/cosmos/base/v1beta1/coin\";\nimport { fromBase64, toBase64 } from \"@cosmjs/encoding\";\nimport {Chain_Id, CHAIN_NAMES, NETWORK_DETAILS} from \"../constants\";\n\nexport interface ISender {\n  address: string;\n  pubkey: Uint8Array;\n  accountNumber: number;\n  sequence: number;\n}\n\nexport interface TxGenerated {\n  signDirect: {\n    body: TxBodyEncodeObject;\n    authInfo: AuthInfo;\n    signBytes: string;\n  };\n}\n\nexport const SIGN_DIRECT = SignMode.SIGN_MODE_DIRECT;\n\nexport class TxClient {\n  public chainId: Chain_Id;\n  public apiClient: APIClient;\n  public rpcUrl: string;\n  public accountAddress: string;\n  public signer: OfflineSigner;\n  public registry: Registry;\n\n  // public walletClient: SigningStargateClient | null = null;\n  // public sender: ISender | null = null;\n\n  constructor(\n    chainId: Chain_Id,\n    apiClient: APIClient,\n    rpcUrl: string,\n    signer: OfflineSigner,\n    accountAddress: string,\n  ) {\n    invariant(!!signer, \"wallet is required!\");\n\n    this.chainId = chainId;\n    this.apiClient = apiClient;\n    this.rpcUrl = rpcUrl;\n    this.signer = signer;\n    this.accountAddress = accountAddress;\n\n    const registryTypes = new Map<string, GeneratedType>();\n\n    registryTypes.set(MsgGrant.typeUrl, MsgGrant.Proto);\n    registryTypes.set(MsgExec.typeUrl, MsgExec.Proto);\n    registryTypes.set(MsgRevoke.typeUrl, MsgRevoke.Proto);\n    registryTypes.set(MsgSend.typeUrl, MsgSend.Proto);\n    registryTypes.set(MsgMultiSend.typeUrl, MsgMultiSend.Proto);\n    registryTypes.set(MsgVerifyInvariant.typeUrl, MsgVerifyInvariant.Proto);\n    registryTypes.set(MsgFundCommunityPool.typeUrl, MsgFundCommunityPool.Proto);\n    registryTypes.set(MsgSetWithdrawAddress.typeUrl, MsgSetWithdrawAddress.Proto);\n    registryTypes.set(MsgWithdrawDelegatorReward.typeUrl, MsgWithdrawDelegatorReward.Proto);\n    registryTypes.set(MsgWithdrawValidatorCommission.typeUrl, MsgWithdrawValidatorCommission.Proto);\n    registryTypes.set(MsgSubmitEvidence.typeUrl, MsgSubmitEvidence.Proto);\n    registryTypes.set(MsgGrantAllowance.typeUrl, MsgGrantAllowance.Proto);\n    registryTypes.set(MsgRevokeAllowance.typeUrl, MsgRevokeAllowance.Proto);\n    registryTypes.set(MsgCreateVestingAccount.typeUrl, MsgCreateVestingAccount.Proto);\n    registryTypes.set(MsgGovRepurchase.typeUrl, MsgGovRepurchase.Proto);\n    registryTypes.set(MsgEthereumTx.typeUrl, MsgEthereumTx.Proto);\n    registryTypes.set(MsgSendNft.typeUrl, MsgSendNft.Proto);\n    registryTypes.set(MsgCreateRandSwapRewardConfig.typeUrl, MsgCreateRandSwapRewardConfig.Proto);\n    registryTypes.set(MsgOpenRandSwapReward.typeUrl, MsgOpenRandSwapReward.Proto);\n    registryTypes.set(MsgCloseRandSwapReward.typeUrl, MsgCloseRandSwapReward.Proto);\n    registryTypes.set(MsgUpdateRandSwapRewardConfig.typeUrl, MsgUpdateRandSwapRewardConfig.Proto);\n    registryTypes.set(MsgCreateLiquidityRewardConfig.typeUrl, MsgCreateLiquidityRewardConfig.Proto);\n    registryTypes.set(MsgUpdateLiquidityRewardConfig.typeUrl, MsgUpdateLiquidityRewardConfig.Proto);\n    registryTypes.set(MsgOpenLiquidityReward.typeUrl, MsgOpenLiquidityReward.Proto);\n    registryTypes.set(MsgCloseLiquidityReward.typeUrl, MsgCloseLiquidityReward.Proto);\n    registryTypes.set(MsgCollectFeeProtocol.typeUrl, MsgCollectFeeProtocol.Proto);\n    registryTypes.set(MsgGovCorePool.typeUrl, MsgGovCorePool.Proto);\n    registryTypes.set(MsgIssue.typeUrl, MsgIssue.Proto);\n    registryTypes.set(MsgMint.typeUrl, MsgMint.Proto);\n    registryTypes.set(MsgBurn.typeUrl, MsgBurn.Proto);\n    registryTypes.set(MsgTransferOwnership.typeUrl, MsgTransferOwnership.Proto);\n    registryTypes.set(MsgConfirmOwnership.typeUrl, MsgConfirmOwnership.Proto);\n    registryTypes.set(MsgStoreCode.typeUrl, MsgStoreCode.Proto);\n\n    registryTypes.set(MsgCollect.typeUrl, MsgCollect.Proto);\n    registryTypes.set(MsgCollectReward.typeUrl, MsgCollectReward.Proto);\n    registryTypes.set(MsgCreatePool.typeUrl, MsgCreatePool.Proto);\n    registryTypes.set(MsgCreatePosition.typeUrl, MsgCreatePosition.Proto);\n    registryTypes.set(MsgDecreaseLiquidity.typeUrl, MsgDecreaseLiquidity.Proto);\n    registryTypes.set(MsgIncreaseLiquidity.typeUrl, MsgIncreaseLiquidity.Proto);\n    registryTypes.set(MsgSwapExactIn.typeUrl, MsgSwapExactIn.Proto);\n    registryTypes.set(MsgSwapExactOut.typeUrl, MsgSwapExactOut.Proto);\n    registryTypes.set(MsgSubmitProposal.typeUrl, MsgSubmitProposal.Proto);\n    registryTypes.set(MsgDeposit.typeUrl, MsgDeposit.Proto);\n    registryTypes.set(MsgVote.typeUrl, MsgVote.Proto);\n    registryTypes.set(MsgVoteWeighted.typeUrl, MsgVoteWeighted.Proto);\n    registryTypes.set(MsgCreateValidator.typeUrl, MsgCreateValidator.Proto);\n    registryTypes.set(MsgEditValidator.typeUrl, MsgEditValidator.Proto);\n    registryTypes.set(MsgDelegate.typeUrl, MsgDelegate.Proto);\n    registryTypes.set(MsgBeginRedelegate.typeUrl, MsgBeginRedelegate.Proto);\n    registryTypes.set(MsgUndelegate.typeUrl, MsgUndelegate.Proto);\n    registryTypes.set(MsgCollectRandSwapReward.typeUrl, MsgCollectRandSwapReward.Proto);\n\n    this.registry = new Registry(registryTypes);\n  }\n\n  public async getSender(): Promise<ISender> {\n    const { authAPI } = this.apiClient;\n    const {\n      account: {\n        base_account: {\n          pub_key,\n          account_number,\n          sequence,\n        },\n      },\n    } = await authAPI.accounts(this.accountAddress);\n    const { address, pubkey } = (await this.signer.getAccounts())[0];\n    return {\n      address: this.accountAddress,\n      pubkey,\n      accountNumber: parseInt(account_number),\n      sequence: parseInt(sequence),\n    } as ISender;\n  }\n\n  public async sendTransaction(\n    messages: BaseMsg | Array<BaseMsg>,\n    gasLimit?: number,\n    memo = \"\",\n  ) {\n    const sender = await this.getSender();\n    // const pubKeyDecoded = Buffer.from(sender.pubkey, \"base64\");\n\n    // 1. SignDirect\n    const signInfoDirect = createSignerInfo(\n      sender.pubkey,\n      sender.sequence,\n      SIGN_DIRECT\n    );\n\n    // 2. authInfo\n    let authInfoDirect;\n    if (gasLimit) {\n      // 2. Fee\n      const feeMessage = createFee(\n        '',\n        NETWORK_DETAILS[this.chainId].nativeCurrency.base,\n        gasLimit\n      );\n      authInfoDirect = createAuthInfo(signInfoDirect, feeMessage);\n    } else {\n      authInfoDirect = AuthInfo.fromPartial({\n        signerInfos: [signInfoDirect],\n        fee:{}\n      });\n    }\n\n    // 3. txbody\n    // const body = createBodyWithMultipleMessages(messages, memo);\n    const _messages = messages instanceof Array ? messages : [messages];\n    const body = createTxBodyEncodeObject(_messages, memo);\n\n    // 4. signDoc\n    const signDocDirect = createSigDoc(\n      this.registry.encode(body),\n      AuthInfo.encode(authInfoDirect).finish(),\n      this.chainId,\n      sender.accountNumber\n    );\n\n    // 5. sign\n    let walletClient;\n    walletClient = await SigningStargateClient.connectWithSigner(\n      this.rpcUrl,\n      this.signer,\n      {\n        registry: this.registry,\n        prefix: NETWORK_DETAILS[this.chainId].nativeCurrency.symbol.toLowerCase(),\n      }\n    );\n    // @ts-ignore\n    const { signed, signature } = await walletClient.signer.signDirect(\n      this.accountAddress,\n      signDocDirect\n    );\n\n    const txRaw = TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [fromBase64(signature.signature)],\n    });\n    const txBytes = TxRaw.encode(txRaw).finish();\n\n    return walletClient.broadcastTx(txBytes);\n  }\n\n  public async getEstimatedFee(\n    messages: BaseMsg | Array<BaseMsg>,\n    memo: string = \"\"\n  ) {\n    const sender = await this.getSender();\n    // const pubKeyDecoded = Buffer.from(sender.pubkey, \"base64\");\n\n    // 1. SignDirect\n    const signInfoDirect = createSignerInfo(\n      sender.pubkey,\n      sender.sequence,\n      SIGN_DIRECT\n    );\n\n    // 2. authInfo\n    const authInfoDirect = AuthInfo.fromPartial({\n      signerInfos: [signInfoDirect],\n      fee:{}\n    });\n\n    // 3. txbody\n    // const body = createBodyWithMultipleMessages(messages, memo);\n    const _messages = messages instanceof Array ? messages : [messages];\n    const body = createTxBodyEncodeObject(_messages, memo);\n\n    // 4. signDoc\n    const signDocDirect = createSigDoc(\n      this.registry.encode(body),\n      AuthInfo.encode(authInfoDirect).finish(),\n      this.chainId,\n      sender.accountNumber\n    );\n    console.log(signDocDirect);\n\n    const txRaw = TxRaw.fromPartial({\n      bodyBytes: signDocDirect.bodyBytes,\n      authInfoBytes: signDocDirect.authInfoBytes,\n      signatures: [new Uint8Array()],\n    });\n    const txBytes = TxRaw.encode(txRaw).finish();\n\n    const { gasInfo } = await this.apiClient.txAPI.simulate({\n      txBytes\n    });\n\n    console.log('gas_used: ' + gasInfo?.gasUsed);\n\n    return gasInfo?.gasUsed;\n  }\n}\n\nexport function createTxBodyEncodeObject(\n  messages: Array<BaseMsg>,\n  memo: string\n): TxBodyEncodeObject {\n  const results = messages.map((item) => {\n    return item.generateMessage();\n  });\n  return {\n    typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n    value: {\n      messages: results,\n      memo: memo,\n    },\n  };\n}\n\nexport function createSigDoc(\n  bodyBytes: Uint8Array,\n  authInfoBytes: Uint8Array,\n  chainId: string,\n  accountNumber: number\n) {\n  return SignDoc.fromPartial({\n    bodyBytes,\n    authInfoBytes,\n    chainId,\n    accountNumber,\n  });\n}\n\nfunction createAuthInfo(signerInfo: SignerInfo, fee: Fee) {\n  return AuthInfo.fromPartial({\n    signerInfos: [signerInfo],\n    fee,\n  });\n}\n\nfunction createFee(fee: string, denom: string, gasLimit: number) {\n  return Fee.fromPartial({\n    amount: [\n      Coin.fromPartial({\n        denom,\n        amount: fee,\n      }),\n    ],\n    gasLimit,\n  });\n}\n\nfunction createSignerInfo(\n  publicKey: Uint8Array,\n  sequence: number,\n  mode: number\n) {\n  const pubkey = Any.fromPartial({\n    typeUrl: \"/ethermint.crypto.v1.ethsecp256k1.PubKey\",\n    value: PubKey.encode({\n      key: publicKey,\n    }).finish(),\n  });\n  const signerInfo = SignerInfo.fromPartial({\n    publicKey: pubkey,\n    modeInfo: ModeInfo.fromPartial({\n      single: ModeInfo_Single.fromPartial({\n        mode,\n      }),\n    }),\n    sequence,\n  });\n\n  return signerInfo;\n}\n","import {\n  APIRequester,\n  AuthAPI,\n  AuthzAPI,\n  BankAPI,\n  DeflationAPI,\n  GovAPI,\n  MintAPI,\n  PoolIncentiveAPI,\n  SlashingAPI,\n  StakingAPI,\n  SwapAPI,\n  TendermintAPI,\n  TokenAPI,\n  TxAPI,\n  WasmAPI\n} from \"../api\";\nimport {Chain_Id} from \"../constants\";\n\nexport class APIClient {\n  public apiRequester: APIRequester;\n  public nodeUrl: string;\n\n  // API access\n  public authAPI: AuthAPI;\n  public authzAPI: AuthzAPI;\n  public bankAPI: BankAPI;\n  public deflationAPI: DeflationAPI;\n  public govAPI: GovAPI;\n  public mintAPI: MintAPI;\n  public poolIncentiveAPI: PoolIncentiveAPI;\n  public slashingAPI: SlashingAPI;\n  public stakingAPI: StakingAPI;\n  public swapAPI: SwapAPI;\n  public tendermintAPI: TendermintAPI;\n  public tokenAPI: TokenAPI;\n  public txAPI: TxAPI;\n  public wasmAPI: WasmAPI;\n\n  constructor(URL: string, chainId: Chain_Id = Chain_Id.Mainnet) {\n    this.nodeUrl = URL;\n    this.apiRequester = new APIRequester(URL);\n\n    // instantiate APIs\n    this.authAPI = new AuthAPI(this.apiRequester);\n    this.authzAPI = new AuthzAPI(this.apiRequester);\n    this.bankAPI = new BankAPI(this.apiRequester);\n    this.deflationAPI = new DeflationAPI(this.apiRequester);\n    this.govAPI = new GovAPI(this.apiRequester);\n    this.mintAPI = new MintAPI(this.apiRequester);\n    this.poolIncentiveAPI = new PoolIncentiveAPI(this.apiRequester);\n    this.slashingAPI = new SlashingAPI(this.apiRequester);\n    this.stakingAPI = new StakingAPI(this.apiRequester);\n    this.swapAPI = new SwapAPI(this.apiRequester);\n    this.tendermintAPI = new TendermintAPI(this.apiRequester);\n    this.tokenAPI = new TokenAPI(this.apiRequester);\n    this.txAPI = new TxAPI(this.apiRequester);\n    this.wasmAPI = new WasmAPI(this.apiRequester);\n  }\n}\n","export const ONE_DAY_TO_SECONDS = 86400;\n\nexport const ONE_YEAR_TO_DAYS = 365;\n","import { Transaction_Status } from \"../types\";\n\nexport class TransactionLooper {\n  transactionHash: string;\n  description: string;\n  status: Transaction_Status;\n  counter: number;\n  onTransactionSuccess: Function | undefined;\n\n  constructor(\n    txHash: string,\n    description: string,\n    status: Transaction_Status,\n    onTransactionSuccess?: Function\n  ) {\n    this.transactionHash = txHash;\n    this.description = description;\n    this.status = status;\n    this.counter = 0;\n    this.onTransactionSuccess = onTransactionSuccess;\n  }\n}\n","export const ZERO = \"0\";\n","export function objectToMap<K, T>(source: Object) {\n  return new Map(Object.entries(source));\n}\n\nexport function arrayToMap<T, K extends keyof T>(array: Array<T>, property: K) {\n  const map = new Map<T[K], T>();\n  for (const item of array) {\n    map.set(item[property], item);\n  }\n  return map;\n}\n","import { REG_DECIMAL, REG_NUMBER, ZERO } from \"../constants\";\nimport Decimal from \"decimal.js\";\n\nexport function isNumeric(value: string) {\n  return !isNaN(parseFloat(value));\n  // return new Decimal(value).lessThan(ZERO);\n}\n\nexport function checkInputNumber(value: string) {\n  if (REG_NUMBER.test(value) || REG_DECIMAL.test(value) === true) {\n    return true;\n  }\n  return false;\n}\n","import Decimal from \"decimal.js\";\n\nexport const decimalNumber = (number = \" \") => {\n  const [int = \"\", float = \"\"] = number.toString().replace(\"$\", \"\").split(\".\");\n\n  if (int.length > 10) {\n    return `${new Decimal(int).div(new Decimal(10).pow(10)).toFixed(2)}B`;\n  } else if (int.length > 7) {\n    return `${new Decimal(int).div(new Decimal(10).pow(7)).toFixed(2)}M`;\n  } else if (int.length > 3) {\n    return `${new Decimal(int).div(new Decimal(10).pow(3)).toFixed(2)}K`;\n  } else {\n    return `${Number(int) > 0 ? int : 0}.${\n      float.length > 0 ? float.slice(0, 2) : \"00\"\n    }`;\n  }\n};\n","export function deepCopy(source: Object) {\n  // if (typeof source != \"object\") {\n  //   return source;\n  // }\n  // if (source == null) {\n  //   return source;\n  // }\n  // const newObj = source.constructor === Array ? [] as Array<T> : {};\n  // for (const i in source) {\n  //   newObj[i] = deepCopy(source[i]);\n  // }\n  // return newObj;\n\n  return JSON.parse(JSON.stringify(source));\n}\n","import Decimal from \"decimal.js\";\nimport { DEFAULT_PRECISION } from \"../constants\";\n\nexport function plus(value1: string, value2: string) {\n  return new Decimal(value1).plus(value2).toString();\n}\n\nexport function minus(value1: string | number, value2: string | number) {\n  return new Decimal(value1).minus(value2).toString();\n}\n\nexport function multipliedBy(value1: string | number, value2: string | number) {\n  return new Decimal(value1).mul(value2).toString();\n}\n\nexport function div(value1: string, value2: string): string {\n  return new Decimal(value1).div(value2).toString();\n}\n\nexport function isGreaterThan(value1: string, value2: string) {\n  return new Decimal(value1).greaterThanOrEqualTo(value2);\n}\n\nexport function isLessThan(value1: string, value2: string) {\n  return new Decimal(value1).lessThan(value2);\n}\n\nexport function isEqualTo(value1: string, value2: string) {\n  return new Decimal(value1).equals(value2);\n}\n\nexport function pow18(value: string): string {\n  return new Decimal(value).mul(Math.pow(10, DEFAULT_PRECISION)).toFixed();\n}\n\nexport function pow(\n  value: string | number | Decimal,\n  precision: number = DEFAULT_PRECISION,\n  round: Decimal.Rounding = Decimal.ROUND_DOWN\n): string {\n  if (value === \"\") {\n    return \"0\";\n  }\n  const _value = new Decimal(value).mul(Math.pow(10, precision));\n  if (round === Decimal.ROUND_UP) {\n    return _value.ceil().toFixed();\n  }\n  return _value.floor().toFixed();\n}\n\nexport function powM18(value: string | number) {\n  return new Decimal(value).div(Math.pow(10, DEFAULT_PRECISION)).toString();\n}\n\nexport function shift(value: string, precision: number = DEFAULT_PRECISION) {\n  return new Decimal(value).div(Math.pow(10, precision)).toFixed();\n}\n\nexport function isPositive(value: string | number) {\n  if (!value) {\n    return false;\n  }\n  return new Decimal(value).greaterThan(0);\n}\n","export function encrypt(value: string, prefix = 6, suffix = 4) {\n  if (value) {\n    return value.substr(0, prefix) + \"...\" + value.substr(-suffix);\n  } else {\n    return value;\n  }\n}\n","import { Fee_Amount, FEE_AMOUNT_DETAIL } from \"../constants\";\n\nexport function getPercentByFeeAmount(fee: Fee_Amount | undefined) {\n  if (fee) {\n    return `${FEE_AMOUNT_DETAIL[fee].label}%`;\n  } else {\n    return \"-\";\n  }\n}\n","import { Fee_Amount } from \"../constants\";\nimport { Bech32, toUtf8 } from \"@cosmjs/encoding\";\nimport { sha256 } from \"@cosmjs/crypto\";\n\nexport function getPoolAddress(\n  denom0: string,\n  denom1: string,\n  fee: Fee_Amount\n) {\n  let key;\n  if (denom0 > denom1) {\n    key = `${denom1}-${denom0}-${fee}`;\n  } else {\n    key = `${denom0}-${denom1}-${fee}`;\n  }\n  return Bech32.encode(\"mtos\", sha256(toUtf8(key)).slice(0, 20));\n}\n","export function to32(value: string) {\n  const arr = value.split(\",\");\n  const len = 32 - arr.length;\n  const result: Array<number> = [];\n  arr.forEach((item) => {\n    result.push(+item);\n  });\n  for (let i = 0; i < len; i++) {\n    result.unshift(0);\n  }\n  return result;\n}\n","import Decimal from \"decimal.js\";\n\nexport function toPercent(value: Decimal.Value, hundred: boolean = true): string {\n  try {\n    if (hundred) {\n      return `${new Decimal(value).mul(100).toFixed(2)}%`;\n    } else {\n      return `${new Decimal(value).toFixed(2)}%`;\n    }\n  } catch (e) {\n    return value.toString();\n  }\n}\n","import Decimal from \"decimal.js\";\n\nexport function toUsd(value: Decimal.Value): string | number {\n  try {\n    return \"$\" + new Decimal(value).toFixed(2);\n  } catch (e) {\n    return String(value || \"-\");\n  }\n}\n"],"names":["APIRequester","baseURL","axios","this","Axios","create","headers","Accept","timeout","_proto","get","endpoint","params","then","d","toCamelCase","data","post","obj","rtn","Array","map","key","hasOwnProperty","replace","k","toUpperCase","Fee_Amount","BaseAPI","request","AuthAPI","_inheritsLoose","accounts","accountAddress","AuthzAPI","grants","granter","grantee","msgTypeUrl","msg_type_url","BankAPI","allBalances","balance","denom","totalSupply","supplyOf","DeflationAPI","allRepurchase","getRepurchase","GovAPI","proposals","proposal","proposalId","deposits","deposit","depositor","votes","vote","voter","tallyResult","paramsType","MintAPI","inflation","annualProvisions","PoolIncentiveAPI","allLiquidityPoolReward","getLiquidityPoolReward","address","allLiquidityRewardConfig","getLiquidityRewardConfig","id","allLiquidityRewardDenomR","getLiquidityRewardDenom","allRandSwapAccountReward","getRandSwapAccountReward","account","allRandSwapPoolReward","getRandSwapPoolReward","allRandSwapRewardConfig","getRandSwapRewardConfig","allRandSwapRewardDenom","getRandSwapRewardDenom","allRandSwapRewardReveal","getRandSwapRewardReveal","configId","round","SlashingAPI","signingInfos","signingInfo","valConsAddress","StakingAPI","delegations","delegator","redelegations","unbondingDelegations","delegatorDelegations","validator","delegationsByDelegator","delegationsByDelegatorValidator","validators","validatorsByValidator","validatorsDelegationsByValidator","validatorsDelegationsByValidatorDelegator","validatorsUnbondingDelegationsByValidatorDelegator","validatorsUnbondingDelegations","pool","SwapAPI","allCorePool","getCorePool","liquidityPositionByIds","tokenIds","qs","stringify","indices","liquidityPositionById","tokenId","getLiquidityPositionTokenUri","allLiquidityPositionOwner","skip_zero_liquidity","allPoolFee","getPoolFee","fee","allPoolObservation","allPoolPosition","owner","poolSlot0Aggregation","addresses","allPoolSlot0","allPoolTick","allPool","getPool","getPoolObservation","index","getPoolPosition","tickLower","tickUpper","getPoolSlot0","quoteSwapExactIn","quoteSwapExactOut","TendermintAPI","blockInfo","height","undefined","nodeInfo","syncing","validatorSet","TokenAPI","allMetadata","getMetadata","allOwnershipConfirmation","getOwnershipConfirmation","TxAPI","simulate","broadcast","tx","txBlock","txInfo","txHash","search","options","WasmAPI","codes","code","codeID","contractsByCode","contractInfo","contractAddress","Chain_Id","FEE_AMOUNT_DETAIL","LOWEST","label","value","description","LOW","MEDIUM","HIGH","Transaction_Status","Tip_Level","Direction","CHAIN_NAMES","Mainnet","Testnet","Devnet","NETWORK_DETAILS","chainId","chainName","nativeCurrency","base","name","symbol","display_exponent","logo_uri","nodeUrl","rpcUrl","blockExplorerUrl","REG_NUMBER","RegExp","REG_DECIMAL","TICK_SPACINGS","100","500","3000","10000","toAmountString","precision","roundingMode","Decimal","ROUND_DOWN","toSignificantDigits","toString","e","String","sortsBefore","baseToken","quoteToken","toLowerCase","moment","locale","LiquidityMath","getRightSideLiquidity","leftRangeValue","rightRangeValue","priceValue","amount","numerator","_value1","div","sqrt","_value2","denominator","sub","getLeftSideLiquidity","getLiquidityFromAmount0","amount0","pc","lessThan","greaterThan","deltaX","_getDiverForDeltaX","lower","upper","_getDiverForDeltaY","getLiquidityFromAmount1","amount1","deltaY","getAmount1FromAmount0","token0","liquidity","mul","getAmount0FromAmount1","token1","getAmountByLiquidity","deltaXDiver","deltaYDiver","TickMath","priceToClosestTick","price","log2","toNumber","getNearestTickByPrice","feeAmount","trim","INVALID_TICK","MIN_TICK_VALUE","MIN_TICK","MAX_TICK_VALUE","MAX_TICK","tick","nearestUsableTick","getFormattedPriceByTick","isLowestTick","isHighestTick","pow","getPriceByTick","getNearestPriceByInput","nearestTick","getPriceBySqrtPrice","sqrtPrice","getSqrtPriceByPrice","getBaseTickRange","fromToken","toToken","leftRange","rightRange","getNearestLowestTick","getNearestHighestTick","getNearestPricesByFullTick","lowestPrice","highestPrice","tickSpacing","rounded","Math","BaseMsg","createBaseAny","typeUrl","Uint8Array","Any","message","writer","_m0","uint32","string","length","bytes","input","reader","end","len","pos","tag","skipType","object","isSet","bytesFromBase64","arr","bin","forEach","byte","push","fromCharCode","btoa","join","globalThis","self","window","global","atob","b64","Buffer","from","i","charCodeAt","Long","Timestamp","seconds","isZero","int64","nanos","int32","ZERO","fromValue","Number","Grant","authorization","expiration","fromTimestamp","o","Date","t","millis","MsgGrant","MsgExec","MsgRevoke","encode","grant","date","number","fork","ldelim","getTime","fromNumber","decode","fromJSON","toJSON","toISOString","fromPartial","msgs","isArray","msg","_this","protoMsg","generateMessage","MsgGrant_pb","_this2","MsgExec_pb","_this3","MsgRevoke_pb","Coin","Input","coins","Output","MsgMultiSend","MsgSend","fromAddress","toAddress","inputs","outputs","MsgSend_pb","MsgMultiSend_pb","MsgVerifyInvariant","sender","invariantModuleName","invariantRoute","MsgVerifyInvariant_pb","MsgFundCommunityPool","MsgSetWithdrawAddress","MsgWithdrawDelegatorReward","MsgWithdrawValidatorCommission","delegatorAddress","withdrawAddress","validatorAddress","MsgFundCommunityPool_pb","MsgSetWithdrawAddress_pb","MsgWithdrawDelegatorReward_pb","_this4","MsgWithdrawValidatorCommission_pb","MsgSubmitEvidence","submitter","evidence","MsgSubmitEvidence_pb","MsgGrantAllowance","MsgRevokeAllowance","allowance","createBaseDuration","MsgGrantAllowance_pb","MsgRevokeAllowance_pb","VoteOption","ProposalStatus","Duration","voteOptionFromJSON","VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO","UNRECOGNIZED","voteOptionToJSON","WeightedVoteOption","option","weight","MsgSubmitProposal","content","initialDeposit","proposer","createBaseMsgVote","UZERO","MsgVote","uint64","createBaseMsgVoteWeighted","MsgVoteWeighted","createBaseMsgDeposit","MsgDeposit","createBaseMsgCreateVestingAccount","endTime","delayed","MsgSubmitProposal_pb","MsgDeposit_pb","MsgVote_pb","MsgVoteWeighted_pb","MsgCreateVestingAccount","bool","Boolean","MsgCreateVestingAccount_pb","Repurchase","sellMinAmount","sellMaxAmount","denoms","fees","end2","MsgGovRepurchase","creator","repurchase","v","MsgGovRepurchase_pb","MsgEthereumTx","size","hash","MsgEthereumTx_pb","MsgSendNft","classId","receiver","RandSwapRewardSubConfig","title","numberOfReveal","createBaseRandSwapRewardConfig","enabled","intervalPeriod","mintable","decimal","totalReward","subConfigs","pools","RandSwapRewardConfig","LiquidityRewardSubConfig","createBaseLiquidityRewardConfig","totalRewardPerDay","LiquidityRewardConfig","protobufPackage","MsgCreateRandSwapRewardConfig","config","createBaseMsgOpenRandSwapReward","MsgOpenRandSwapReward","createBaseMsgCloseRandSwapReward","MsgCloseRandSwapReward","createBaseMsgUpdateRandSwapRewardConfig","MsgUpdateRandSwapRewardConfig","MsgCollectRandSwapReward","recipient","MsgCreateLiquidityRewardConfig","createBaseMsgUpdateLiquidityRewardConfig","MsgUpdateLiquidityRewardConfig","createBaseMsgOpenLiquidityReward","MsgOpenLiquidityReward","createBaseMsgCloseLiquidityReward","MsgCloseLiquidityReward","BlockIDFlag","SignedMsgType","BondStatus","MsgCreateRandSwapRewardConfig_pb","MsgCollectRandSwapReward_pb","MsgOpenRandSwapReward_pb","MsgCloseRandSwapReward_pb","_this5","MsgUpdateRandSwapRewardConfig_pb","_this6","MsgCreateLiquidityRewardConfig_pb","_this7","MsgUpdateLiquidityRewardConfig_pb","_this8","MsgOpenLiquidityReward_pb","_this9","MsgCloseLiquidityReward_pb","CommissionRates","rate","maxRate","maxChangeRate","Description","moniker","identity","website","securityContact","details","MsgCreateValidator","MsgEditValidator","MsgDelegate","MsgBeginRedelegate","MsgUndelegate","commission","minSelfDelegation","pubkey","commissionRate","validatorSrcAddress","validatorDstAddress","MsgCreateValidator_pb","MsgEditValidator_pb","MsgDelegate_pb","MsgBeginRedelegate_pb","MsgUndelegate_pb","MsgCollectReward","MsgSwapExactOut","MsgSwapExactIn","MsgCreatePool","MsgCollect","MsgCreatePosition","MsgDecreaseLiquidity","MsgIncreaseLiquidity","MsgCollectFeeProtocol","MsgGovCorePool","denom0","denom1","amount0Desired","amount1Desired","amount0Min","amount1Min","deadline","toTimestamp","fromJsonTimestamp","amount0Max","amount1Max","collectOnly","amountIn","amountOutMin","amountOut","amountInMax","action","triggerTime","MsgCollectReward_pb","MsgSwapExactOut_pb","MsgSwapExactIn_pb","MsgCreatePool_pb","MsgCollect_pb","MsgCreatePosition_pb","MsgDecreaseLiquidity_pb","MsgIncreaseLiquidity_pb","MsgCollectFeeProtocol_pb","_this10","MsgGovCorePool_pb","MsgIssue","MsgMint","MsgBurn","MsgTransferOwnership","MsgConfirmOwnership","AccessType","ContractCodeHistoryOperationType","decimals","initialSupply","maxSupply","accessTypeFromJSON","ACCESS_TYPE_UNSPECIFIED","ACCESS_TYPE_NOBODY","ACCESS_TYPE_ONLY_ADDRESS","ACCESS_TYPE_EVERYBODY","MsgIssue_pb","MsgMint_pb","MsgBurn_pb","MsgTransferOwnership_pb","MsgConfirmOwnership_pb","AccessConfig","permission","createBaseMsgStoreCode","wasmByteCode","instantiatePermission","MsgStoreCode","accessTypeToJSON","createBaseCompactBitArray","extraBitsStored","elems","MsgStoreCode_pb","CompactBitArray","SignMode","signModeFromJSON","SIGN_MODE_UNSPECIFIED","SIGN_MODE_DIRECT","SIGN_MODE_TEXTUAL","SIGN_MODE_LEGACY_AMINO_JSON","SIGN_MODE_EIP_191","TxRaw","bodyBytes","authInfoBytes","signatures","AuthInfo","signerInfos","SignerInfo","Fee","createBaseSignerInfo","publicKey","modeInfo","sequence","ModeInfo","single","ModeInfo_Single","multi","ModeInfo_Multi","mode","signModeToJSON","bitarray","modeInfos","createBaseFee","gasLimit","payer","SIGN_DIRECT","TxClient","apiClient","signer","registry","invariant","registryTypes","Map","set","Proto","Registry","getSender","authAPI","_context","account_number","_yield$authAPI$accoun2","base_account","getAccounts","accountNumber","parseInt","sendTransaction","messages","memo","_context2","signInfoDirect","createSignerInfo","feeMessage","createFee","authInfoDirect","body","createTxBodyEncodeObject","signDocDirect","createSigDoc","finish","SigningStargateClient","connectWithSigner","prefix","walletClient","signDirect","txRaw","signed","_yield$walletClient$s","fromBase64","signature","txBytes","broadcastTx","getEstimatedFee","_context3","console","log","txAPI","gasInfo","gasUsed","item","URL","apiRequester","authzAPI","bankAPI","deflationAPI","govAPI","mintAPI","poolIncentiveAPI","slashingAPI","stakingAPI","swapAPI","tendermintAPI","tokenAPI","wasmAPI","status","onTransactionSuccess","transactionHash","counter","array","property","test","split","int","float","toFixed","slice","source","JSON","parse","value1","value2","suffix","substr","time","fromNow","pattern","format","seperator","fixed","Bech32","sha256","toUtf8","floor","equals","greaterThanOrEqualTo","isNaN","parseFloat","long","gt","MAX_SAFE_INTEGER","Error","minus","Object","entries","plus","_value","ROUND_UP","ceil","result","unshift","toDecimalPlaces","CosmosDecimal","fromUserInput","hundred"],"mappings":"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"}